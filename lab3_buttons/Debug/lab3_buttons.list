
lab3_buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006748  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b64  08006b64  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b6c  08006b6c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08006b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          00000300  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017536  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e77  00000000  00000000  00037642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  0003a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  0003b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f1e  00000000  00000000  0003c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c4e  00000000  00000000  0005f49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce4d7  00000000  00000000  000750ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001435c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a9c  00000000  00000000  00143618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000dc 	.word	0x200000dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068c0 	.word	0x080068c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	080068c0 	.word	0x080068c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Buzzer_Init>:
#include "buzzer.h"
#include "tim.h"

void Buzzer_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 800057c:	2100      	movs	r1, #0
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <Buzzer_Init+0x18>)
 8000580:	f004 fbe4 	bl	8004d4c <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Init(&htim2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <Buzzer_Init+0x18>)
 8000586:	f004 fca9 	bl	8004edc <HAL_TIM_PWM_Init>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000033c 	.word	0x2000033c

08000594 <Buzzer_Set_Freq>:

void Buzzer_Set_Freq(uint16_t freq) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	TIM2->PSC = ((2 * HAL_RCC_GetPCLK1Freq()) / (2 * BUZZER_VOLUME_MAX * freq)) - 1;
 800059e:	f004 faed 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80005a2:	4603      	mov	r3, r0
 80005a4:	0059      	lsls	r1, r3, #1
 80005a6:	88fa      	ldrh	r2, [r7, #6]
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b8:	3b01      	subs	r3, #1
 80005ba:	6293      	str	r3, [r2, #40]	; 0x28
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <Buzzer_Set_Volume>:

void Buzzer_Set_Volume(uint16_t volume) {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	if (volume > BUZZER_VOLUME_MAX)
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2b0a      	cmp	r3, #10
 80005d2:	d901      	bls.n	80005d8 <Buzzer_Set_Volume+0x14>
		volume = BUZZER_VOLUME_MAX;
 80005d4:	230a      	movs	r3, #10
 80005d6:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = volume;
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	6353      	str	r3, [r2, #52]	; 0x34
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0308 	orr.w	r3, r3, #8
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <MX_GPIO_Init+0xc4>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_GPIO_Init+0xc4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800068e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0xc8>)
 80006a4:	f001 fd24 	bl	80020f0 <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020800 	.word	0x40020800

080006b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x50>)
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_I2C1_Init+0x54>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x50>)
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_I2C1_Init+0x58>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f6:	f001 feaf 	bl	8002458 <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 ffb8 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000138 	.word	0x20000138
 800070c:	40005400 	.word	0x40005400
 8000710:	000186a0 	.word	0x000186a0

08000714 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <HAL_I2C_MspInit+0xa4>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d13c      	bne.n	80007b0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000758:	2312      	movs	r3, #18
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000764:	2304      	movs	r3, #4
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4814      	ldr	r0, [pc, #80]	; (80007c0 <HAL_I2C_MspInit+0xac>)
 8000770:	f001 fcbe 	bl	80020f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 800077e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	201f      	movs	r0, #31
 8000796:	f001 fc44 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800079a:	201f      	movs	r0, #31
 800079c:	f001 fc5d 	bl	800205a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2020      	movs	r0, #32
 80007a6:	f001 fc3c 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007aa:	2020      	movs	r0, #32
 80007ac:	f001 fc55 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <keyboard_read>:

int ks_state = 0;
uint8_t ks_result = 0;
uint8_t ks_current_row = 0;

HAL_StatusTypeDef keyboard_read(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0c6      	sub	sp, #280	; 0x118
 80007c8:	af04      	add	r7, sp, #16
	static uint8_t buf[4];
	uint8_t Nkey = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t kbd_in;

	switch (ks_state) {
 80007d0:	4b82      	ldr	r3, [pc, #520]	; (80009dc <keyboard_read+0x218>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	f200 80fa 	bhi.w	80009ce <keyboard_read+0x20a>
 80007da:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <keyboard_read+0x1c>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007f5 	.word	0x080007f5
 80007e4:	0800085f 	.word	0x0800085f
 80007e8:	080008b7 	.word	0x080008b7
 80007ec:	08000911 	.word	0x08000911
 80007f0:	08000965 	.word	0x08000965
	case 0:
		buf[0] = 0x70;
 80007f4:	4b7a      	ldr	r3, [pc, #488]	; (80009e0 <keyboard_read+0x21c>)
 80007f6:	2270      	movs	r2, #112	; 0x70
 80007f8:	701a      	strb	r2, [r3, #0]
		buf[1] = 0;
 80007fa:	4b79      	ldr	r3, [pc, #484]	; (80009e0 <keyboard_read+0x21c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	705a      	strb	r2, [r3, #1]
		buf[2] = 0;
 8000800:	4b77      	ldr	r3, [pc, #476]	; (80009e0 <keyboard_read+0x21c>)
 8000802:	2200      	movs	r2, #0
 8000804:	709a      	strb	r2, [r3, #2]
		buf[3] = 0;
 8000806:	4b76      	ldr	r3, [pc, #472]	; (80009e0 <keyboard_read+0x21c>)
 8000808:	2200      	movs	r2, #0
 800080a:	70da      	strb	r2, [r3, #3]
		ks_state = 0;
 800080c:	4b73      	ldr	r3, [pc, #460]	; (80009dc <keyboard_read+0x218>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, CONFIG, buf))
 8000812:	4a73      	ldr	r2, [pc, #460]	; (80009e0 <keyboard_read+0x21c>)
 8000814:	2103      	movs	r1, #3
 8000816:	20e2      	movs	r0, #226	; 0xe2
 8000818:	f000 ff58 	bl	80016cc <PCA9538_Write_Register>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8000822:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000826:	2b00      	cmp	r3, #0
 8000828:	d014      	beq.n	8000854 <keyboard_read+0x90>
 800082a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800082e:	4638      	mov	r0, r7
 8000830:	4a6c      	ldr	r2, [pc, #432]	; (80009e4 <keyboard_read+0x220>)
 8000832:	9202      	str	r2, [sp, #8]
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	231f      	movs	r3, #31
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	4b6b      	ldr	r3, [pc, #428]	; (80009e8 <keyboard_read+0x224>)
 800083c:	4a6b      	ldr	r2, [pc, #428]	; (80009ec <keyboard_read+0x228>)
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	f005 fbdb 	bl	8005ffc <sniprintf>
 8000846:	463b      	mov	r3, r7
 8000848:	4618      	mov	r0, r3
 800084a:	f000 ff75 	bl	8001738 <UART_Transmit>
 800084e:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000852:	e0bd      	b.n	80009d0 <keyboard_read+0x20c>
		;
		ks_state = 1;
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <keyboard_read+0x218>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e0b8      	b.n	80009d0 <keyboard_read+0x20c>
	case 1:
		buf[0] = 0;
 800085e:	4b60      	ldr	r3, [pc, #384]	; (80009e0 <keyboard_read+0x21c>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 8000864:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <keyboard_read+0x218>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf))
 800086a:	4a5d      	ldr	r2, [pc, #372]	; (80009e0 <keyboard_read+0x21c>)
 800086c:	2101      	movs	r1, #1
 800086e:	20e2      	movs	r0, #226	; 0xe2
 8000870:	f000 ff2c 	bl	80016cc <PCA9538_Write_Register>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 800087a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800087e:	2b00      	cmp	r3, #0
 8000880:	d014      	beq.n	80008ac <keyboard_read+0xe8>
 8000882:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000886:	4638      	mov	r0, r7
 8000888:	4a59      	ldr	r2, [pc, #356]	; (80009f0 <keyboard_read+0x22c>)
 800088a:	9202      	str	r2, [sp, #8]
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	2326      	movs	r3, #38	; 0x26
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <keyboard_read+0x224>)
 8000894:	4a55      	ldr	r2, [pc, #340]	; (80009ec <keyboard_read+0x228>)
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	f005 fbaf 	bl	8005ffc <sniprintf>
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 ff49 	bl	8001738 <UART_Transmit>
 80008a6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80008aa:	e091      	b.n	80009d0 <keyboard_read+0x20c>
		;
		ks_state = 2;
 80008ac:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <keyboard_read+0x218>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e08c      	b.n	80009d0 <keyboard_read+0x20c>
	case 2:
		buf[0] = ks_current_row;
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <keyboard_read+0x230>)
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <keyboard_read+0x21c>)
 80008bc:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <keyboard_read+0x218>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf))
 80008c4:	4a46      	ldr	r2, [pc, #280]	; (80009e0 <keyboard_read+0x21c>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	20e2      	movs	r0, #226	; 0xe2
 80008ca:	f000 feff 	bl	80016cc <PCA9538_Write_Register>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 80008d4:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d014      	beq.n	8000906 <keyboard_read+0x142>
 80008dc:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80008e0:	4638      	mov	r0, r7
 80008e2:	4a43      	ldr	r2, [pc, #268]	; (80009f0 <keyboard_read+0x22c>)
 80008e4:	9202      	str	r2, [sp, #8]
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	232d      	movs	r3, #45	; 0x2d
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <keyboard_read+0x224>)
 80008ee:	4a3f      	ldr	r2, [pc, #252]	; (80009ec <keyboard_read+0x228>)
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	f005 fb82 	bl	8005ffc <sniprintf>
 80008f8:	463b      	mov	r3, r7
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 ff1c 	bl	8001738 <UART_Transmit>
 8000900:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000904:	e064      	b.n	80009d0 <keyboard_read+0x20c>
		;
		ks_state = 3;
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <keyboard_read+0x218>)
 8000908:	2203      	movs	r2, #3
 800090a:	601a      	str	r2, [r3, #0]
		return HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	e05f      	b.n	80009d0 <keyboard_read+0x20c>
	case 3:
		buf[0] = 0;
 8000910:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <keyboard_read+0x21c>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
		ks_state = 0;
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <keyboard_read+0x218>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
		CHK_HAL(PCA9538_Read_Inputs(KBRD_RD_ADDR, buf))
 800091c:	4930      	ldr	r1, [pc, #192]	; (80009e0 <keyboard_read+0x21c>)
 800091e:	20e3      	movs	r0, #227	; 0xe3
 8000920:	f000 fef8 	bl	8001714 <PCA9538_Read_Inputs>
 8000924:	4603      	mov	r3, r0
 8000926:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 800092a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800092e:	2b00      	cmp	r3, #0
 8000930:	d014      	beq.n	800095c <keyboard_read+0x198>
 8000932:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8000936:	4638      	mov	r0, r7
 8000938:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <keyboard_read+0x234>)
 800093a:	9202      	str	r2, [sp, #8]
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	2334      	movs	r3, #52	; 0x34
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <keyboard_read+0x224>)
 8000944:	4a29      	ldr	r2, [pc, #164]	; (80009ec <keyboard_read+0x228>)
 8000946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094a:	f005 fb57 	bl	8005ffc <sniprintf>
 800094e:	463b      	mov	r3, r7
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fef1 	bl	8001738 <UART_Transmit>
 8000956:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800095a:	e039      	b.n	80009d0 <keyboard_read+0x20c>
		;
		ks_state = 4;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <keyboard_read+0x218>)
 800095e:	2204      	movs	r2, #4
 8000960:	601a      	str	r2, [r3, #0]
		break;
 8000962:	e034      	b.n	80009ce <keyboard_read+0x20a>
	case 4:
		ks_state = 0;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <keyboard_read+0x218>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
		kbd_in = buf[0] & 0x70;
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <keyboard_read+0x21c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000972:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		Nkey = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x10))
 800097c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000980:	f003 0310 	and.w	r3, r3, #16
 8000984:	2b00      	cmp	r3, #0
 8000986:	d105      	bne.n	8000994 <keyboard_read+0x1d0>
			Nkey |= 0x04;
 8000988:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x20))
 8000994:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	2b00      	cmp	r3, #0
 800099e:	d105      	bne.n	80009ac <keyboard_read+0x1e8>
			Nkey |= 0x02;
 80009a0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		if (!(kbd_in & 0x40))
 80009ac:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80009b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d105      	bne.n	80009c4 <keyboard_read+0x200>
			Nkey |= 0x01;
 80009b8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		ks_result = Nkey;
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <keyboard_read+0x238>)
 80009c6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80009ca:	7013      	strb	r3, [r2, #0]
		break;
 80009cc:	bf00      	nop
	}
	return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000f8 	.word	0x200000f8
 80009e0:	20000100 	.word	0x20000100
 80009e4:	08006910 	.word	0x08006910
 80009e8:	080068d8 	.word	0x080068d8
 80009ec:	080068ec 	.word	0x080068ec
 80009f0:	08006944 	.word	0x08006944
 80009f4:	200000fd 	.word	0x200000fd
 80009f8:	0800697c 	.word	0x0800697c
 80009fc:	200000fc 	.word	0x200000fc

08000a00 <init_buffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init_buffer() {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < FIFO_BUFFER_SIZE; ++i)
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	e007      	b.n	8000a1c <init_buffer+0x1c>
		event_buf[i] = 0;
 8000a0c:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <init_buffer+0x30>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < FIFO_BUFFER_SIZE; ++i)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b1f      	cmp	r3, #31
 8000a20:	d9f4      	bls.n	8000a0c <init_buffer+0xc>
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	2000018c 	.word	0x2000018c

08000a34 <append_buffer>:

void append_buffer(uint8_t num) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	event_buf[write_ptr] = num;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <append_buffer+0x30>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4909      	ldr	r1, [pc, #36]	; (8000a68 <append_buffer+0x34>)
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	54ca      	strb	r2, [r1, r3]
	write_ptr = (write_ptr + 1) % FIFO_BUFFER_SIZE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <append_buffer+0x30>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	f003 031f 	and.w	r3, r3, #31
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <append_buffer+0x30>)
 8000a54:	6013      	str	r3, [r2, #0]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000104 	.word	0x20000104
 8000a68:	2000018c 	.word	0x2000018c

08000a6c <read_buffer>:

int read_buffer() {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
	if (read_ptr == write_ptr) {
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <read_buffer+0x40>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <read_buffer+0x44>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d102      	bne.n	8000a84 <read_buffer+0x18>
		return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a82:	e00c      	b.n	8000a9e <read_buffer+0x32>
	}
	uint8_t num = event_buf[read_ptr];
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <read_buffer+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <read_buffer+0x48>)
 8000a8a:	5cd3      	ldrb	r3, [r2, r3]
 8000a8c:	71fb      	strb	r3, [r7, #7]
	read_ptr = (read_ptr + 1) % FIFO_BUFFER_SIZE;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <read_buffer+0x40>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	f003 031f 	and.w	r3, r3, #31
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <read_buffer+0x40>)
 8000a9a:	6013      	str	r3, [r2, #0]
	return num;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000108 	.word	0x20000108
 8000ab0:	20000104 	.word	0x20000104
 8000ab4:	2000018c 	.word	0x2000018c

08000ab8 <KB_Test>:

void KB_Test(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	static uint8_t const rows[4] = { 0xF7, 0x7B, 0x3D, 0x1E };
	static int current_row = 0;
	static int row_result[4] = { 0, 0, 0, 0 };

	if (ks_state == 0) {
 8000abe:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <KB_Test+0xd0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d15b      	bne.n	8000b7e <KB_Test+0xc6>
		if (row_result[current_row] != ks_result) {
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <KB_Test+0xd4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <KB_Test+0xd8>)
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	4a30      	ldr	r2, [pc, #192]	; (8000b94 <KB_Test+0xdc>)
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d036      	beq.n	8000b46 <KB_Test+0x8e>
			uint8_t keyNum = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71fb      	strb	r3, [r7, #7]
			if (ks_result & 1) {
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <KB_Test+0xdc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <KB_Test+0x48>
				append_buffer(3 * current_row + 1);
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <KB_Test+0xd4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff9a 	bl	8000a34 <append_buffer>
			}
			if (ks_result & 2) {
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <KB_Test+0xdc>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00b      	beq.n	8000b24 <KB_Test+0x6c>
				append_buffer(3 * current_row + 2);
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <KB_Test+0xd4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	0052      	lsls	r2, r2, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff88 	bl	8000a34 <append_buffer>
			}
			if (ks_result & 4) {
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <KB_Test+0xdc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00a      	beq.n	8000b46 <KB_Test+0x8e>
				append_buffer(3 * current_row + 3);
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <KB_Test+0xd4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	0052      	lsls	r2, r2, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff77 	bl	8000a34 <append_buffer>
			}
		}

		row_result[current_row] = ks_result;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <KB_Test+0xdc>)
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <KB_Test+0xd4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <KB_Test+0xd8>)
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		current_row = (current_row + 1) % 4;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <KB_Test+0xd4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	425a      	negs	r2, r3
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	f002 0203 	and.w	r2, r2, #3
 8000b66:	bf58      	it	pl
 8000b68:	4253      	negpl	r3, r2
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <KB_Test+0xd4>)
 8000b6c:	6013      	str	r3, [r2, #0]
		ks_current_row = rows[current_row];
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <KB_Test+0xd4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <KB_Test+0xe0>)
 8000b74:	5cd2      	ldrb	r2, [r2, r3]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <KB_Test+0xe4>)
 8000b78:	701a      	strb	r2, [r3, #0]
		keyboard_read();
 8000b7a:	f7ff fe23 	bl	80007c4 <keyboard_read>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000f8 	.word	0x200000f8
 8000b8c:	20000114 	.word	0x20000114
 8000b90:	20000118 	.word	0x20000118
 8000b94:	200000fc 	.word	0x200000fc
 8000b98:	08006b14 	.word	0x08006b14
 8000b9c:	200000fd 	.word	0x200000fd

08000ba0 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1 && ks_state) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_I2C_MemTxCpltCallback+0x24>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d105      	bne.n	8000bbc <HAL_I2C_MemTxCpltCallback+0x1c>
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_I2C_MemTxCpltCallback+0x28>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_I2C_MemTxCpltCallback+0x1c>
		keyboard_read();
 8000bb8:	f7ff fe04 	bl	80007c4 <keyboard_read>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000138 	.word	0x20000138
 8000bc8:	200000f8 	.word	0x200000f8

08000bcc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1 && ks_state) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_I2C_MemRxCpltCallback+0x24>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d105      	bne.n	8000be8 <HAL_I2C_MemRxCpltCallback+0x1c>
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_I2C_MemRxCpltCallback+0x1c>
		keyboard_read();
 8000be4:	f7ff fdee 	bl	80007c4 <keyboard_read>
	}
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000138 	.word	0x20000138
 8000bf4:	200000f8 	.word	0x200000f8

08000bf8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x16>
		KB_Test();
 8000c0a:	f7ff ff55 	bl	8000ab8 <KB_Test>
	}
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40001000 	.word	0x40001000

08000c1c <is_button_pressed>:

uint8_t is_button_pressed()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  static uint8_t bounce_counter = 0;
  static uint8_t btn_pressed = 0;

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8000c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c24:	481c      	ldr	r0, [pc, #112]	; (8000c98 <is_button_pressed+0x7c>)
 8000c26:	f001 fbff 	bl	8002428 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10c      	bne.n	8000c4a <is_button_pressed+0x2e>
    if (bounce_counter <= BOUNCE_LIMIT)
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <is_button_pressed+0x80>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <is_button_pressed+0x84>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d810      	bhi.n	8000c5e <is_button_pressed+0x42>
      bounce_counter++;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <is_button_pressed+0x80>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <is_button_pressed+0x80>)
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e009      	b.n	8000c5e <is_button_pressed+0x42>
  } else {
    if (bounce_counter > 0)
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <is_button_pressed+0x80>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <is_button_pressed+0x42>
      bounce_counter--;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <is_button_pressed+0x80>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <is_button_pressed+0x80>)
 8000c5c:	701a      	strb	r2, [r3, #0]
  }

  if (!btn_pressed && bounce_counter >= BOUNCE_LIMIT){
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <is_button_pressed+0x88>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <is_button_pressed+0x5e>
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <is_button_pressed+0x80>)
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <is_button_pressed+0x84>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d303      	bcc.n	8000c7a <is_button_pressed+0x5e>
    btn_pressed = 1;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <is_button_pressed+0x88>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e00a      	b.n	8000c90 <is_button_pressed+0x74>
  }

  else if (btn_pressed && bounce_counter == 0)
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <is_button_pressed+0x88>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <is_button_pressed+0x74>
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <is_button_pressed+0x80>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <is_button_pressed+0x74>
    btn_pressed = 0;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <is_button_pressed+0x88>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]

  return btn_pressed;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <is_button_pressed+0x88>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	20000128 	.word	0x20000128
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000129 	.word	0x20000129

08000ca8 <play_sound>:

void play_sound(uint16_t sound) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
	Buzzer_Set_Volume(BUZZER_VOLUME_MAX);
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f7ff fc86 	bl	80005c4 <Buzzer_Set_Volume>
	Buzzer_Set_Freq(sound);
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fc6a 	bl	8000594 <Buzzer_Set_Freq>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <init_LED>:
    red,
    green,
    yellow
} COLOR;

void init_LED(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_2);
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <init_LED+0x28>)
 8000cd0:	f004 f83c 	bl	8004d4c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_3);
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <init_LED+0x28>)
 8000cd8:	f004 f838 	bl	8004d4c <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 8000cdc:	210c      	movs	r1, #12
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <init_LED+0x28>)
 8000ce0:	f004 f834 	bl	8004d4c <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Init(&htim4);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <init_LED+0x28>)
 8000ce6:	f004 f8f9 	bl	8004edc <HAL_TIM_PWM_Init>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200002ac 	.word	0x200002ac

08000cf4 <light_off>:

void light_off() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	htim4.Instance->CCR2 = 0;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <light_off+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <light_off+0x28>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2200      	movs	r2, #0
 8000d06:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <light_off+0x28>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200002ac 	.word	0x200002ac

08000d20 <light_LED>:

void light_LED(COLOR color, uint16_t brightness) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80bb      	strh	r3, [r7, #4]
	light_off();
 8000d30:	f7ff ffe0 	bl	8000cf4 <light_off>
	switch (color) {
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d010      	beq.n	8000d5c <light_LED+0x3c>
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	dc13      	bgt.n	8000d66 <light_LED+0x46>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <light_LED+0x28>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <light_LED+0x32>
	            break;
	        case yellow:
	        	htim4.Instance->CCR3 = brightness;
	            break;
	    }
};
 8000d46:	e00e      	b.n	8000d66 <light_LED+0x46>
	        	htim4.Instance->CCR4 = brightness;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <light_LED+0x50>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	88ba      	ldrh	r2, [r7, #4]
 8000d4e:	641a      	str	r2, [r3, #64]	; 0x40
	            break;
 8000d50:	e009      	b.n	8000d66 <light_LED+0x46>
	        	htim4.Instance->CCR2 = brightness;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <light_LED+0x50>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
	            break;
 8000d5a:	e004      	b.n	8000d66 <light_LED+0x46>
	        	htim4.Instance->CCR3 = brightness;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <light_LED+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	88ba      	ldrh	r2, [r7, #4]
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c
	            break;
 8000d64:	bf00      	nop
};
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002ac 	.word	0x200002ac

08000d74 <select_next_playback_mode>:
    uint8_t current_step;
    uint8_t sequence_length;
    uint32_t prev_loop_time;
};

void select_next_playback_mode(struct State* state) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    state->playback_mode = (state->playback_mode + 1) % 3;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	785b      	ldrb	r3, [r3, #1]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <select_next_playback_mode+0x68>)
 8000d84:	fb83 3102 	smull	r3, r1, r3, r2
 8000d88:	17d3      	asrs	r3, r2, #31
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	440b      	add	r3, r1
 8000d92:	1ad1      	subs	r1, r2, r3
 8000d94:	b2ca      	uxtb	r2, r1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	705a      	strb	r2, [r3, #1]
    switch (state->playback_mode) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d011      	beq.n	8000dc6 <select_next_playback_mode+0x52>
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	dc15      	bgt.n	8000dd2 <select_next_playback_mode+0x5e>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <select_next_playback_mode+0x46>
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d111      	bne.n	8000dd2 <select_next_playback_mode+0x5e>
        case leds:
            UART_Transmit(GAME_PLAYBACK_LEDS_MSG);
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <select_next_playback_mode+0x6c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fcc0 	bl	8001738 <UART_Transmit>
            break;
 8000db8:	e00b      	b.n	8000dd2 <select_next_playback_mode+0x5e>
        case sound:
            UART_Transmit(GAME_PLAYBACK_SOUND_MSG);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <select_next_playback_mode+0x70>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fcba 	bl	8001738 <UART_Transmit>
            break;
 8000dc4:	e005      	b.n	8000dd2 <select_next_playback_mode+0x5e>
        case leds_sound:
            UART_Transmit(GAME_PLAYBACK_LEDS_SOUND_MSG);
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <select_next_playback_mode+0x74>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fcb4 	bl	8001738 <UART_Transmit>
            break;
 8000dd0:	bf00      	nop
    }
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	55555556 	.word	0x55555556
 8000de0:	20000018 	.word	0x20000018
 8000de4:	2000001c 	.word	0x2000001c
 8000de8:	20000020 	.word	0x20000020

08000dec <select_next_game_speed>:

void select_next_game_speed(struct State* state) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    state->game_speed = (state->game_speed + 1) % 3;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	789b      	ldrb	r3, [r3, #2]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <select_next_game_speed+0x80>)
 8000dfc:	fb83 3102 	smull	r3, r1, r3, r2
 8000e00:	17d3      	asrs	r3, r2, #31
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	460b      	mov	r3, r1
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	440b      	add	r3, r1
 8000e0a:	1ad1      	subs	r1, r2, r3
 8000e0c:	b2ca      	uxtb	r2, r1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	709a      	strb	r2, [r3, #2]
    switch (state->game_speed) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	789b      	ldrb	r3, [r3, #2]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d01a      	beq.n	8000e50 <select_next_game_speed+0x64>
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	dc22      	bgt.n	8000e64 <select_next_game_speed+0x78>
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <select_next_game_speed+0x3c>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d00a      	beq.n	8000e3c <select_next_game_speed+0x50>
        case fast:
            state->speed_duration = 400;
            UART_Transmit(GAME_SPEED_FAST_MSG);
            break;
    }
}
 8000e26:	e01d      	b.n	8000e64 <select_next_game_speed+0x78>
            state->speed_duration = 1600;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000e2e:	605a      	str	r2, [r3, #4]
            UART_Transmit(GAME_SPEED_SLOW_MSG);
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <select_next_game_speed+0x84>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fc7f 	bl	8001738 <UART_Transmit>
            break;
 8000e3a:	e013      	b.n	8000e64 <select_next_game_speed+0x78>
            state->speed_duration = 800;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000e42:	605a      	str	r2, [r3, #4]
            UART_Transmit(GAME_SPEED_MEDIUM_MSG);
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <select_next_game_speed+0x88>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fc75 	bl	8001738 <UART_Transmit>
            break;
 8000e4e:	e009      	b.n	8000e64 <select_next_game_speed+0x78>
            state->speed_duration = 400;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e56:	605a      	str	r2, [r3, #4]
            UART_Transmit(GAME_SPEED_FAST_MSG);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <select_next_game_speed+0x8c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fc6b 	bl	8001738 <UART_Transmit>
            break;
 8000e62:	bf00      	nop
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	55555556 	.word	0x55555556
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	20000010 	.word	0x20000010
 8000e78:	20000014 	.word	0x20000014

08000e7c <print_results>:

void print_results(struct State* state) {
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b096      	sub	sp, #88	; 0x58
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	6078      	str	r0, [r7, #4]
	int points = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (int i = 0; i < state->sequence_length; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e8c:	e02e      	b.n	8000eec <print_results+0x70>
        char msg[32];
        sprintf(&msg, "%d. Pressed %d (%d)\r\n", i+1, state->game_trace[i].code, state->game_trace[i].is_correct);
 8000e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e90:	1c5c      	adds	r4, r3, #1
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	33a8      	adds	r3, #168	; 0xa8
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	33a9      	adds	r3, #169	; 0xa9
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f107 0008 	add.w	r0, r7, #8
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	462b      	mov	r3, r5
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	4917      	ldr	r1, [pc, #92]	; (8000f1c <print_results+0xa0>)
 8000ec0:	f005 f8d0 	bl	8006064 <siprintf>
        UART_Transmit((const char*) &msg);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fc35 	bl	8001738 <UART_Transmit>
        points += state->game_trace[i].is_correct;
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	33a9      	adds	r3, #169	; 0xa9
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ee2:	4413      	add	r3, r2
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (int i = 0; i < state->sequence_length; i++) {
 8000ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ee8:	3301      	adds	r3, #1
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	dbc9      	blt.n	8000e8e <print_results+0x12>
    }
    char msg[32];
    sprintf(&msg, "Earned points: %d\r\n", points);
 8000efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <print_results+0xa4>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 f8ae 	bl	8006064 <siprintf>
    UART_Transmit((const char*) &msg);
 8000f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fc13 	bl	8001738 <UART_Transmit>
}
 8000f12:	bf00      	nop
 8000f14:	3750      	adds	r7, #80	; 0x50
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08006a98 	.word	0x08006a98
 8000f20:	08006ab0 	.word	0x08006ab0

08000f24 <init_game_state>:

void init_game_state(struct State* state){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
		loop_confirmed = 0;
 8000f2c:	4b99      	ldr	r3, [pc, #612]	; (8001194 <init_game_state+0x270>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
		state->prev_loop_time = HAL_GetTick();
 8000f32:	f000 ff8f 	bl	8001e54 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	    state->game_sequence[0] = impulse_1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a95      	ldr	r2, [pc, #596]	; (8001198 <init_game_state+0x274>)
 8000f42:	3308      	adds	r3, #8
 8000f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f48:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[1] = impulse_2;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a93      	ldr	r2, [pc, #588]	; (800119c <init_game_state+0x278>)
 8000f50:	3310      	adds	r3, #16
 8000f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f56:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[2] = impulse_3;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <init_game_state+0x27c>)
 8000f5e:	3318      	adds	r3, #24
 8000f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f64:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[3] = impulse_4;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a8e      	ldr	r2, [pc, #568]	; (80011a4 <init_game_state+0x280>)
 8000f6c:	3320      	adds	r3, #32
 8000f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f72:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[4] = impulse_5;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a8b      	ldr	r2, [pc, #556]	; (80011a8 <init_game_state+0x284>)
 8000f7a:	3328      	adds	r3, #40	; 0x28
 8000f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f80:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[5] = impulse_6;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a89      	ldr	r2, [pc, #548]	; (80011ac <init_game_state+0x288>)
 8000f88:	3330      	adds	r3, #48	; 0x30
 8000f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f8e:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[6] = impulse_7;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a86      	ldr	r2, [pc, #536]	; (80011b0 <init_game_state+0x28c>)
 8000f96:	3338      	adds	r3, #56	; 0x38
 8000f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9c:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[7] = impulse_8;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a84      	ldr	r2, [pc, #528]	; (80011b4 <init_game_state+0x290>)
 8000fa4:	3340      	adds	r3, #64	; 0x40
 8000fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000faa:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[8] = impulse_9;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a81      	ldr	r2, [pc, #516]	; (80011b8 <init_game_state+0x294>)
 8000fb2:	3348      	adds	r3, #72	; 0x48
 8000fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb8:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[9] = impulse_1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a76      	ldr	r2, [pc, #472]	; (8001198 <init_game_state+0x274>)
 8000fc0:	3350      	adds	r3, #80	; 0x50
 8000fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc6:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[10] = impulse_2;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a73      	ldr	r2, [pc, #460]	; (800119c <init_game_state+0x278>)
 8000fce:	3358      	adds	r3, #88	; 0x58
 8000fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd4:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[11] = impulse_3;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a71      	ldr	r2, [pc, #452]	; (80011a0 <init_game_state+0x27c>)
 8000fdc:	3360      	adds	r3, #96	; 0x60
 8000fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe2:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[12] = impulse_4;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a6e      	ldr	r2, [pc, #440]	; (80011a4 <init_game_state+0x280>)
 8000fea:	3368      	adds	r3, #104	; 0x68
 8000fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff0:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[13] = impulse_5;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a6c      	ldr	r2, [pc, #432]	; (80011a8 <init_game_state+0x284>)
 8000ff8:	3370      	adds	r3, #112	; 0x70
 8000ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffe:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[14] = impulse_6;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a69      	ldr	r2, [pc, #420]	; (80011ac <init_game_state+0x288>)
 8001006:	3378      	adds	r3, #120	; 0x78
 8001008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100c:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[15] = impulse_7;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a67      	ldr	r2, [pc, #412]	; (80011b0 <init_game_state+0x28c>)
 8001014:	3380      	adds	r3, #128	; 0x80
 8001016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101a:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[16] = impulse_8;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a64      	ldr	r2, [pc, #400]	; (80011b4 <init_game_state+0x290>)
 8001022:	3388      	adds	r3, #136	; 0x88
 8001024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001028:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[17] = impulse_9;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a62      	ldr	r2, [pc, #392]	; (80011b8 <init_game_state+0x294>)
 8001030:	3390      	adds	r3, #144	; 0x90
 8001032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001036:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[18] = impulse_1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a56      	ldr	r2, [pc, #344]	; (8001198 <init_game_state+0x274>)
 800103e:	3398      	adds	r3, #152	; 0x98
 8001040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001044:	e883 0003 	stmia.w	r3, {r0, r1}
	    state->game_sequence[19] = impulse_2;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a54      	ldr	r2, [pc, #336]	; (800119c <init_game_state+0x278>)
 800104c:	33a0      	adds	r3, #160	; 0xa0
 800104e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001052:	e883 0003 	stmia.w	r3, {r0, r1}

	    state->game_trace[0] =  default_trace;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a58      	ldr	r2, [pc, #352]	; (80011bc <init_game_state+0x298>)
 800105a:	33a8      	adds	r3, #168	; 0xa8
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	4611      	mov	r1, r2
 8001060:	8019      	strh	r1, [r3, #0]
 8001062:	3302      	adds	r3, #2
 8001064:	0c12      	lsrs	r2, r2, #16
 8001066:	701a      	strb	r2, [r3, #0]
	    state->game_trace[1] =  default_trace;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a54      	ldr	r2, [pc, #336]	; (80011bc <init_game_state+0x298>)
 800106c:	33ab      	adds	r3, #171	; 0xab
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	7892      	ldrb	r2, [r2, #2]
 8001072:	8019      	strh	r1, [r3, #0]
 8001074:	709a      	strb	r2, [r3, #2]
	    state->game_trace[2] =  default_trace;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a50      	ldr	r2, [pc, #320]	; (80011bc <init_game_state+0x298>)
 800107a:	33ae      	adds	r3, #174	; 0xae
 800107c:	8811      	ldrh	r1, [r2, #0]
 800107e:	7892      	ldrb	r2, [r2, #2]
 8001080:	8019      	strh	r1, [r3, #0]
 8001082:	709a      	strb	r2, [r3, #2]
	    state->game_trace[3] =  default_trace;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <init_game_state+0x298>)
 8001088:	33b1      	adds	r3, #177	; 0xb1
 800108a:	8811      	ldrh	r1, [r2, #0]
 800108c:	7892      	ldrb	r2, [r2, #2]
 800108e:	8019      	strh	r1, [r3, #0]
 8001090:	709a      	strb	r2, [r3, #2]
	    state->game_trace[4] =  default_trace;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <init_game_state+0x298>)
 8001096:	33b4      	adds	r3, #180	; 0xb4
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	8019      	strh	r1, [r3, #0]
 800109e:	3302      	adds	r3, #2
 80010a0:	0c12      	lsrs	r2, r2, #16
 80010a2:	701a      	strb	r2, [r3, #0]
	    state->game_trace[5] =  default_trace;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a45      	ldr	r2, [pc, #276]	; (80011bc <init_game_state+0x298>)
 80010a8:	33b7      	adds	r3, #183	; 0xb7
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	7892      	ldrb	r2, [r2, #2]
 80010ae:	8019      	strh	r1, [r3, #0]
 80010b0:	709a      	strb	r2, [r3, #2]
	    state->game_trace[6] =  default_trace;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a41      	ldr	r2, [pc, #260]	; (80011bc <init_game_state+0x298>)
 80010b6:	33ba      	adds	r3, #186	; 0xba
 80010b8:	8811      	ldrh	r1, [r2, #0]
 80010ba:	7892      	ldrb	r2, [r2, #2]
 80010bc:	8019      	strh	r1, [r3, #0]
 80010be:	709a      	strb	r2, [r3, #2]
	    state->game_trace[7] =  default_trace;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a3e      	ldr	r2, [pc, #248]	; (80011bc <init_game_state+0x298>)
 80010c4:	33bd      	adds	r3, #189	; 0xbd
 80010c6:	8811      	ldrh	r1, [r2, #0]
 80010c8:	7892      	ldrb	r2, [r2, #2]
 80010ca:	8019      	strh	r1, [r3, #0]
 80010cc:	709a      	strb	r2, [r3, #2]
	    state->game_trace[8] =  default_trace;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <init_game_state+0x298>)
 80010d2:	33c0      	adds	r3, #192	; 0xc0
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	8019      	strh	r1, [r3, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	0c12      	lsrs	r2, r2, #16
 80010de:	701a      	strb	r2, [r3, #0]
	    state->game_trace[9] =  default_trace;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a36      	ldr	r2, [pc, #216]	; (80011bc <init_game_state+0x298>)
 80010e4:	33c3      	adds	r3, #195	; 0xc3
 80010e6:	8811      	ldrh	r1, [r2, #0]
 80010e8:	7892      	ldrb	r2, [r2, #2]
 80010ea:	8019      	strh	r1, [r3, #0]
 80010ec:	709a      	strb	r2, [r3, #2]
	    state->game_trace[10] = default_trace;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a32      	ldr	r2, [pc, #200]	; (80011bc <init_game_state+0x298>)
 80010f2:	33c6      	adds	r3, #198	; 0xc6
 80010f4:	8811      	ldrh	r1, [r2, #0]
 80010f6:	7892      	ldrb	r2, [r2, #2]
 80010f8:	8019      	strh	r1, [r3, #0]
 80010fa:	709a      	strb	r2, [r3, #2]
	    state->game_trace[11] = default_trace;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <init_game_state+0x298>)
 8001100:	33c9      	adds	r3, #201	; 0xc9
 8001102:	8811      	ldrh	r1, [r2, #0]
 8001104:	7892      	ldrb	r2, [r2, #2]
 8001106:	8019      	strh	r1, [r3, #0]
 8001108:	709a      	strb	r2, [r3, #2]
	    state->game_trace[12] = default_trace;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <init_game_state+0x298>)
 800110e:	33cc      	adds	r3, #204	; 0xcc
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	4611      	mov	r1, r2
 8001114:	8019      	strh	r1, [r3, #0]
 8001116:	3302      	adds	r3, #2
 8001118:	0c12      	lsrs	r2, r2, #16
 800111a:	701a      	strb	r2, [r3, #0]
	    state->game_trace[13] = default_trace;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <init_game_state+0x298>)
 8001120:	33cf      	adds	r3, #207	; 0xcf
 8001122:	8811      	ldrh	r1, [r2, #0]
 8001124:	7892      	ldrb	r2, [r2, #2]
 8001126:	8019      	strh	r1, [r3, #0]
 8001128:	709a      	strb	r2, [r3, #2]
	    state->game_trace[14] = default_trace;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a23      	ldr	r2, [pc, #140]	; (80011bc <init_game_state+0x298>)
 800112e:	33d2      	adds	r3, #210	; 0xd2
 8001130:	8811      	ldrh	r1, [r2, #0]
 8001132:	7892      	ldrb	r2, [r2, #2]
 8001134:	8019      	strh	r1, [r3, #0]
 8001136:	709a      	strb	r2, [r3, #2]
	    state->game_trace[15] = default_trace;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a20      	ldr	r2, [pc, #128]	; (80011bc <init_game_state+0x298>)
 800113c:	33d5      	adds	r3, #213	; 0xd5
 800113e:	8811      	ldrh	r1, [r2, #0]
 8001140:	7892      	ldrb	r2, [r2, #2]
 8001142:	8019      	strh	r1, [r3, #0]
 8001144:	709a      	strb	r2, [r3, #2]
	    state->game_trace[16] = default_trace;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <init_game_state+0x298>)
 800114a:	33d8      	adds	r3, #216	; 0xd8
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	4611      	mov	r1, r2
 8001150:	8019      	strh	r1, [r3, #0]
 8001152:	3302      	adds	r3, #2
 8001154:	0c12      	lsrs	r2, r2, #16
 8001156:	701a      	strb	r2, [r3, #0]
	    state->game_trace[17] = default_trace;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <init_game_state+0x298>)
 800115c:	33db      	adds	r3, #219	; 0xdb
 800115e:	8811      	ldrh	r1, [r2, #0]
 8001160:	7892      	ldrb	r2, [r2, #2]
 8001162:	8019      	strh	r1, [r3, #0]
 8001164:	709a      	strb	r2, [r3, #2]
	    state->game_trace[18] = default_trace;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <init_game_state+0x298>)
 800116a:	33de      	adds	r3, #222	; 0xde
 800116c:	8811      	ldrh	r1, [r2, #0]
 800116e:	7892      	ldrb	r2, [r2, #2]
 8001170:	8019      	strh	r1, [r3, #0]
 8001172:	709a      	strb	r2, [r3, #2]
	    state->game_trace[19] = default_trace;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <init_game_state+0x298>)
 8001178:	33e1      	adds	r3, #225	; 0xe1
 800117a:	8811      	ldrh	r1, [r2, #0]
 800117c:	7892      	ldrb	r2, [r2, #2]
 800117e:	8019      	strh	r1, [r3, #0]
 8001180:	709a      	strb	r2, [r3, #2]
	    state->current_step = -1;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	22ff      	movs	r2, #255	; 0xff
 8001186:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000010c 	.word	0x2000010c
 8001198:	20000024 	.word	0x20000024
 800119c:	2000002c 	.word	0x2000002c
 80011a0:	20000034 	.word	0x20000034
 80011a4:	2000003c 	.word	0x2000003c
 80011a8:	20000044 	.word	0x20000044
 80011ac:	2000004c 	.word	0x2000004c
 80011b0:	20000054 	.word	0x20000054
 80011b4:	2000005c 	.word	0x2000005c
 80011b8:	20000064 	.word	0x20000064
 80011bc:	20000110 	.word	0x20000110

080011c0 <end_game>:

void end_game(struct State* state){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	state->is_started = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	light_off();
 80011ce:	f7ff fd91 	bl	8000cf4 <light_off>
	Buzzer_Set_Volume(BUZZER_VOLUME_MUTE);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff f9f6 	bl	80005c4 <Buzzer_Set_Volume>
	print_results(state);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fe4f 	bl	8000e7c <print_results>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <switch_game_mode>:

void switch_game_mode(struct State* state) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    state->is_started = !state->is_started;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	701a      	strb	r2, [r3, #0]
    if (state->is_started) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <switch_game_mode+0x36>
        init_game_state(state);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fe89 	bl	8000f24 <init_game_state>
        UART_Transmit(GAME_STARTED_MSG);
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <switch_game_mode+0x50>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fa8e 	bl	8001738 <UART_Transmit>
    } else {
    	end_game(state);
        UART_Transmit(GAME_STOPPED_MSG);
    }
}
 800121c:	e007      	b.n	800122e <switch_game_mode+0x46>
    	end_game(state);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffce 	bl	80011c0 <end_game>
        UART_Transmit(GAME_STOPPED_MSG);
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <switch_game_mode+0x54>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fa85 	bl	8001738 <UART_Transmit>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000004 	.word	0x20000004
 800123c:	20000008 	.word	0x20000008

08001240 <handle_game_key>:

void handle_game_key(struct State* state, uint8_t key) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	snprintf(print_buf, sizeof(print_buf), "Pressed key = %d\r\n", key);
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <handle_game_key+0x7c>)
 8001250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001254:	481a      	ldr	r0, [pc, #104]	; (80012c0 <handle_game_key+0x80>)
 8001256:	f004 fed1 	bl	8005ffc <sniprintf>
	UART_Transmit((uint8_t*) print_buf);
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <handle_game_key+0x80>)
 800125c:	f000 fa6c 	bl	8001738 <UART_Transmit>
    struct Impulse impulse = state->game_sequence[state->current_step];
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	3301      	adds	r3, #1
 800126a:	f107 020c 	add.w	r2, r7, #12
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001276:	e882 0003 	stmia.w	r2, {r0, r1}
    struct Trace *trace = &state->game_trace[state->current_step];
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001280:	461a      	mov	r2, r3
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	33a8      	adds	r3, #168	; 0xa8
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
    if (!trace->is_registered) {
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10d      	bne.n	80012b4 <handle_game_key+0x74>
        trace->code = key;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	701a      	strb	r2, [r3, #0]
        trace->is_correct = impulse.code == trace->code;
 800129e:	7cba      	ldrb	r2, [r7, #18]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	705a      	strb	r2, [r3, #1]
    }
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08006ac4 	.word	0x08006ac4
 80012c0:	200001ac 	.word	0x200001ac

080012c4 <print_key_description>:

void print_key_description(uint8_t key) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	snprintf(print_buf, sizeof(print_buf), "Pressed key = %d\r\n", key);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <print_key_description+0x28>)
 80012d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <print_key_description+0x2c>)
 80012d8:	f004 fe90 	bl	8005ffc <sniprintf>
	UART_Transmit((uint8_t*) print_buf);
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <print_key_description+0x2c>)
 80012de:	f000 fa2b 	bl	8001738 <UART_Transmit>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08006ac4 	.word	0x08006ac4
 80012f0:	200001ac 	.word	0x200001ac

080012f4 <handle_program_key>:

void handle_program_key(struct State* state, uint8_t key) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
    if (state->is_started) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <handle_program_key+0x20>
        handle_game_key(state, key);
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff97 	bl	8001240 <handle_game_key>
    } else {
        print_key_description(key);
    }
}
 8001312:	e003      	b.n	800131c <handle_program_key+0x28>
        print_key_description(key);
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ffd4 	bl	80012c4 <print_key_description>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <confirm_loop_sync>:

void confirm_loop_sync(struct State* state) {
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    if (state->prev_loop_time + state->speed_duration < HAL_GetTick()) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	18d4      	adds	r4, r2, r3
 8001338:	f000 fd8c 	bl	8001e54 <HAL_GetTick>
 800133c:	4603      	mov	r3, r0
 800133e:	429c      	cmp	r4, r3
 8001340:	d208      	bcs.n	8001354 <confirm_loop_sync+0x30>
        loop_confirmed = 1;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <confirm_loop_sync+0x38>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
        state->prev_loop_time = HAL_GetTick();
 8001348:	f000 fd84 	bl	8001e54 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    }
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	2000010c 	.word	0x2000010c

08001360 <game_loop>:

void game_loop(struct State* state) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	confirm_loop_sync(state);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffdb 	bl	8001324 <confirm_loop_sync>
    if (!state->is_started || !loop_confirmed)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d048      	beq.n	8001408 <game_loop+0xa8>
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <game_loop+0xb0>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d044      	beq.n	8001408 <game_loop+0xa8>
        return;
    state->current_step++;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8001384:	3301      	adds	r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    if (state->current_step < state->sequence_length) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 800139a:	429a      	cmp	r2, r3
 800139c:	d22d      	bcs.n	80013fa <game_loop+0x9a>
        struct Impulse impulse = state->game_sequence[state->current_step];
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	f107 0208 	add.w	r2, r7, #8
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013b4:	e882 0003 	stmia.w	r2, {r0, r1}
        switch (state->playback_mode) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d011      	beq.n	80013e4 <game_loop+0x84>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	dc1d      	bgt.n	8001400 <game_loop+0xa0>
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <game_loop+0x7a>
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d119      	bne.n	8001400 <game_loop+0xa0>
            case leds:
                light_LED(impulse.color, impulse.brightness);
 80013cc:	7a3b      	ldrb	r3, [r7, #8]
 80013ce:	897a      	ldrh	r2, [r7, #10]
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fca4 	bl	8000d20 <light_LED>
                break;
 80013d8:	e012      	b.n	8001400 <game_loop+0xa0>
            case sound:
                play_sound(impulse.sound);
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fc63 	bl	8000ca8 <play_sound>
                break;
 80013e2:	e00d      	b.n	8001400 <game_loop+0xa0>
            case leds_sound:
                play_sound(impulse.sound);
 80013e4:	89bb      	ldrh	r3, [r7, #12]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc5e 	bl	8000ca8 <play_sound>
                light_LED(impulse.color, impulse.brightness);
 80013ec:	7a3b      	ldrb	r3, [r7, #8]
 80013ee:	897a      	ldrh	r2, [r7, #10]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fc94 	bl	8000d20 <light_LED>
                break;
 80013f8:	e002      	b.n	8001400 <game_loop+0xa0>
        }
    } else {
        end_game(state);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fee0 	bl	80011c0 <end_game>
    }
    loop_confirmed = 0;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <game_loop+0xb0>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e000      	b.n	800140a <game_loop+0xaa>
        return;
 8001408:	bf00      	nop
}
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000010c 	.word	0x2000010c

08001414 <init_state>:


void init_state(struct State* state) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    state->is_started = 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    state->playback_mode = leds_sound;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2202      	movs	r2, #2
 8001426:	705a      	strb	r2, [r3, #1]
    state->game_speed = medium;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	709a      	strb	r2, [r3, #2]
    state->speed_duration = 1000;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001434:	605a      	str	r2, [r3, #4]
    state->sequence_length = 20;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2214      	movs	r2, #20
 800143a:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    init_game_state(state);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fd70 	bl	8000f24 <init_game_state>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <handle_command>:

void handle_command(struct State* state, uint8_t code) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
    switch (code) {
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d006      	beq.n	800146c <handle_command+0x20>
 800145e:	2b0c      	cmp	r3, #12
 8001460:	dc10      	bgt.n	8001484 <handle_command+0x38>
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d00a      	beq.n	800147c <handle_command+0x30>
 8001466:	2b0b      	cmp	r3, #11
 8001468:	d004      	beq.n	8001474 <handle_command+0x28>
 800146a:	e00b      	b.n	8001484 <handle_command+0x38>
        case 12:
            switch_game_mode(state);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff febb 	bl	80011e8 <switch_game_mode>
            break;
 8001472:	e00d      	b.n	8001490 <handle_command+0x44>
        case 11:
            select_next_playback_mode(state);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fc7d 	bl	8000d74 <select_next_playback_mode>
            break;
 800147a:	e009      	b.n	8001490 <handle_command+0x44>
        case 10:
            select_next_game_speed(state);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fcb5 	bl	8000dec <select_next_game_speed>
            break;
 8001482:	e005      	b.n	8001490 <handle_command+0x44>
        case -1:
        	return;
        default:
            handle_program_key(state, code);
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	4619      	mov	r1, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff33 	bl	80012f4 <handle_program_key>
            break;
 800148e:	bf00      	nop
    }
}
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0be      	sub	sp, #248	; 0xf8
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149e:	f000 fc73 	bl	8001d88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a2:	f000 f87d 	bl	80015a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a6:	f7ff f8a1 	bl	80005ec <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80014aa:	f000 fbd1 	bl	8001c50 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 80014ae:	f000 fa69 	bl	8001984 <MX_TIM4_Init>
  MX_TIM6_Init();
 80014b2:	f000 fad9 	bl	8001a68 <MX_TIM6_Init>
  MX_TIM2_Init();
 80014b6:	f000 fa0d 	bl	80018d4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80014ba:	f7ff f8fd 	bl	80006b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t is_test_mode = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	Buzzer_Init();
 80014c4:	f7ff f858 	bl	8000578 <Buzzer_Init>
	init_LED();
 80014c8:	f7ff fbfe 	bl	8000cc8 <init_LED>
	HAL_TIM_Base_Start_IT(&htim6);
 80014cc:	482f      	ldr	r0, [pc, #188]	; (800158c <main+0xf4>)
 80014ce:	f003 fbcd 	bl	8004c6c <HAL_TIM_Base_Start_IT>

	init_buffer();
 80014d2:	f7ff fa95 	bl	8000a00 <init_buffer>
	struct State state = {};
 80014d6:	463b      	mov	r3, r7
 80014d8:	22ec      	movs	r2, #236	; 0xec
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fd85 	bl	8005fec <memset>
	init_state(&state);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff95 	bl	8001414 <init_state>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	for (;;) {
		if (is_button_pressed()) {
 80014ea:	f7ff fb97 	bl	8000c1c <is_button_pressed>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d019      	beq.n	8001528 <main+0x90>
			while(is_button_pressed()){}
 80014f4:	bf00      	nop
 80014f6:	f7ff fb91 	bl	8000c1c <is_button_pressed>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1fa      	bne.n	80014f6 <main+0x5e>
			is_test_mode ^= 1;
 8001500:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			if (is_test_mode) {
 800150c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <main+0x8a>
				UART_Transmit((uint8_t*) "*** KEYBOARD TEST MODE ***\r\n");
 8001514:	481e      	ldr	r0, [pc, #120]	; (8001590 <main+0xf8>)
 8001516:	f000 f90f 	bl	8001738 <UART_Transmit>
				Buzzer_Set_Volume(BUZZER_VOLUME_MUTE);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff f852 	bl	80005c4 <Buzzer_Set_Volume>
 8001520:	e002      	b.n	8001528 <main+0x90>
			} else {
				UART_Transmit((uint8_t*) "*** APPLICATION MODE ***\r\n");
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <main+0xfc>)
 8001524:	f000 f908 	bl	8001738 <UART_Transmit>
			}
		}

		if (is_test_mode) {
 8001528:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800152c:	2b00      	cmp	r3, #0
 800152e:	d015      	beq.n	800155c <main+0xc4>
			int key = read_buffer();
 8001530:	f7ff fa9c 	bl	8000a6c <read_buffer>
 8001534:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
			if (key >= 0) {
 8001538:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800153c:	2b00      	cmp	r3, #0
 800153e:	dbd4      	blt.n	80014ea <main+0x52>
				snprintf(print_buf, sizeof(print_buf), "Pressed key = %d\r\n", 13 - key);
 8001540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001544:	f1c3 030d 	rsb	r3, r3, #13
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <main+0x100>)
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	4813      	ldr	r0, [pc, #76]	; (800159c <main+0x104>)
 8001550:	f004 fd54 	bl	8005ffc <sniprintf>
				UART_Transmit((uint8_t*) print_buf);
 8001554:	4811      	ldr	r0, [pc, #68]	; (800159c <main+0x104>)
 8001556:	f000 f8ef 	bl	8001738 <UART_Transmit>
 800155a:	e7c6      	b.n	80014ea <main+0x52>
			}
		} else {
			int cmd = read_buffer();
 800155c:	f7ff fa86 	bl	8000a6c <read_buffer>
 8001560:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			if(cmd >= 0)
 8001564:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <main+0xea>
			handle_command(&state, 13 - cmd);
 800156c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f1c3 030d 	rsb	r3, r3, #13
 8001576:	b2da      	uxtb	r2, r3
 8001578:	463b      	mov	r3, r7
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff65 	bl	800144c <handle_command>
			game_loop(&state);
 8001582:	463b      	mov	r3, r7
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff feeb 	bl	8001360 <game_loop>
		if (is_button_pressed()) {
 800158a:	e7ae      	b.n	80014ea <main+0x52>
 800158c:	200002f4 	.word	0x200002f4
 8001590:	08006ad8 	.word	0x08006ad8
 8001594:	08006af8 	.word	0x08006af8
 8001598:	08006ac4 	.word	0x08006ac4
 800159c:	200001ac 	.word	0x200001ac

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2230      	movs	r2, #48	; 0x30
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fd1c 	bl	8005fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <SystemClock_Config+0xcc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <SystemClock_Config+0xcc>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <SystemClock_Config+0xcc>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <SystemClock_Config+0xd0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a21      	ldr	r2, [pc, #132]	; (8001670 <SystemClock_Config+0xd0>)
 80015ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <SystemClock_Config+0xd0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	2301      	movs	r3, #1
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001604:	2310      	movs	r3, #16
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001608:	2302      	movs	r3, #2
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001610:	2308      	movs	r3, #8
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001614:	23a8      	movs	r3, #168	; 0xa8
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fe89 	bl	800433c <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001630:	f000 f820 	bl	8001674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2105      	movs	r1, #5
 8001652:	4618      	mov	r0, r3
 8001654:	f003 f8ea 	bl	800482c <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800165e:	f000 f809 	bl	8001674 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3750      	adds	r7, #80	; 0x50
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <PCA9538_Read_Register>:
#include "sdk_uart.h"
#include "pca9538.h"
#include "utils.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg,
		uint8_t *buf) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	4603      	mov	r3, r0
 800168c:	603a      	str	r2, [r7, #0]
 800168e:	80fb      	strh	r3, [r7, #6]
 8001690:	460b      	mov	r3, r1
 8001692:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef retcode;
	while ((retcode = HAL_I2C_Mem_Read_IT(&hi2c1, addr | 1, reg, 1, buf, 1))
 8001694:	bf00      	nop
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	b299      	uxth	r1, r3
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	2301      	movs	r3, #1
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <PCA9538_Read_Register+0x44>)
 80016ae:	f001 f8c9 	bl	8002844 <HAL_I2C_Mem_Read_IT>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d0ec      	beq.n	8001696 <PCA9538_Read_Register+0x12>
			== HAL_BUSY)
		;
	return retcode;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000138 	.word	0x20000138

080016cc <PCA9538_Write_Register>:

HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg,
		uint8_t *buf) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	4603      	mov	r3, r0
 80016d4:	603a      	str	r2, [r7, #0]
 80016d6:	80fb      	strh	r3, [r7, #6]
 80016d8:	460b      	mov	r3, r1
 80016da:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef retcode;
	while ((retcode = HAL_I2C_Mem_Write_IT(&hi2c1, addr & 0xFFFE, reg, 1, buf,
 80016dc:	bf00      	nop
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	b299      	uxth	r1, r3
 80016e6:	797b      	ldrb	r3, [r7, #5]
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2301      	movs	r3, #1
 80016f4:	4806      	ldr	r0, [pc, #24]	; (8001710 <PCA9538_Write_Register+0x44>)
 80016f6:	f000 fff3 	bl	80026e0 <HAL_I2C_Mem_Write_IT>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d0ec      	beq.n	80016de <PCA9538_Write_Register+0x12>
			1)) == HAL_BUSY)
		;
	return retcode;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000138 	.word	0x20000138

08001714 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t *buf) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ffac 	bl	8001684 <PCA9538_Read_Register>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7fe fd45 	bl	80001d0 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <UART_Transmit+0x28>)
 8001752:	f004 f958 	bl	8005a06 <HAL_UART_Transmit>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000384 	.word	0x20000384

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_MspInit+0x4c>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x4c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 fb14 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <I2C1_EV_IRQHandler+0x10>)
 800180e:	f001 f8d7 	bl	80029c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000138 	.word	0x20000138

0800181c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <I2C1_ER_IRQHandler+0x10>)
 8001822:	f001 fa3e 	bl	8002ca2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000138 	.word	0x20000138

08001830 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM6_DAC_IRQHandler+0x10>)
 8001836:	f003 fba0 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002f4 	.word	0x200002f4

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f004 fb90 	bl	8005f98 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20020000 	.word	0x20020000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	2000012c 	.word	0x2000012c
 80018ac:	200003e0 	.word	0x200003e0

080018b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <MX_TIM2_Init+0xac>)
 80018f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <MX_TIM2_Init+0xac>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_TIM2_Init+0xac>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM2_Init+0xac>)
 800190c:	220a      	movs	r2, #10
 800190e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_TIM2_Init+0xac>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0xac>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800191c:	4818      	ldr	r0, [pc, #96]	; (8001980 <MX_TIM2_Init+0xac>)
 800191e:	f003 fadd 	bl	8004edc <HAL_TIM_PWM_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001928:	f7ff fea4 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	4619      	mov	r1, r3
 800193a:	4811      	ldr	r0, [pc, #68]	; (8001980 <MX_TIM2_Init+0xac>)
 800193c:	f003 ff86 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001946:	f7ff fe95 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194a:	2360      	movs	r3, #96	; 0x60
 800194c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	4619      	mov	r1, r3
 8001960:	4807      	ldr	r0, [pc, #28]	; (8001980 <MX_TIM2_Init+0xac>)
 8001962:	f003 fc13 	bl	800518c <HAL_TIM_PWM_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800196c:	f7ff fe82 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <MX_TIM2_Init+0xac>)
 8001972:	f000 f90d 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000033c 	.word	0x2000033c

08001984 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019a8:	4a2e      	ldr	r2, [pc, #184]	; (8001a64 <MX_TIM4_Init+0xe0>)
 80019aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019ae:	2259      	movs	r2, #89	; 0x59
 80019b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019cc:	4824      	ldr	r0, [pc, #144]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019ce:	f003 fa85 	bl	8004edc <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80019d8:	f7ff fe4c 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4619      	mov	r1, r3
 80019ea:	481d      	ldr	r0, [pc, #116]	; (8001a60 <MX_TIM4_Init+0xdc>)
 80019ec:	f003 ff2e 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80019f6:	f7ff fe3d 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 80019fe:	23c8      	movs	r3, #200	; 0xc8
 8001a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_TIM4_Init+0xdc>)
 8001a12:	f003 fbbb 	bl	800518c <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001a1c:	f7ff fe2a 	bl	8001674 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2208      	movs	r2, #8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_TIM4_Init+0xdc>)
 8001a2c:	f003 fbae 	bl	800518c <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001a36:	f7ff fe1d 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	220c      	movs	r2, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <MX_TIM4_Init+0xdc>)
 8001a42:	f003 fba3 	bl	800518c <HAL_TIM_PWM_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8001a4c:	f7ff fe12 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <MX_TIM4_Init+0xdc>)
 8001a52:	f000 f89d 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002ac 	.word	0x200002ac
 8001a64:	40000800 	.word	0x40000800

08001a68 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_TIM6_Init+0x64>)
 8001a78:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <MX_TIM6_Init+0x68>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_TIM6_Init+0x64>)
 8001a7e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001a82:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_TIM6_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_TIM6_Init+0x64>)
 8001a8c:	2264      	movs	r2, #100	; 0x64
 8001a8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_TIM6_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <MX_TIM6_Init+0x64>)
 8001a98:	f003 f898 	bl	8004bcc <HAL_TIM_Base_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001aa2:	f7ff fde7 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <MX_TIM6_Init+0x64>)
 8001ab4:	f003 feca 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001abe:	f7ff fdd9 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002f4 	.word	0x200002f4
 8001ad0:	40001000 	.word	0x40001000

08001ad4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d10e      	bne.n	8001b04 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_TIM_PWM_MspInit+0x64>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_TIM_PWM_MspInit+0x64>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_TIM_PWM_MspInit+0x64>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b02:	e012      	b.n	8001b2a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_TIM_PWM_MspInit+0x68>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10d      	bne.n	8001b2a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_TIM_PWM_MspInit+0x64>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_TIM_PWM_MspInit+0x64>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_TIM_PWM_MspInit+0x64>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40000800 	.word	0x40000800

08001b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d115      	bne.n	8001b7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_TIM_Base_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_TIM_Base_MspInit+0x4c>)
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_TIM_Base_MspInit+0x4c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2036      	movs	r0, #54	; 0x36
 8001b74:	f000 fa55 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b78:	2036      	movs	r0, #54	; 0x36
 8001b7a:	f000 fa6e 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40001000 	.word	0x40001000
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb0:	d11e      	bne.n	8001bf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_TIM_MspPostInit+0xb0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_TIM_MspPostInit+0xb0>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_TIM_MspPostInit+0xb0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bde:	2301      	movs	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4816      	ldr	r0, [pc, #88]	; (8001c44 <HAL_TIM_MspPostInit+0xb4>)
 8001bea:	f000 fa81 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bee:	e023      	b.n	8001c38 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_TIM_MspPostInit+0xb8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d11e      	bne.n	8001c38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_TIM_MspPostInit+0xb0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_TIM_MspPostInit+0xb0>)
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_TIM_MspPostInit+0xb0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <HAL_TIM_MspPostInit+0xbc>)
 8001c34:	f000 fa5c 	bl	80020f0 <HAL_GPIO_Init>
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40020c00 	.word	0x40020c00

08001c50 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART6_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c88:	f003 fe70 	bl	800596c <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f7ff fcef 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000384 	.word	0x20000384
 8001ca0:	40011400 	.word	0x40011400

08001ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12b      	bne.n	8001d1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_UART_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_UART_MspInit+0x8c>)
 8001d1a:	f000 f9e9 	bl	80020f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40011400 	.word	0x40011400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020800 	.word	0x40020800

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d5e:	f7ff fda7 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f004 f91f 	bl	8005fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff fb97 	bl	8001498 <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001d78:	08006b74 	.word	0x08006b74
  ldr r2, =_sbss
 8001d7c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001d80:	200003dc 	.word	0x200003dc

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f92b 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fcd2 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f943 	bl	8002076 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e08:	f000 f90b 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000006c 	.word	0x2000006c
 8001e24:	20000074 	.word	0x20000074
 8001e28:	20000070 	.word	0x20000070

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000074 	.word	0x20000074
 8001e50:	200003c8 	.word	0x200003c8

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200003c8 	.word	0x200003c8

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e00c      	b.n	80020c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2205      	movs	r2, #5
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e16b      	b.n	80023e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 815a 	bne.w	80023de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80b4 	beq.w	80023de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b60      	ldr	r3, [pc, #384]	; (80023fc <HAL_GPIO_Init+0x30c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a5f      	ldr	r2, [pc, #380]	; (80023fc <HAL_GPIO_Init+0x30c>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_GPIO_Init+0x30c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a5b      	ldr	r2, [pc, #364]	; (8002400 <HAL_GPIO_Init+0x310>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_GPIO_Init+0x314>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02b      	beq.n	8002316 <HAL_GPIO_Init+0x226>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_GPIO_Init+0x318>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d025      	beq.n	8002312 <HAL_GPIO_Init+0x222>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a50      	ldr	r2, [pc, #320]	; (800240c <HAL_GPIO_Init+0x31c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <HAL_GPIO_Init+0x21e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	; (8002410 <HAL_GPIO_Init+0x320>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x21a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4e      	ldr	r2, [pc, #312]	; (8002414 <HAL_GPIO_Init+0x324>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x216>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4d      	ldr	r2, [pc, #308]	; (8002418 <HAL_GPIO_Init+0x328>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x212>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_GPIO_Init+0x32c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x20e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4b      	ldr	r2, [pc, #300]	; (8002420 <HAL_GPIO_Init+0x330>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x20a>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e00e      	b.n	8002318 <HAL_GPIO_Init+0x228>
 80022fa:	2308      	movs	r3, #8
 80022fc:	e00c      	b.n	8002318 <HAL_GPIO_Init+0x228>
 80022fe:	2306      	movs	r3, #6
 8002300:	e00a      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002306:	2304      	movs	r3, #4
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x228>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x228>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	; (8002400 <HAL_GPIO_Init+0x310>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_GPIO_Init+0x334>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235a:	4a32      	ldr	r2, [pc, #200]	; (8002424 <HAL_GPIO_Init+0x334>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002360:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_GPIO_Init+0x334>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002384:	4a27      	ldr	r2, [pc, #156]	; (8002424 <HAL_GPIO_Init+0x334>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_GPIO_Init+0x334>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_GPIO_Init+0x334>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_GPIO_Init+0x334>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_GPIO_Init+0x334>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f ae90 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40021400 	.word	0x40021400
 800241c:	40021800 	.word	0x40021800
 8002420:	40021c00 	.word	0x40021c00
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e001      	b.n	800244a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e12b      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f948 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024bc:	f002 fb5e 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80024c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a81      	ldr	r2, [pc, #516]	; (80026cc <HAL_I2C_Init+0x274>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d807      	bhi.n	80024dc <HAL_I2C_Init+0x84>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a80      	ldr	r2, [pc, #512]	; (80026d0 <HAL_I2C_Init+0x278>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e006      	b.n	80024ea <HAL_I2C_Init+0x92>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a7d      	ldr	r2, [pc, #500]	; (80026d4 <HAL_I2C_Init+0x27c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0e7      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a78      	ldr	r2, [pc, #480]	; (80026d8 <HAL_I2C_Init+0x280>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0c9b      	lsrs	r3, r3, #18
 80024fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a6a      	ldr	r2, [pc, #424]	; (80026cc <HAL_I2C_Init+0x274>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d802      	bhi.n	800252c <HAL_I2C_Init+0xd4>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3301      	adds	r3, #1
 800252a:	e009      	b.n	8002540 <HAL_I2C_Init+0xe8>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	4a69      	ldr	r2, [pc, #420]	; (80026dc <HAL_I2C_Init+0x284>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	3301      	adds	r3, #1
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	495c      	ldr	r1, [pc, #368]	; (80026cc <HAL_I2C_Init+0x274>)
 800255c:	428b      	cmp	r3, r1
 800255e:	d819      	bhi.n	8002594 <HAL_I2C_Init+0x13c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e59      	subs	r1, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fbb1 f3f3 	udiv	r3, r1, r3
 800256e:	1c59      	adds	r1, r3, #1
 8002570:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002574:	400b      	ands	r3, r1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_I2C_Init+0x138>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e59      	subs	r1, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fbb1 f3f3 	udiv	r3, r1, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258e:	e051      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002590:	2304      	movs	r3, #4
 8002592:	e04f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <HAL_I2C_Init+0x168>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e012      	b.n	80025e6 <HAL_I2C_Init+0x18e>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Init+0x196>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e022      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10e      	bne.n	8002614 <HAL_I2C_Init+0x1bc>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e58      	subs	r0, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	440b      	add	r3, r1
 8002604:	fbb0 f3f3 	udiv	r3, r0, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e58      	subs	r0, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	0099      	lsls	r1, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6809      	ldr	r1, [r1, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6911      	ldr	r1, [r2, #16]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	430b      	orrs	r3, r1
 8002676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	000186a0 	.word	0x000186a0
 80026d0:	001e847f 	.word	0x001e847f
 80026d4:	003d08ff 	.word	0x003d08ff
 80026d8:	431bde83 	.word	0x431bde83
 80026dc:	10624dd3 	.word	0x10624dd3

080026e0 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	461a      	mov	r2, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	460b      	mov	r3, r1
 80026f4:	813b      	strh	r3, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	f040 808e 	bne.w	8002828 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800270c:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_I2C_Mem_Write_IT+0x158>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_I2C_Mem_Write_IT+0x15c>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	0a1a      	lsrs	r2, r3, #8
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009a      	lsls	r2, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3b01      	subs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e064      	b.n	800282a <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d0db      	beq.n	8002726 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_I2C_Mem_Write_IT+0x9c>
 8002778:	2302      	movs	r3, #2
 800277a:	e056      	b.n	800282a <HAL_I2C_Mem_Write_IT+0x14a>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d007      	beq.n	80027a2 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2240      	movs	r2, #64	; 0x40
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a3a      	ldr	r2, [r7, #32]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_I2C_Mem_Write_IT+0x160>)
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80027e4:	897a      	ldrh	r2, [r7, #10]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80027ea:	893a      	ldrh	r2, [r7, #8]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002822:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	2000006c 	.word	0x2000006c
 800283c:	14f8b589 	.word	0x14f8b589
 8002840:	ffff0000 	.word	0xffff0000

08002844 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	817b      	strh	r3, [r7, #10]
 8002856:	460b      	mov	r3, r1
 8002858:	813b      	strh	r3, [r7, #8]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 809a 	bne.w	80029a4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_I2C_Mem_Read_IT+0x170>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	4a50      	ldr	r2, [pc, #320]	; (80029b8 <HAL_I2C_Mem_Read_IT+0x174>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	0a1a      	lsrs	r2, r3, #8
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	009a      	lsls	r2, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3b01      	subs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e070      	b.n	80029a6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d0db      	beq.n	800288a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_I2C_Mem_Read_IT+0x9c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e062      	b.n	80029a6 <HAL_I2C_Mem_Read_IT+0x162>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d007      	beq.n	8002906 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002914:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2222      	movs	r2, #34	; 0x22
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2240      	movs	r2, #64	; 0x40
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_I2C_Mem_Read_IT+0x178>)
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002948:	897a      	ldrh	r2, [r7, #10]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800294e:	893a      	ldrh	r2, [r7, #8]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800296e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800299e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000006c 	.word	0x2000006c
 80029b8:	14f8b589 	.word	0x14f8b589
 80029bc:	ffff0000 	.word	0xffff0000

080029c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d003      	beq.n	80029f8 <HAL_I2C_EV_IRQHandler+0x38>
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	f040 80c1 	bne.w	8002b7a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <HAL_I2C_EV_IRQHandler+0x6e>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a18:	d003      	beq.n	8002a22 <HAL_I2C_EV_IRQHandler+0x62>
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_EV_IRQHandler+0x66>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_I2C_EV_IRQHandler+0x68>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	f000 8132 	beq.w	8002c92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00c      	beq.n	8002a52 <HAL_I2C_EV_IRQHandler+0x92>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	0a5b      	lsrs	r3, r3, #9
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f001 fc5d 	bl	8004304 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fd65 	bl	800351a <I2C_Master_SB>
 8002a50:	e092      	b.n	8002b78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_I2C_EV_IRQHandler+0xb2>
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	0a5b      	lsrs	r3, r3, #9
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fddb 	bl	8003626 <I2C_Master_ADD10>
 8002a70:	e082      	b.n	8002b78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0xd2>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	0a5b      	lsrs	r3, r3, #9
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fdf5 	bl	800367a <I2C_Master_ADDR>
 8002a90:	e072      	b.n	8002b78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d03b      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aac:	f000 80f3 	beq.w	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	09db      	lsrs	r3, r3, #7
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00f      	beq.n	8002adc <HAL_I2C_EV_IRQHandler+0x11c>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <HAL_I2C_EV_IRQHandler+0x11c>
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f9df 	bl	8002e98 <I2C_MasterTransmit_TXE>
 8002ada:	e04d      	b.n	8002b78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80d6 	beq.w	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	0a5b      	lsrs	r3, r3, #9
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80cf 	beq.w	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	2b21      	cmp	r3, #33	; 0x21
 8002afc:	d103      	bne.n	8002b06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa66 	bl	8002fd0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b04:	e0c7      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	f040 80c4 	bne.w	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fad4 	bl	80030bc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b14:	e0bf      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b24:	f000 80b7 	beq.w	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00f      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x194>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x194>
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fb49 	bl	80031e4 <I2C_MasterReceive_RXNE>
 8002b52:	e011      	b.n	8002b78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 809a 	beq.w	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	0a5b      	lsrs	r3, r3, #9
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8093 	beq.w	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fbe8 	bl	8003346 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b76:	e08e      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b78:	e08d      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e007      	b.n	8002b9c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d012      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x20e>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	0a5b      	lsrs	r3, r3, #9
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 ffa6 	bl	8003b18 <I2C_Slave_ADDR>
 8002bcc:	e066      	b.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_I2C_EV_IRQHandler+0x22e>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	0a5b      	lsrs	r3, r3, #9
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 ffe0 	bl	8003bac <I2C_Slave_STOPF>
 8002bec:	e056      	b.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bee:	7bbb      	ldrb	r3, [r7, #14]
 8002bf0:	2b21      	cmp	r3, #33	; 0x21
 8002bf2:	d002      	beq.n	8002bfa <HAL_I2C_EV_IRQHandler+0x23a>
 8002bf4:	7bbb      	ldrb	r3, [r7, #14]
 8002bf6:	2b29      	cmp	r3, #41	; 0x29
 8002bf8:	d125      	bne.n	8002c46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	09db      	lsrs	r3, r3, #7
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00f      	beq.n	8002c26 <HAL_I2C_EV_IRQHandler+0x266>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	0a9b      	lsrs	r3, r3, #10
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_I2C_EV_IRQHandler+0x266>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 febc 	bl	800399c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c24:	e039      	b.n	8002c9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d033      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0x2da>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	0a5b      	lsrs	r3, r3, #9
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02d      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fee9 	bl	8003a16 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c44:	e029      	b.n	8002c9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00f      	beq.n	8002c72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	0a9b      	lsrs	r3, r3, #10
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fef4 	bl	8003a58 <I2C_SlaveReceive_RXNE>
 8002c70:	e014      	b.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00e      	beq.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	0a5b      	lsrs	r3, r3, #9
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 ff22 	bl	8003ad4 <I2C_SlaveReceive_BTF>
 8002c90:	e004      	b.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b08a      	sub	sp, #40	; 0x28
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_I2C_ER_IRQHandler+0x4e>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	0a5b      	lsrs	r3, r3, #9
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <HAL_I2C_ER_IRQHandler+0x78>
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	0a9b      	lsrs	r3, r3, #10
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d03f      	beq.n	8002da6 <HAL_I2C_ER_IRQHandler+0x104>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d039      	beq.n	8002da6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002d32:	7efb      	ldrb	r3, [r7, #27]
 8002d34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d4c:	7ebb      	ldrb	r3, [r7, #26]
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d112      	bne.n	8002d78 <HAL_I2C_ER_IRQHandler+0xd6>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10f      	bne.n	8002d78 <HAL_I2C_ER_IRQHandler+0xd6>
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	2b21      	cmp	r3, #33	; 0x21
 8002d5c:	d008      	beq.n	8002d70 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	2b29      	cmp	r3, #41	; 0x29
 8002d62:	d005      	beq.n	8002d70 <HAL_I2C_ER_IRQHandler+0xce>
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b28      	cmp	r3, #40	; 0x28
 8002d68:	d106      	bne.n	8002d78 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b21      	cmp	r3, #33	; 0x21
 8002d6e:	d103      	bne.n	8002d78 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f001 f84b 	bl	8003e0c <I2C_Slave_AF>
 8002d76:	e016      	b.n	8002da6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d8a:	7efb      	ldrb	r3, [r7, #27]
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d002      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0xf4>
 8002d90:	7efb      	ldrb	r3, [r7, #27]
 8002d92:	2b40      	cmp	r3, #64	; 0x40
 8002d94:	d107      	bne.n	8002da6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	0adb      	lsrs	r3, r3, #11
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002dce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f001 f882 	bl	8003eec <I2C_ITError>
  }
}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d150      	bne.n	8002f60 <I2C_MasterTransmit_TXE+0xc8>
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b21      	cmp	r3, #33	; 0x21
 8002ec2:	d14d      	bne.n	8002f60 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d01d      	beq.n	8002f06 <I2C_MasterTransmit_TXE+0x6e>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d01a      	beq.n	8002f06 <I2C_MasterTransmit_TXE+0x6e>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ed6:	d016      	beq.n	8002f06 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ee6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2211      	movs	r2, #17
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ff76 	bl	8002df0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f04:	e060      	b.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f14:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f24:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d107      	bne.n	8002f50 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fd fe29 	bl	8000ba0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f4e:	e03b      	b.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff49 	bl	8002df0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f5e:	e033      	b.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b21      	cmp	r3, #33	; 0x21
 8002f64:	d005      	beq.n	8002f72 <I2C_MasterTransmit_TXE+0xda>
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d12d      	bne.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b22      	cmp	r3, #34	; 0x22
 8002f70:	d12a      	bne.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f8c:	e01c      	b.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d103      	bne.n	8002fa2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f88e 	bl	80030bc <I2C_MemoryTransmit_TXE_BTF>
}
 8002fa0:	e012      	b.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fc6:	e7ff      	b.n	8002fc8 <I2C_MasterTransmit_TXE+0x130>
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b21      	cmp	r3, #33	; 0x21
 8002fe8:	d164      	bne.n	80030b4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003018:	e04c      	b.n	80030b4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d01d      	beq.n	800305c <I2C_MasterTransmit_BTF+0x8c>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b20      	cmp	r3, #32
 8003024:	d01a      	beq.n	800305c <I2C_MasterTransmit_BTF+0x8c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800302c:	d016      	beq.n	800305c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2211      	movs	r2, #17
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fecb 	bl	8002df0 <HAL_I2C_MasterTxCpltCallback>
}
 800305a:	e02b      	b.n	80030b4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800306a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d107      	bne.n	80030a6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fd7e 	bl	8000ba0 <HAL_I2C_MemTxCpltCallback>
}
 80030a4:	e006      	b.n	80030b4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fe9e 	bl	8002df0 <HAL_I2C_MasterTxCpltCallback>
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11d      	bne.n	8003110 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10b      	bne.n	80030f4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ec:	1c9a      	adds	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80030f2:	e073      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	121b      	asrs	r3, r3, #8
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800310e:	e065      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10b      	bne.n	8003130 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311c:	b2da      	uxtb	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800312e:	e055      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003134:	2b02      	cmp	r3, #2
 8003136:	d151      	bne.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b22      	cmp	r3, #34	; 0x22
 800313c:	d10d      	bne.n	800315a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003158:	e040      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d015      	beq.n	8003190 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b21      	cmp	r3, #33	; 0x21
 8003168:	d112      	bne.n	8003190 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800318e:	e025      	b.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d120      	bne.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b21      	cmp	r3, #33	; 0x21
 800319e:	d11d      	bne.n	80031dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fce2 	bl	8000ba0 <HAL_I2C_MemTxCpltCallback>
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b22      	cmp	r3, #34	; 0x22
 80031f6:	f040 80a2 	bne.w	800333e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d921      	bls.n	800324c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b03      	cmp	r3, #3
 8003236:	f040 8082 	bne.w	800333e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800324a:	e078      	b.n	800333e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	2b02      	cmp	r3, #2
 8003252:	d074      	beq.n	800333e <I2C_MasterReceive_RXNE+0x15a>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d002      	beq.n	8003260 <I2C_MasterReceive_RXNE+0x7c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d16e      	bne.n	800333e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f001 f81d 	bl	80042a0 <I2C_WaitOnSTOPRequestThroughIT>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d142      	bne.n	80032f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800328a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d10a      	bne.n	80032dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7fd fc79 	bl	8000bcc <HAL_I2C_MemRxCpltCallback>
}
 80032da:	e030      	b.n	800333e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2212      	movs	r2, #18
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fd8a 	bl	8002e04 <HAL_I2C_MasterRxCpltCallback>
}
 80032f0:	e025      	b.n	800333e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003300:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fd99 	bl	8002e70 <HAL_I2C_ErrorCallback>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b04      	cmp	r3, #4
 800335c:	d11b      	bne.n	8003396 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003394:	e0bd      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d129      	bne.n	80033f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00a      	beq.n	80033cc <I2C_MasterReceive_BTF+0x86>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d007      	beq.n	80033cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033f2:	e08e      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d176      	bne.n	80034ec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d002      	beq.n	800340a <I2C_MasterReceive_BTF+0xc4>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d108      	bne.n	800341c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e019      	b.n	8003450 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d002      	beq.n	8003428 <I2C_MasterReceive_BTF+0xe2>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d108      	bne.n	800343a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e00a      	b.n	8003450 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d007      	beq.n	8003450 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d10a      	bne.n	80034d6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fb7c 	bl	8000bcc <HAL_I2C_MemRxCpltCallback>
}
 80034d4:	e01d      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2212      	movs	r2, #18
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fc8d 	bl	8002e04 <HAL_I2C_MasterRxCpltCallback>
}
 80034ea:	e012      	b.n	8003512 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d117      	bne.n	800355e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003546:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003548:	e067      	b.n	800361a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
}
 800355c:	e05d      	b.n	800361a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003566:	d133      	bne.n	80035d0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b21      	cmp	r3, #33	; 0x21
 8003572:	d109      	bne.n	8003588 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003584:	611a      	str	r2, [r3, #16]
 8003586:	e008      	b.n	800359a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <I2C_Master_SB+0x92>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d032      	beq.n	800361a <I2C_Master_SB+0x100>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02d      	beq.n	800361a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035cc:	605a      	str	r2, [r3, #4]
}
 80035ce:	e024      	b.n	800361a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	b29b      	uxth	r3, r3
 80035de:	11db      	asrs	r3, r3, #7
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 0306 	and.w	r3, r3, #6
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f063 030f 	orn	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]
}
 80035f4:	e011      	b.n	800361a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10d      	bne.n	800361a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	b29b      	uxth	r3, r3
 8003604:	11db      	asrs	r3, r3, #7
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 0306 	and.w	r3, r3, #6
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f063 030e 	orn	r3, r3, #14
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <I2C_Master_ADD10+0x26>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d108      	bne.n	800365e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <I2C_Master_ADD10+0x48>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366c:	605a      	str	r2, [r3, #4]
  }
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800367a:	b480      	push	{r7}
 800367c:	b091      	sub	sp, #68	; 0x44
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b22      	cmp	r3, #34	; 0x22
 80036a2:	f040 8169 	bne.w	8003978 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <I2C_Master_ADDR+0x54>
 80036ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d10b      	bne.n	80036ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	e160      	b.n	8003990 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <I2C_Master_ADDR+0x98>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036de:	d118      	bne.n	8003712 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003704:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	651a      	str	r2, [r3, #80]	; 0x50
 8003710:	e13e      	b.n	8003990 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d113      	bne.n	8003744 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371c:	2300      	movs	r3, #0
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e115      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	f040 808a 	bne.w	8003864 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003756:	d137      	bne.n	80037c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d113      	bne.n	80037a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	e0e7      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e0d3      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d02e      	beq.n	800382c <I2C_Master_ADDR+0x1b2>
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d02b      	beq.n	800382c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d102      	bne.n	80037e0 <I2C_Master_ADDR+0x166>
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d125      	bne.n	800382c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d00e      	beq.n	8003804 <I2C_Master_ADDR+0x18a>
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d00b      	beq.n	8003804 <I2C_Master_ADDR+0x18a>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d008      	beq.n	8003804 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e007      	b.n	8003814 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003812:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	e0a1      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e085      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d14d      	bne.n	800390a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b04      	cmp	r3, #4
 8003872:	d016      	beq.n	80038a2 <I2C_Master_ADDR+0x228>
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	2b02      	cmp	r3, #2
 8003878:	d013      	beq.n	80038a2 <I2C_Master_ADDR+0x228>
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	2b10      	cmp	r3, #16
 800387e:	d010      	beq.n	80038a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e007      	b.n	80038b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c0:	d117      	bne.n	80038f2 <I2C_Master_ADDR+0x278>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c8:	d00b      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d008      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d005      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d002      	beq.n	80038e2 <I2C_Master_ADDR+0x268>
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d107      	bne.n	80038f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	e032      	b.n	8003970 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003918:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003928:	d117      	bne.n	800395a <I2C_Master_ADDR+0x2e0>
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003930:	d00b      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2b01      	cmp	r3, #1
 8003936:	d008      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2b08      	cmp	r3, #8
 800393c:	d005      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	2b10      	cmp	r3, #16
 8003942:	d002      	beq.n	800394a <I2C_Master_ADDR+0x2d0>
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b20      	cmp	r3, #32
 8003948:	d107      	bne.n	800395a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003958:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003976:	e00b      	b.n	8003990 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
}
 800398e:	e7ff      	b.n	8003990 <I2C_Master_ADDR+0x316>
 8003990:	bf00      	nop
 8003992:	3744      	adds	r7, #68	; 0x44
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02b      	beq.n	8003a0e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d114      	bne.n	8003a0e <I2C_SlaveTransmit_TXE+0x72>
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b29      	cmp	r3, #41	; 0x29
 80039e8:	d111      	bne.n	8003a0e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2221      	movs	r2, #33	; 0x21
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2228      	movs	r2, #40	; 0x28
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fa05 	bl	8002e18 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d011      	beq.n	8003a4c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02c      	beq.n	8003acc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <I2C_SlaveReceive_RXNE+0x74>
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa6:	d111      	bne.n	8003acc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2222      	movs	r2, #34	; 0x22
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2228      	movs	r2, #40	; 0x28
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff f9b0 	bl	8002e2c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b32:	2b28      	cmp	r3, #40	; 0x28
 8003b34:	d127      	bne.n	8003b86 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	09db      	lsrs	r3, r3, #7
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d103      	bne.n	8003b6a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	81bb      	strh	r3, [r7, #12]
 8003b68:	e002      	b.n	8003b70 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b78:	89ba      	ldrh	r2, [r7, #12]
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff f95e 	bl	8002e40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b84:	e00e      	b.n	8003ba4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c08:	d172      	bne.n	8003cf0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b22      	cmp	r3, #34	; 0x22
 8003c0e:	d002      	beq.n	8003c16 <I2C_Slave_STOPF+0x6a>
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b2a      	cmp	r3, #42	; 0x2a
 8003c14:	d135      	bne.n	8003c82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fa3f 	bl	80020d2 <HAL_DMA_GetState>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d049      	beq.n	8003cee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4a69      	ldr	r2, [pc, #420]	; (8003e04 <I2C_Slave_STOPF+0x258>)
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fa11 	bl	800208e <HAL_DMA_Abort_IT>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03d      	beq.n	8003cee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c80:	e035      	b.n	8003cee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fa09 	bl	80020d2 <HAL_DMA_GetState>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d014      	beq.n	8003cf0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <I2C_Slave_STOPF+0x258>)
 8003ccc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe f9db 	bl	800208e <HAL_DMA_Abort_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
 8003cec:	e000      	b.n	8003cf0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03e      	beq.n	8003d78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d112      	bne.n	8003d2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d112      	bne.n	8003d62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8b3 	bl	8003eec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d86:	e039      	b.n	8003dfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8c:	d109      	bne.n	8003da2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2228      	movs	r2, #40	; 0x28
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff f845 	bl	8002e2c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b28      	cmp	r3, #40	; 0x28
 8003dac:	d111      	bne.n	8003dd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <I2C_Slave_STOPF+0x25c>)
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff f846 	bl	8002e5c <HAL_I2C_ListenCpltCallback>
}
 8003dd0:	e014      	b.n	8003dfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	2b22      	cmp	r3, #34	; 0x22
 8003dd8:	d002      	beq.n	8003de0 <I2C_Slave_STOPF+0x234>
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b22      	cmp	r3, #34	; 0x22
 8003dde:	d10d      	bne.n	8003dfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff f818 	bl	8002e2c <HAL_I2C_SlaveRxCpltCallback>
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08004151 	.word	0x08004151
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d002      	beq.n	8003e2e <I2C_Slave_AF+0x22>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d129      	bne.n	8003e82 <I2C_Slave_AF+0x76>
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b28      	cmp	r3, #40	; 0x28
 8003e32:	d126      	bne.n	8003e82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a2c      	ldr	r2, [pc, #176]	; (8003ee8 <I2C_Slave_AF+0xdc>)
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fe ffee 	bl	8002e5c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e80:	e02e      	b.n	8003ee0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b21      	cmp	r3, #33	; 0x21
 8003e86:	d126      	bne.n	8003ed6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <I2C_Slave_AF+0xdc>)
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2221      	movs	r2, #33	; 0x21
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ebc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ecc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe ffa2 	bl	8002e18 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ed4:	e004      	b.n	8003ee0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ede:	615a      	str	r2, [r3, #20]
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	ffff0000 	.word	0xffff0000

08003eec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f04:	7bbb      	ldrb	r3, [r7, #14]
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d002      	beq.n	8003f10 <I2C_ITError+0x24>
 8003f0a:	7bbb      	ldrb	r3, [r7, #14]
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d10a      	bne.n	8003f26 <I2C_ITError+0x3a>
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b22      	cmp	r3, #34	; 0x22
 8003f14:	d107      	bne.n	8003f26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f2c:	2b28      	cmp	r3, #40	; 0x28
 8003f2e:	d107      	bne.n	8003f40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2228      	movs	r2, #40	; 0x28
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f3e:	e015      	b.n	8003f6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4e:	d00a      	beq.n	8003f66 <I2C_ITError+0x7a>
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b60      	cmp	r3, #96	; 0x60
 8003f54:	d007      	beq.n	8003f66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7a:	d162      	bne.n	8004042 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d020      	beq.n	8003fdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	4a6a      	ldr	r2, [pc, #424]	; (8004148 <I2C_ITError+0x25c>)
 8003fa0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe f871 	bl	800208e <HAL_DMA_Abort_IT>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8089 	beq.w	80040c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4798      	blx	r3
 8003fda:	e074      	b.n	80040c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	4a59      	ldr	r2, [pc, #356]	; (8004148 <I2C_ITError+0x25c>)
 8003fe2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe f850 	bl	800208e <HAL_DMA_Abort_IT>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d068      	beq.n	80040c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d10b      	bne.n	800401a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800403c:	4610      	mov	r0, r2
 800403e:	4798      	blx	r3
 8004040:	e041      	b.n	80040c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b60      	cmp	r3, #96	; 0x60
 800404c:	d125      	bne.n	800409a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d10b      	bne.n	8004082 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe fef6 	bl	8002e84 <HAL_I2C_AbortCpltCallback>
 8004098:	e015      	b.n	80040c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d10b      	bne.n	80040c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe fed5 	bl	8002e70 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10e      	bne.n	80040f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d113      	bne.n	8004140 <I2C_ITError+0x254>
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b28      	cmp	r3, #40	; 0x28
 800411c:	d110      	bne.n	8004140 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <I2C_ITError+0x260>)
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe fe8e 	bl	8002e5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	08004151 	.word	0x08004151
 800414c:	ffff0000 	.word	0xffff0000

08004150 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800416a:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <I2C_DMAAbort+0x148>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	08db      	lsrs	r3, r3, #3
 8004170:	4a4a      	ldr	r2, [pc, #296]	; (800429c <I2C_DMAAbort+0x14c>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	0a1a      	lsrs	r2, r3, #8
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00da      	lsls	r2, r3, #3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f043 0220 	orr.w	r2, r3, #32
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004196:	e00a      	b.n	80041ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ac:	d0ea      	beq.n	8004184 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	2200      	movs	r2, #0
 80041bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	2200      	movs	r2, #0
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	2200      	movs	r2, #0
 80041f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2200      	movs	r2, #0
 8004202:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b60      	cmp	r3, #96	; 0x60
 800421e:	d10e      	bne.n	800423e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7fe fe24 	bl	8002e84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800423c:	e027      	b.n	800428e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004244:	2b28      	cmp	r3, #40	; 0x28
 8004246:	d117      	bne.n	8004278 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004266:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2228      	movs	r2, #40	; 0x28
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004276:	e007      	b.n	8004288 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004288:	6978      	ldr	r0, [r7, #20]
 800428a:	f7fe fdf1 	bl	8002e70 <HAL_I2C_ErrorCallback>
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	2000006c 	.word	0x2000006c
 800429c:	14f8b589 	.word	0x14f8b589

080042a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	0a1a      	lsrs	r2, r3, #8
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e008      	b.n	80042f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ec:	d0e9      	beq.n	80042c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	2000006c 	.word	0x2000006c
 8004300:	14f8b589 	.word	0x14f8b589

08004304 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004314:	d103      	bne.n	800431e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800431c:	e007      	b.n	800432e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004326:	d102      	bne.n	800432e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2208      	movs	r2, #8
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e264      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d075      	beq.n	8004446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435a:	4ba3      	ldr	r3, [pc, #652]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d00c      	beq.n	8004380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4ba0      	ldr	r3, [pc, #640]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436e:	2b08      	cmp	r3, #8
 8004370:	d112      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4b9d      	ldr	r3, [pc, #628]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437e:	d10b      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	4b99      	ldr	r3, [pc, #612]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05b      	beq.n	8004444 <HAL_RCC_OscConfig+0x108>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d157      	bne.n	8004444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e23f      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x74>
 80043a2:	4b91      	ldr	r3, [pc, #580]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a90      	ldr	r2, [pc, #576]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e01d      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x98>
 80043ba:	4b8b      	ldr	r3, [pc, #556]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a8a      	ldr	r2, [pc, #552]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a87      	ldr	r2, [pc, #540]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043d4:	4b84      	ldr	r3, [pc, #528]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a83      	ldr	r2, [pc, #524]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b81      	ldr	r3, [pc, #516]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a80      	ldr	r2, [pc, #512]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fd2e 	bl	8001e54 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd fd2a 	bl	8001e54 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e204      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0xc0>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fd fd1a 	bl	8001e54 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004424:	f7fd fd16 	bl	8001e54 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1f0      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	4b6c      	ldr	r3, [pc, #432]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0xe8>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d063      	beq.n	800451a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004452:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b62      	ldr	r3, [pc, #392]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b5f      	ldr	r3, [pc, #380]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b5c      	ldr	r3, [pc, #368]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e1c4      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4952      	ldr	r1, [pc, #328]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e03a      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b4f      	ldr	r3, [pc, #316]	; (80045ec <HAL_RCC_OscConfig+0x2b0>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fd fccf 	bl	8001e54 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ba:	f7fd fccb 	bl	8001e54 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1a5      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4940      	ldr	r1, [pc, #256]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
 80044ec:	e015      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <HAL_RCC_OscConfig+0x2b0>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fcae 	bl	8001e54 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fd fcaa 	bl	8001e54 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e184      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d030      	beq.n	8004588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <HAL_RCC_OscConfig+0x2b4>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fd fc8e 	bl	8001e54 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800453c:	f7fd fc8a 	bl	8001e54 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e164      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x200>
 800455a:	e015      	b.n	8004588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455c:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCC_OscConfig+0x2b4>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fd fc77 	bl	8001e54 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456a:	f7fd fc73 	bl	8001e54 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e14d      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 800457e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80a0 	beq.w	80046d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6413      	str	r3, [r2, #64]	; 0x40
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_OscConfig+0x2b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d121      	bne.n	8004616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <HAL_RCC_OscConfig+0x2b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <HAL_RCC_OscConfig+0x2b8>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045de:	f7fd fc39 	bl	8001e54 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	e011      	b.n	800460a <HAL_RCC_OscConfig+0x2ce>
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	42470000 	.word	0x42470000
 80045f0:	42470e80 	.word	0x42470e80
 80045f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fd fc2c 	bl	8001e54 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e106      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b85      	ldr	r3, [pc, #532]	; (8004820 <HAL_RCC_OscConfig+0x4e4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d106      	bne.n	800462c <HAL_RCC_OscConfig+0x2f0>
 800461e:	4b81      	ldr	r3, [pc, #516]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	e01c      	b.n	8004666 <HAL_RCC_OscConfig+0x32a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b05      	cmp	r3, #5
 8004632:	d10c      	bne.n	800464e <HAL_RCC_OscConfig+0x312>
 8004634:	4b7b      	ldr	r3, [pc, #492]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a7a      	ldr	r2, [pc, #488]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	4b78      	ldr	r3, [pc, #480]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a77      	ldr	r2, [pc, #476]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	e00b      	b.n	8004666 <HAL_RCC_OscConfig+0x32a>
 800464e:	4b75      	ldr	r3, [pc, #468]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a74      	ldr	r2, [pc, #464]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	4b72      	ldr	r3, [pc, #456]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a71      	ldr	r2, [pc, #452]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fd fbf1 	bl	8001e54 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fd fbed 	bl	8001e54 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	; 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0c5      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ee      	beq.n	8004676 <HAL_RCC_OscConfig+0x33a>
 8004698:	e014      	b.n	80046c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469a:	f7fd fbdb 	bl	8001e54 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fd fbd7 	bl	8001e54 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0af      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	4b5a      	ldr	r3, [pc, #360]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ee      	bne.n	80046a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d105      	bne.n	80046d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b56      	ldr	r3, [pc, #344]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a55      	ldr	r2, [pc, #340]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 809b 	beq.w	8004816 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e0:	4b50      	ldr	r3, [pc, #320]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d05c      	beq.n	80047a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d141      	bne.n	8004778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f4:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <HAL_RCC_OscConfig+0x4ec>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fd fbab 	bl	8001e54 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004702:	f7fd fba7 	bl	8001e54 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e081      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004714:	4b43      	ldr	r3, [pc, #268]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	019b      	lsls	r3, r3, #6
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	3b01      	subs	r3, #1
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	4937      	ldr	r1, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 8004746:	4313      	orrs	r3, r2
 8004748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474a:	4b37      	ldr	r3, [pc, #220]	; (8004828 <HAL_RCC_OscConfig+0x4ec>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fd fb80 	bl	8001e54 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd fb7c 	bl	8001e54 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e056      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x41c>
 8004776:	e04e      	b.n	8004816 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <HAL_RCC_OscConfig+0x4ec>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fd fb69 	bl	8001e54 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fd fb65 	bl	8001e54 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e03f      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004798:	4b22      	ldr	r3, [pc, #136]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x44a>
 80047a4:	e037      	b.n	8004816 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e032      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b2:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <HAL_RCC_OscConfig+0x4e8>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d028      	beq.n	8004812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d121      	bne.n	8004812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d11a      	bne.n	8004812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e2:	4013      	ands	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d111      	bne.n	8004812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	3b01      	subs	r3, #1
 80047fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d107      	bne.n	8004812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40007000 	.word	0x40007000
 8004824:	40023800 	.word	0x40023800
 8004828:	42470060 	.word	0x42470060

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0cc      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b68      	ldr	r3, [pc, #416]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90c      	bls.n	8004868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a58      	ldr	r2, [pc, #352]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800488a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d044      	beq.n	800494c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d119      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e067      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4934      	ldr	r1, [pc, #208]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7fd fa9a 	bl	8001e54 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fd fa96 	bl	8001e54 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e04f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d20c      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490a      	ldr	r1, [pc, #40]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd f9fa 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	08006b18 	.word	0x08006b18
 80049f0:	2000006c 	.word	0x2000006c
 80049f4:	20000070 	.word	0x20000070

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	b5b0      	push	{r4, r5, r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049fe:	2100      	movs	r1, #0
 8004a00:	6079      	str	r1, [r7, #4]
 8004a02:	2100      	movs	r1, #0
 8004a04:	60f9      	str	r1, [r7, #12]
 8004a06:	2100      	movs	r1, #0
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0e:	4952      	ldr	r1, [pc, #328]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a10:	6889      	ldr	r1, [r1, #8]
 8004a12:	f001 010c 	and.w	r1, r1, #12
 8004a16:	2908      	cmp	r1, #8
 8004a18:	d00d      	beq.n	8004a36 <HAL_RCC_GetSysClockFreq+0x3e>
 8004a1a:	2908      	cmp	r1, #8
 8004a1c:	f200 8094 	bhi.w	8004b48 <HAL_RCC_GetSysClockFreq+0x150>
 8004a20:	2900      	cmp	r1, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x32>
 8004a24:	2904      	cmp	r1, #4
 8004a26:	d003      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x38>
 8004a28:	e08e      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a2a:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x164>)
 8004a2c:	60bb      	str	r3, [r7, #8]
       break;
 8004a2e:	e08e      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a30:	4b4b      	ldr	r3, [pc, #300]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a32:	60bb      	str	r3, [r7, #8]
      break;
 8004a34:	e08b      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a36:	4948      	ldr	r1, [pc, #288]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a38:	6849      	ldr	r1, [r1, #4]
 8004a3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004a3e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a40:	4945      	ldr	r1, [pc, #276]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a42:	6849      	ldr	r1, [r1, #4]
 8004a44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d024      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4c:	4942      	ldr	r1, [pc, #264]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a4e:	6849      	ldr	r1, [r1, #4]
 8004a50:	0989      	lsrs	r1, r1, #6
 8004a52:	4608      	mov	r0, r1
 8004a54:	f04f 0100 	mov.w	r1, #0
 8004a58:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004a5c:	f04f 0500 	mov.w	r5, #0
 8004a60:	ea00 0204 	and.w	r2, r0, r4
 8004a64:	ea01 0305 	and.w	r3, r1, r5
 8004a68:	493d      	ldr	r1, [pc, #244]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a6a:	fb01 f003 	mul.w	r0, r1, r3
 8004a6e:	2100      	movs	r1, #0
 8004a70:	fb01 f102 	mul.w	r1, r1, r2
 8004a74:	1844      	adds	r4, r0, r1
 8004a76:	493a      	ldr	r1, [pc, #232]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a78:	fba2 0101 	umull	r0, r1, r2, r1
 8004a7c:	1863      	adds	r3, r4, r1
 8004a7e:	4619      	mov	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	f7fb fbfa 	bl	8000280 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e04a      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	ea02 0400 	and.w	r4, r2, r0
 8004aae:	ea03 0501 	and.w	r5, r3, r1
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	014b      	lsls	r3, r1, #5
 8004ac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ac4:	0142      	lsls	r2, r0, #5
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	1b00      	subs	r0, r0, r4
 8004acc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	018b      	lsls	r3, r1, #6
 8004ada:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ade:	0182      	lsls	r2, r0, #6
 8004ae0:	1a12      	subs	r2, r2, r0
 8004ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae6:	f04f 0000 	mov.w	r0, #0
 8004aea:	f04f 0100 	mov.w	r1, #0
 8004aee:	00d9      	lsls	r1, r3, #3
 8004af0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004af4:	00d0      	lsls	r0, r2, #3
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	1912      	adds	r2, r2, r4
 8004afc:	eb45 0303 	adc.w	r3, r5, r3
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	0299      	lsls	r1, r3, #10
 8004b0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b0e:	0290      	lsls	r0, r2, #10
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	f7fb fbae 	bl	8000280 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	3301      	adds	r3, #1
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	60bb      	str	r3, [r7, #8]
      break;
 8004b46:	e002      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x164>)
 8004b4a:	60bb      	str	r3, [r7, #8]
      break;
 8004b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	017d7840 	.word	0x017d7840

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	2000006c 	.word	0x2000006c

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff fff0 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a9b      	lsrs	r3, r3, #10
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	08006b28 	.word	0x08006b28

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffdc 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0b5b      	lsrs	r3, r3, #13
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	08006b28 	.word	0x08006b28

08004bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e041      	b.n	8004c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc ffa4 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f000 fba8 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d001      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e04e      	b.n	8004d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a23      	ldr	r2, [pc, #140]	; (8004d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d022      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x80>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d01d      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x80>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d018      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x80>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x80>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00e      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x80>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x80>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x80>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d111      	bne.n	8004d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b06      	cmp	r3, #6
 8004cfc:	d010      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	e007      	b.n	8004d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40010400 	.word	0x40010400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40001800 	.word	0x40001800

08004d4c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_TIM_OC_Start+0x24>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e022      	b.n	8004db6 <HAL_TIM_OC_Start+0x6a>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d109      	bne.n	8004d8a <HAL_TIM_OC_Start+0x3e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	bf14      	ite	ne
 8004d82:	2301      	movne	r3, #1
 8004d84:	2300      	moveq	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	e015      	b.n	8004db6 <HAL_TIM_OC_Start+0x6a>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d109      	bne.n	8004da4 <HAL_TIM_OC_Start+0x58>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e008      	b.n	8004db6 <HAL_TIM_OC_Start+0x6a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	bf14      	ite	ne
 8004db0:	2301      	movne	r3, #1
 8004db2:	2300      	moveq	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07c      	b.n	8004eb8 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_OC_Start+0x82>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dcc:	e013      	b.n	8004df6 <HAL_TIM_OC_Start+0xaa>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_OC_Start+0x92>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ddc:	e00b      	b.n	8004df6 <HAL_TIM_OC_Start+0xaa>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_OC_Start+0xa2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	e003      	b.n	8004df6 <HAL_TIM_OC_Start+0xaa>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fcfe 	bl	8005800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2d      	ldr	r2, [pc, #180]	; (8004ec0 <HAL_TIM_OC_Start+0x174>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_TIM_OC_Start+0xcc>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2c      	ldr	r2, [pc, #176]	; (8004ec4 <HAL_TIM_OC_Start+0x178>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d101      	bne.n	8004e1c <HAL_TIM_OC_Start+0xd0>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_TIM_OC_Start+0xd2>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <HAL_TIM_OC_Start+0x174>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <HAL_TIM_OC_Start+0x136>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e44:	d01d      	beq.n	8004e82 <HAL_TIM_OC_Start+0x136>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_TIM_OC_Start+0x17c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <HAL_TIM_OC_Start+0x136>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_TIM_OC_Start+0x180>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <HAL_TIM_OC_Start+0x136>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_TIM_OC_Start+0x184>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_TIM_OC_Start+0x136>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <HAL_TIM_OC_Start+0x178>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIM_OC_Start+0x136>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_TIM_OC_Start+0x188>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIM_OC_Start+0x136>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_TIM_OC_Start+0x18c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d111      	bne.n	8004ea6 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b06      	cmp	r3, #6
 8004e92:	d010      	beq.n	8004eb6 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	e007      	b.n	8004eb6 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40010400 	.word	0x40010400
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40001800 	.word	0x40001800

08004edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e041      	b.n	8004f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc fde6 	bl	8001ad4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 fa20 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d122      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d11b      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f06f 0202 	mvn.w	r2, #2
 8004fa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f9b1 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 8004fc2:	e005      	b.n	8004fd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f9a3 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9b4 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d122      	bne.n	800502a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d11b      	bne.n	800502a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f06f 0204 	mvn.w	r2, #4
 8004ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f987 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 8005016:	e005      	b.n	8005024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f979 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f98a 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d122      	bne.n	800507e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b08      	cmp	r3, #8
 8005044:	d11b      	bne.n	800507e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0208 	mvn.w	r2, #8
 800504e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2204      	movs	r2, #4
 8005054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f95d 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 800506a:	e005      	b.n	8005078 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f94f 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f960 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	d122      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b10      	cmp	r3, #16
 8005098:	d11b      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f06f 0210 	mvn.w	r2, #16
 80050a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2208      	movs	r2, #8
 80050a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f933 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 80050be:	e005      	b.n	80050cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f925 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f936 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10e      	bne.n	80050fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f06f 0201 	mvn.w	r2, #1
 80050f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7fb fd7d 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d10e      	bne.n	800512a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d107      	bne.n	800512a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fc17 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d10e      	bne.n	8005156 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d107      	bne.n	8005156 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800514e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f8fb 	bl	800534c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b20      	cmp	r3, #32
 8005162:	d10e      	bne.n	8005182 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b20      	cmp	r3, #32
 8005170:	d107      	bne.n	8005182 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f06f 0220 	mvn.w	r2, #32
 800517a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fbe1 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e0ae      	b.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b0c      	cmp	r3, #12
 80051b6:	f200 809f 	bhi.w	80052f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051f5 	.word	0x080051f5
 80051c4:	080052f9 	.word	0x080052f9
 80051c8:	080052f9 	.word	0x080052f9
 80051cc:	080052f9 	.word	0x080052f9
 80051d0:	08005235 	.word	0x08005235
 80051d4:	080052f9 	.word	0x080052f9
 80051d8:	080052f9 	.word	0x080052f9
 80051dc:	080052f9 	.word	0x080052f9
 80051e0:	08005277 	.word	0x08005277
 80051e4:	080052f9 	.word	0x080052f9
 80051e8:	080052f9 	.word	0x080052f9
 80051ec:	080052f9 	.word	0x080052f9
 80051f0:	080052b7 	.word	0x080052b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f950 	bl	80054a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0208 	orr.w	r2, r2, #8
 800520e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0204 	bic.w	r2, r2, #4
 800521e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6999      	ldr	r1, [r3, #24]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	619a      	str	r2, [r3, #24]
      break;
 8005232:	e064      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f9a0 	bl	8005580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800524e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	021a      	lsls	r2, r3, #8
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	619a      	str	r2, [r3, #24]
      break;
 8005274:	e043      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f9f5 	bl	800566c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0208 	orr.w	r2, r2, #8
 8005290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0204 	bic.w	r2, r2, #4
 80052a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69d9      	ldr	r1, [r3, #28]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	61da      	str	r2, [r3, #28]
      break;
 80052b4:	e023      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fa49 	bl	8005754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69d9      	ldr	r1, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	021a      	lsls	r2, r3, #8
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	61da      	str	r2, [r3, #28]
      break;
 80052f6:	e002      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
      break;
 80052fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005306:	7dfb      	ldrb	r3, [r7, #23]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a40      	ldr	r2, [pc, #256]	; (8005474 <TIM_Base_SetConfig+0x114>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537e:	d00f      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3d      	ldr	r2, [pc, #244]	; (8005478 <TIM_Base_SetConfig+0x118>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3c      	ldr	r2, [pc, #240]	; (800547c <TIM_Base_SetConfig+0x11c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3b      	ldr	r2, [pc, #236]	; (8005480 <TIM_Base_SetConfig+0x120>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3a      	ldr	r2, [pc, #232]	; (8005484 <TIM_Base_SetConfig+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d108      	bne.n	80053b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2f      	ldr	r2, [pc, #188]	; (8005474 <TIM_Base_SetConfig+0x114>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c0:	d027      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2c      	ldr	r2, [pc, #176]	; (8005478 <TIM_Base_SetConfig+0x118>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d023      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <TIM_Base_SetConfig+0x11c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01f      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <TIM_Base_SetConfig+0x120>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <TIM_Base_SetConfig+0x124>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d017      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a28      	ldr	r2, [pc, #160]	; (8005488 <TIM_Base_SetConfig+0x128>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a27      	ldr	r2, [pc, #156]	; (800548c <TIM_Base_SetConfig+0x12c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00f      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a26      	ldr	r2, [pc, #152]	; (8005490 <TIM_Base_SetConfig+0x130>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a25      	ldr	r2, [pc, #148]	; (8005494 <TIM_Base_SetConfig+0x134>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d007      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <TIM_Base_SetConfig+0x138>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a23      	ldr	r2, [pc, #140]	; (800549c <TIM_Base_SetConfig+0x13c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d108      	bne.n	8005424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <TIM_Base_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0xf8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <TIM_Base_SetConfig+0x124>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d103      	bne.n	8005460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	615a      	str	r2, [r3, #20]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40000c00 	.word	0x40000c00
 8005484:	40010400 	.word	0x40010400
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400
 8005490:	40014800 	.word	0x40014800
 8005494:	40001800 	.word	0x40001800
 8005498:	40001c00 	.word	0x40001c00
 800549c:	40002000 	.word	0x40002000

080054a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 0302 	bic.w	r3, r3, #2
 80054e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a20      	ldr	r2, [pc, #128]	; (8005578 <TIM_OC1_SetConfig+0xd8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC1_SetConfig+0x64>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a1f      	ldr	r2, [pc, #124]	; (800557c <TIM_OC1_SetConfig+0xdc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10c      	bne.n	800551e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0308 	bic.w	r3, r3, #8
 800550a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 0304 	bic.w	r3, r3, #4
 800551c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a15      	ldr	r2, [pc, #84]	; (8005578 <TIM_OC1_SetConfig+0xd8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_OC1_SetConfig+0x8e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a14      	ldr	r2, [pc, #80]	; (800557c <TIM_OC1_SetConfig+0xdc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d111      	bne.n	8005552 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800553c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	621a      	str	r2, [r3, #32]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40010000 	.word	0x40010000
 800557c:	40010400 	.word	0x40010400

08005580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0210 	bic.w	r2, r3, #16
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0320 	bic.w	r3, r3, #32
 80055ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a22      	ldr	r2, [pc, #136]	; (8005664 <TIM_OC2_SetConfig+0xe4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC2_SetConfig+0x68>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_OC2_SetConfig+0xe8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10d      	bne.n	8005604 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a17      	ldr	r2, [pc, #92]	; (8005664 <TIM_OC2_SetConfig+0xe4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC2_SetConfig+0x94>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC2_SetConfig+0xe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d113      	bne.n	800563c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800561a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40010000 	.word	0x40010000
 8005668:	40010400 	.word	0x40010400

0800566c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a21      	ldr	r2, [pc, #132]	; (800574c <TIM_OC3_SetConfig+0xe0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC3_SetConfig+0x66>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a20      	ldr	r2, [pc, #128]	; (8005750 <TIM_OC3_SetConfig+0xe4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <TIM_OC3_SetConfig+0xe0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_OC3_SetConfig+0x92>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <TIM_OC3_SetConfig+0xe4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d113      	bne.n	8005726 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400

08005754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800579e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <TIM_OC4_SetConfig+0xa4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC4_SetConfig+0x68>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a11      	ldr	r2, [pc, #68]	; (80057fc <TIM_OC4_SetConfig+0xa8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d109      	bne.n	80057d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	019b      	lsls	r3, r3, #6
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2201      	movs	r2, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1a      	ldr	r2, [r3, #32]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	43db      	mvns	r3, r3
 8005822:	401a      	ands	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e05a      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e03f      	b.n	80059fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fc f986 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	; 0x24
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f929 	bl	8005c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b08a      	sub	sp, #40	; 0x28
 8005a0a:	af02      	add	r7, sp, #8
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d17c      	bne.n	8005b20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_UART_Transmit+0x2c>
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e075      	b.n	8005b22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Transmit+0x3e>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e06e      	b.n	8005b22 <HAL_UART_Transmit+0x11c>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2221      	movs	r2, #33	; 0x21
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a5a:	f7fc f9fb 	bl	8001e54 <HAL_GetTick>
 8005a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	88fa      	ldrh	r2, [r7, #6]
 8005a64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	88fa      	ldrh	r2, [r7, #6]
 8005a6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a74:	d108      	bne.n	8005a88 <HAL_UART_Transmit+0x82>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d104      	bne.n	8005a88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e003      	b.n	8005a90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a98:	e02a      	b.n	8005af0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2180      	movs	r1, #128	; 0x80
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f840 	bl	8005b2a <UART_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e036      	b.n	8005b22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	3302      	adds	r3, #2
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e007      	b.n	8005ae2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1cf      	bne.n	8005a9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2200      	movs	r2, #0
 8005b02:	2140      	movs	r1, #64	; 0x40
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f810 	bl	8005b2a <UART_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b090      	sub	sp, #64	; 0x40
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	603b      	str	r3, [r7, #0]
 8005b36:	4613      	mov	r3, r2
 8005b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3a:	e050      	b.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b42:	d04c      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b4a:	f7fc f983 	bl	8001e54 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d241      	bcs.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b7a:	637a      	str	r2, [r7, #52]	; 0x34
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e5      	bne.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bae:	623a      	str	r2, [r7, #32]
 8005bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	69f9      	ldr	r1, [r7, #28]
 8005bb4:	6a3a      	ldr	r2, [r7, #32]
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e5      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e00f      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d09f      	beq.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3740      	adds	r7, #64	; 0x40
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	b09f      	sub	sp, #124	; 0x7c
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	68d9      	ldr	r1, [r3, #12]
 8005c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	ea40 0301 	orr.w	r3, r0, r1
 8005c28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c4c:	f021 010c 	bic.w	r1, r1, #12
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c56:	430b      	orrs	r3, r1
 8005c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c66:	6999      	ldr	r1, [r3, #24]
 8005c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	ea40 0301 	orr.w	r3, r0, r1
 8005c70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4bc5      	ldr	r3, [pc, #788]	; (8005f8c <UART_SetConfig+0x384>)
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d004      	beq.n	8005c86 <UART_SetConfig+0x7e>
 8005c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4bc3      	ldr	r3, [pc, #780]	; (8005f90 <UART_SetConfig+0x388>)
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d103      	bne.n	8005c8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c86:	f7fe ff8d 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005c8a:	6778      	str	r0, [r7, #116]	; 0x74
 8005c8c:	e002      	b.n	8005c94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fe ff75 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005c92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c9c:	f040 80b6 	bne.w	8005e0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ca2:	461c      	mov	r4, r3
 8005ca4:	f04f 0500 	mov.w	r5, #0
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	1891      	adds	r1, r2, r2
 8005cae:	6439      	str	r1, [r7, #64]	; 0x40
 8005cb0:	415b      	adcs	r3, r3
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cb8:	1912      	adds	r2, r2, r4
 8005cba:	eb45 0303 	adc.w	r3, r5, r3
 8005cbe:	f04f 0000 	mov.w	r0, #0
 8005cc2:	f04f 0100 	mov.w	r1, #0
 8005cc6:	00d9      	lsls	r1, r3, #3
 8005cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ccc:	00d0      	lsls	r0, r2, #3
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	1911      	adds	r1, r2, r4
 8005cd4:	6639      	str	r1, [r7, #96]	; 0x60
 8005cd6:	416b      	adcs	r3, r5
 8005cd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	1891      	adds	r1, r2, r2
 8005ce6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ce8:	415b      	adcs	r3, r3
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cf0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cf4:	f7fa fac4 	bl	8000280 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4ba5      	ldr	r3, [pc, #660]	; (8005f94 <UART_SetConfig+0x38c>)
 8005cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	011e      	lsls	r6, r3, #4
 8005d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d08:	461c      	mov	r4, r3
 8005d0a:	f04f 0500 	mov.w	r5, #0
 8005d0e:	4622      	mov	r2, r4
 8005d10:	462b      	mov	r3, r5
 8005d12:	1891      	adds	r1, r2, r2
 8005d14:	6339      	str	r1, [r7, #48]	; 0x30
 8005d16:	415b      	adcs	r3, r3
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d1e:	1912      	adds	r2, r2, r4
 8005d20:	eb45 0303 	adc.w	r3, r5, r3
 8005d24:	f04f 0000 	mov.w	r0, #0
 8005d28:	f04f 0100 	mov.w	r1, #0
 8005d2c:	00d9      	lsls	r1, r3, #3
 8005d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d32:	00d0      	lsls	r0, r2, #3
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	1911      	adds	r1, r2, r4
 8005d3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d3c:	416b      	adcs	r3, r5
 8005d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	461a      	mov	r2, r3
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	1891      	adds	r1, r2, r2
 8005d4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d4e:	415b      	adcs	r3, r3
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d5a:	f7fa fa91 	bl	8000280 <__aeabi_uldivmod>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4b8c      	ldr	r3, [pc, #560]	; (8005f94 <UART_SetConfig+0x38c>)
 8005d64:	fba3 1302 	umull	r1, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2164      	movs	r1, #100	; 0x64
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	3332      	adds	r3, #50	; 0x32
 8005d76:	4a87      	ldr	r2, [pc, #540]	; (8005f94 <UART_SetConfig+0x38c>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d84:	441e      	add	r6, r3
 8005d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	1894      	adds	r4, r2, r2
 8005d94:	623c      	str	r4, [r7, #32]
 8005d96:	415b      	adcs	r3, r3
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d9e:	1812      	adds	r2, r2, r0
 8005da0:	eb41 0303 	adc.w	r3, r1, r3
 8005da4:	f04f 0400 	mov.w	r4, #0
 8005da8:	f04f 0500 	mov.w	r5, #0
 8005dac:	00dd      	lsls	r5, r3, #3
 8005dae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005db2:	00d4      	lsls	r4, r2, #3
 8005db4:	4622      	mov	r2, r4
 8005db6:	462b      	mov	r3, r5
 8005db8:	1814      	adds	r4, r2, r0
 8005dba:	653c      	str	r4, [r7, #80]	; 0x50
 8005dbc:	414b      	adcs	r3, r1
 8005dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	1891      	adds	r1, r2, r2
 8005dcc:	61b9      	str	r1, [r7, #24]
 8005dce:	415b      	adcs	r3, r3
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005dda:	f7fa fa51 	bl	8000280 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b6c      	ldr	r3, [pc, #432]	; (8005f94 <UART_SetConfig+0x38c>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	; 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	3332      	adds	r3, #50	; 0x32
 8005df6:	4a67      	ldr	r2, [pc, #412]	; (8005f94 <UART_SetConfig+0x38c>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 0207 	and.w	r2, r3, #7
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4432      	add	r2, r6
 8005e08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e0a:	e0b9      	b.n	8005f80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e0e:	461c      	mov	r4, r3
 8005e10:	f04f 0500 	mov.w	r5, #0
 8005e14:	4622      	mov	r2, r4
 8005e16:	462b      	mov	r3, r5
 8005e18:	1891      	adds	r1, r2, r2
 8005e1a:	6139      	str	r1, [r7, #16]
 8005e1c:	415b      	adcs	r3, r3
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e24:	1912      	adds	r2, r2, r4
 8005e26:	eb45 0303 	adc.w	r3, r5, r3
 8005e2a:	f04f 0000 	mov.w	r0, #0
 8005e2e:	f04f 0100 	mov.w	r1, #0
 8005e32:	00d9      	lsls	r1, r3, #3
 8005e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e38:	00d0      	lsls	r0, r2, #3
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	eb12 0804 	adds.w	r8, r2, r4
 8005e42:	eb43 0905 	adc.w	r9, r3, r5
 8005e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	008b      	lsls	r3, r1, #2
 8005e5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e5e:	0082      	lsls	r2, r0, #2
 8005e60:	4640      	mov	r0, r8
 8005e62:	4649      	mov	r1, r9
 8005e64:	f7fa fa0c 	bl	8000280 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4b49      	ldr	r3, [pc, #292]	; (8005f94 <UART_SetConfig+0x38c>)
 8005e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	011e      	lsls	r6, r3, #4
 8005e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f04f 0100 	mov.w	r1, #0
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	1894      	adds	r4, r2, r2
 8005e84:	60bc      	str	r4, [r7, #8]
 8005e86:	415b      	adcs	r3, r3
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e8e:	1812      	adds	r2, r2, r0
 8005e90:	eb41 0303 	adc.w	r3, r1, r3
 8005e94:	f04f 0400 	mov.w	r4, #0
 8005e98:	f04f 0500 	mov.w	r5, #0
 8005e9c:	00dd      	lsls	r5, r3, #3
 8005e9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ea2:	00d4      	lsls	r4, r2, #3
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	1814      	adds	r4, r2, r0
 8005eaa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005eac:	414b      	adcs	r3, r1
 8005eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	008b      	lsls	r3, r1, #2
 8005ec4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ec8:	0082      	lsls	r2, r0, #2
 8005eca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ece:	f7fa f9d7 	bl	8000280 <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <UART_SetConfig+0x38c>)
 8005ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	2164      	movs	r1, #100	; 0x64
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	3332      	adds	r3, #50	; 0x32
 8005eea:	4a2a      	ldr	r2, [pc, #168]	; (8005f94 <UART_SetConfig+0x38c>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef6:	441e      	add	r6, r3
 8005ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005efa:	4618      	mov	r0, r3
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	1894      	adds	r4, r2, r2
 8005f06:	603c      	str	r4, [r7, #0]
 8005f08:	415b      	adcs	r3, r3
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f10:	1812      	adds	r2, r2, r0
 8005f12:	eb41 0303 	adc.w	r3, r1, r3
 8005f16:	f04f 0400 	mov.w	r4, #0
 8005f1a:	f04f 0500 	mov.w	r5, #0
 8005f1e:	00dd      	lsls	r5, r3, #3
 8005f20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f24:	00d4      	lsls	r4, r2, #3
 8005f26:	4622      	mov	r2, r4
 8005f28:	462b      	mov	r3, r5
 8005f2a:	eb12 0a00 	adds.w	sl, r2, r0
 8005f2e:	eb43 0b01 	adc.w	fp, r3, r1
 8005f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f04f 0100 	mov.w	r1, #0
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	008b      	lsls	r3, r1, #2
 8005f46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f4a:	0082      	lsls	r2, r0, #2
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f7fa f996 	bl	8000280 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <UART_SetConfig+0x38c>)
 8005f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	2164      	movs	r1, #100	; 0x64
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	3332      	adds	r3, #50	; 0x32
 8005f6c:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <UART_SetConfig+0x38c>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4432      	add	r2, r6
 8005f7e:	609a      	str	r2, [r3, #8]
}
 8005f80:	bf00      	nop
 8005f82:	377c      	adds	r7, #124	; 0x7c
 8005f84:	46bd      	mov	sp, r7
 8005f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40011000 	.word	0x40011000
 8005f90:	40011400 	.word	0x40011400
 8005f94:	51eb851f 	.word	0x51eb851f

08005f98 <__errno>:
 8005f98:	4b01      	ldr	r3, [pc, #4]	; (8005fa0 <__errno+0x8>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000078 	.word	0x20000078

08005fa4 <__libc_init_array>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4d0d      	ldr	r5, [pc, #52]	; (8005fdc <__libc_init_array+0x38>)
 8005fa8:	4c0d      	ldr	r4, [pc, #52]	; (8005fe0 <__libc_init_array+0x3c>)
 8005faa:	1b64      	subs	r4, r4, r5
 8005fac:	10a4      	asrs	r4, r4, #2
 8005fae:	2600      	movs	r6, #0
 8005fb0:	42a6      	cmp	r6, r4
 8005fb2:	d109      	bne.n	8005fc8 <__libc_init_array+0x24>
 8005fb4:	4d0b      	ldr	r5, [pc, #44]	; (8005fe4 <__libc_init_array+0x40>)
 8005fb6:	4c0c      	ldr	r4, [pc, #48]	; (8005fe8 <__libc_init_array+0x44>)
 8005fb8:	f000 fc82 	bl	80068c0 <_init>
 8005fbc:	1b64      	subs	r4, r4, r5
 8005fbe:	10a4      	asrs	r4, r4, #2
 8005fc0:	2600      	movs	r6, #0
 8005fc2:	42a6      	cmp	r6, r4
 8005fc4:	d105      	bne.n	8005fd2 <__libc_init_array+0x2e>
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fcc:	4798      	blx	r3
 8005fce:	3601      	adds	r6, #1
 8005fd0:	e7ee      	b.n	8005fb0 <__libc_init_array+0xc>
 8005fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd6:	4798      	blx	r3
 8005fd8:	3601      	adds	r6, #1
 8005fda:	e7f2      	b.n	8005fc2 <__libc_init_array+0x1e>
 8005fdc:	08006b6c 	.word	0x08006b6c
 8005fe0:	08006b6c 	.word	0x08006b6c
 8005fe4:	08006b6c 	.word	0x08006b6c
 8005fe8:	08006b70 	.word	0x08006b70

08005fec <memset>:
 8005fec:	4402      	add	r2, r0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d100      	bne.n	8005ff6 <memset+0xa>
 8005ff4:	4770      	bx	lr
 8005ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8005ffa:	e7f9      	b.n	8005ff0 <memset+0x4>

08005ffc <sniprintf>:
 8005ffc:	b40c      	push	{r2, r3}
 8005ffe:	b530      	push	{r4, r5, lr}
 8006000:	4b17      	ldr	r3, [pc, #92]	; (8006060 <sniprintf+0x64>)
 8006002:	1e0c      	subs	r4, r1, #0
 8006004:	681d      	ldr	r5, [r3, #0]
 8006006:	b09d      	sub	sp, #116	; 0x74
 8006008:	da08      	bge.n	800601c <sniprintf+0x20>
 800600a:	238b      	movs	r3, #139	; 0x8b
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006012:	b01d      	add	sp, #116	; 0x74
 8006014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006018:	b002      	add	sp, #8
 800601a:	4770      	bx	lr
 800601c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006020:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006024:	bf14      	ite	ne
 8006026:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800602a:	4623      	moveq	r3, r4
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	9307      	str	r3, [sp, #28]
 8006030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006034:	9002      	str	r0, [sp, #8]
 8006036:	9006      	str	r0, [sp, #24]
 8006038:	f8ad 3016 	strh.w	r3, [sp, #22]
 800603c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800603e:	ab21      	add	r3, sp, #132	; 0x84
 8006040:	a902      	add	r1, sp, #8
 8006042:	4628      	mov	r0, r5
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f000 f889 	bl	800615c <_svfiprintf_r>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	bfbc      	itt	lt
 800604e:	238b      	movlt	r3, #139	; 0x8b
 8006050:	602b      	strlt	r3, [r5, #0]
 8006052:	2c00      	cmp	r4, #0
 8006054:	d0dd      	beq.n	8006012 <sniprintf+0x16>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e7d9      	b.n	8006012 <sniprintf+0x16>
 800605e:	bf00      	nop
 8006060:	20000078 	.word	0x20000078

08006064 <siprintf>:
 8006064:	b40e      	push	{r1, r2, r3}
 8006066:	b500      	push	{lr}
 8006068:	b09c      	sub	sp, #112	; 0x70
 800606a:	ab1d      	add	r3, sp, #116	; 0x74
 800606c:	9002      	str	r0, [sp, #8]
 800606e:	9006      	str	r0, [sp, #24]
 8006070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006074:	4809      	ldr	r0, [pc, #36]	; (800609c <siprintf+0x38>)
 8006076:	9107      	str	r1, [sp, #28]
 8006078:	9104      	str	r1, [sp, #16]
 800607a:	4909      	ldr	r1, [pc, #36]	; (80060a0 <siprintf+0x3c>)
 800607c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006080:	9105      	str	r1, [sp, #20]
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	a902      	add	r1, sp, #8
 8006088:	f000 f868 	bl	800615c <_svfiprintf_r>
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	b01c      	add	sp, #112	; 0x70
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	20000078 	.word	0x20000078
 80060a0:	ffff0208 	.word	0xffff0208

080060a4 <__ssputs_r>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	688e      	ldr	r6, [r1, #8]
 80060aa:	429e      	cmp	r6, r3
 80060ac:	4682      	mov	sl, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	4690      	mov	r8, r2
 80060b2:	461f      	mov	r7, r3
 80060b4:	d838      	bhi.n	8006128 <__ssputs_r+0x84>
 80060b6:	898a      	ldrh	r2, [r1, #12]
 80060b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060bc:	d032      	beq.n	8006124 <__ssputs_r+0x80>
 80060be:	6825      	ldr	r5, [r4, #0]
 80060c0:	6909      	ldr	r1, [r1, #16]
 80060c2:	eba5 0901 	sub.w	r9, r5, r1
 80060c6:	6965      	ldr	r5, [r4, #20]
 80060c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060d0:	3301      	adds	r3, #1
 80060d2:	444b      	add	r3, r9
 80060d4:	106d      	asrs	r5, r5, #1
 80060d6:	429d      	cmp	r5, r3
 80060d8:	bf38      	it	cc
 80060da:	461d      	movcc	r5, r3
 80060dc:	0553      	lsls	r3, r2, #21
 80060de:	d531      	bpl.n	8006144 <__ssputs_r+0xa0>
 80060e0:	4629      	mov	r1, r5
 80060e2:	f000 fb47 	bl	8006774 <_malloc_r>
 80060e6:	4606      	mov	r6, r0
 80060e8:	b950      	cbnz	r0, 8006100 <__ssputs_r+0x5c>
 80060ea:	230c      	movs	r3, #12
 80060ec:	f8ca 3000 	str.w	r3, [sl]
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006100:	6921      	ldr	r1, [r4, #16]
 8006102:	464a      	mov	r2, r9
 8006104:	f000 fabe 	bl	8006684 <memcpy>
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	6126      	str	r6, [r4, #16]
 8006116:	6165      	str	r5, [r4, #20]
 8006118:	444e      	add	r6, r9
 800611a:	eba5 0509 	sub.w	r5, r5, r9
 800611e:	6026      	str	r6, [r4, #0]
 8006120:	60a5      	str	r5, [r4, #8]
 8006122:	463e      	mov	r6, r7
 8006124:	42be      	cmp	r6, r7
 8006126:	d900      	bls.n	800612a <__ssputs_r+0x86>
 8006128:	463e      	mov	r6, r7
 800612a:	4632      	mov	r2, r6
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	4641      	mov	r1, r8
 8006130:	f000 fab6 	bl	80066a0 <memmove>
 8006134:	68a3      	ldr	r3, [r4, #8]
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	1b9b      	subs	r3, r3, r6
 800613a:	4432      	add	r2, r6
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	6022      	str	r2, [r4, #0]
 8006140:	2000      	movs	r0, #0
 8006142:	e7db      	b.n	80060fc <__ssputs_r+0x58>
 8006144:	462a      	mov	r2, r5
 8006146:	f000 fb6f 	bl	8006828 <_realloc_r>
 800614a:	4606      	mov	r6, r0
 800614c:	2800      	cmp	r0, #0
 800614e:	d1e1      	bne.n	8006114 <__ssputs_r+0x70>
 8006150:	6921      	ldr	r1, [r4, #16]
 8006152:	4650      	mov	r0, sl
 8006154:	f000 fabe 	bl	80066d4 <_free_r>
 8006158:	e7c7      	b.n	80060ea <__ssputs_r+0x46>
	...

0800615c <_svfiprintf_r>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	4698      	mov	r8, r3
 8006162:	898b      	ldrh	r3, [r1, #12]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	4607      	mov	r7, r0
 800616a:	460d      	mov	r5, r1
 800616c:	4614      	mov	r4, r2
 800616e:	d50e      	bpl.n	800618e <_svfiprintf_r+0x32>
 8006170:	690b      	ldr	r3, [r1, #16]
 8006172:	b963      	cbnz	r3, 800618e <_svfiprintf_r+0x32>
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	f000 fafd 	bl	8006774 <_malloc_r>
 800617a:	6028      	str	r0, [r5, #0]
 800617c:	6128      	str	r0, [r5, #16]
 800617e:	b920      	cbnz	r0, 800618a <_svfiprintf_r+0x2e>
 8006180:	230c      	movs	r3, #12
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006188:	e0d1      	b.n	800632e <_svfiprintf_r+0x1d2>
 800618a:	2340      	movs	r3, #64	; 0x40
 800618c:	616b      	str	r3, [r5, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	2320      	movs	r3, #32
 8006194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006198:	f8cd 800c 	str.w	r8, [sp, #12]
 800619c:	2330      	movs	r3, #48	; 0x30
 800619e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006348 <_svfiprintf_r+0x1ec>
 80061a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a6:	f04f 0901 	mov.w	r9, #1
 80061aa:	4623      	mov	r3, r4
 80061ac:	469a      	mov	sl, r3
 80061ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b2:	b10a      	cbz	r2, 80061b8 <_svfiprintf_r+0x5c>
 80061b4:	2a25      	cmp	r2, #37	; 0x25
 80061b6:	d1f9      	bne.n	80061ac <_svfiprintf_r+0x50>
 80061b8:	ebba 0b04 	subs.w	fp, sl, r4
 80061bc:	d00b      	beq.n	80061d6 <_svfiprintf_r+0x7a>
 80061be:	465b      	mov	r3, fp
 80061c0:	4622      	mov	r2, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ff6d 	bl	80060a4 <__ssputs_r>
 80061ca:	3001      	adds	r0, #1
 80061cc:	f000 80aa 	beq.w	8006324 <_svfiprintf_r+0x1c8>
 80061d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d2:	445a      	add	r2, fp
 80061d4:	9209      	str	r2, [sp, #36]	; 0x24
 80061d6:	f89a 3000 	ldrb.w	r3, [sl]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80a2 	beq.w	8006324 <_svfiprintf_r+0x1c8>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ea:	f10a 0a01 	add.w	sl, sl, #1
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061f6:	931a      	str	r3, [sp, #104]	; 0x68
 80061f8:	4654      	mov	r4, sl
 80061fa:	2205      	movs	r2, #5
 80061fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006200:	4851      	ldr	r0, [pc, #324]	; (8006348 <_svfiprintf_r+0x1ec>)
 8006202:	f7f9 ffed 	bl	80001e0 <memchr>
 8006206:	9a04      	ldr	r2, [sp, #16]
 8006208:	b9d8      	cbnz	r0, 8006242 <_svfiprintf_r+0xe6>
 800620a:	06d0      	lsls	r0, r2, #27
 800620c:	bf44      	itt	mi
 800620e:	2320      	movmi	r3, #32
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006214:	0711      	lsls	r1, r2, #28
 8006216:	bf44      	itt	mi
 8006218:	232b      	movmi	r3, #43	; 0x2b
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b2a      	cmp	r3, #42	; 0x2a
 8006224:	d015      	beq.n	8006252 <_svfiprintf_r+0xf6>
 8006226:	9a07      	ldr	r2, [sp, #28]
 8006228:	4654      	mov	r4, sl
 800622a:	2000      	movs	r0, #0
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	4621      	mov	r1, r4
 8006232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006236:	3b30      	subs	r3, #48	; 0x30
 8006238:	2b09      	cmp	r3, #9
 800623a:	d94e      	bls.n	80062da <_svfiprintf_r+0x17e>
 800623c:	b1b0      	cbz	r0, 800626c <_svfiprintf_r+0x110>
 800623e:	9207      	str	r2, [sp, #28]
 8006240:	e014      	b.n	800626c <_svfiprintf_r+0x110>
 8006242:	eba0 0308 	sub.w	r3, r0, r8
 8006246:	fa09 f303 	lsl.w	r3, r9, r3
 800624a:	4313      	orrs	r3, r2
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	46a2      	mov	sl, r4
 8006250:	e7d2      	b.n	80061f8 <_svfiprintf_r+0x9c>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	1d19      	adds	r1, r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9103      	str	r1, [sp, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfbb      	ittet	lt
 800625e:	425b      	neglt	r3, r3
 8006260:	f042 0202 	orrlt.w	r2, r2, #2
 8006264:	9307      	strge	r3, [sp, #28]
 8006266:	9307      	strlt	r3, [sp, #28]
 8006268:	bfb8      	it	lt
 800626a:	9204      	strlt	r2, [sp, #16]
 800626c:	7823      	ldrb	r3, [r4, #0]
 800626e:	2b2e      	cmp	r3, #46	; 0x2e
 8006270:	d10c      	bne.n	800628c <_svfiprintf_r+0x130>
 8006272:	7863      	ldrb	r3, [r4, #1]
 8006274:	2b2a      	cmp	r3, #42	; 0x2a
 8006276:	d135      	bne.n	80062e4 <_svfiprintf_r+0x188>
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bfb8      	it	lt
 8006284:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006288:	3402      	adds	r4, #2
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006358 <_svfiprintf_r+0x1fc>
 8006290:	7821      	ldrb	r1, [r4, #0]
 8006292:	2203      	movs	r2, #3
 8006294:	4650      	mov	r0, sl
 8006296:	f7f9 ffa3 	bl	80001e0 <memchr>
 800629a:	b140      	cbz	r0, 80062ae <_svfiprintf_r+0x152>
 800629c:	2340      	movs	r3, #64	; 0x40
 800629e:	eba0 000a 	sub.w	r0, r0, sl
 80062a2:	fa03 f000 	lsl.w	r0, r3, r0
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	4303      	orrs	r3, r0
 80062aa:	3401      	adds	r4, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b2:	4826      	ldr	r0, [pc, #152]	; (800634c <_svfiprintf_r+0x1f0>)
 80062b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062b8:	2206      	movs	r2, #6
 80062ba:	f7f9 ff91 	bl	80001e0 <memchr>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d038      	beq.n	8006334 <_svfiprintf_r+0x1d8>
 80062c2:	4b23      	ldr	r3, [pc, #140]	; (8006350 <_svfiprintf_r+0x1f4>)
 80062c4:	bb1b      	cbnz	r3, 800630e <_svfiprintf_r+0x1b2>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	3307      	adds	r3, #7
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	3308      	adds	r3, #8
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	4433      	add	r3, r6
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	e767      	b.n	80061aa <_svfiprintf_r+0x4e>
 80062da:	fb0c 3202 	mla	r2, ip, r2, r3
 80062de:	460c      	mov	r4, r1
 80062e0:	2001      	movs	r0, #1
 80062e2:	e7a5      	b.n	8006230 <_svfiprintf_r+0xd4>
 80062e4:	2300      	movs	r3, #0
 80062e6:	3401      	adds	r4, #1
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	4619      	mov	r1, r3
 80062ec:	f04f 0c0a 	mov.w	ip, #10
 80062f0:	4620      	mov	r0, r4
 80062f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f6:	3a30      	subs	r2, #48	; 0x30
 80062f8:	2a09      	cmp	r2, #9
 80062fa:	d903      	bls.n	8006304 <_svfiprintf_r+0x1a8>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0c5      	beq.n	800628c <_svfiprintf_r+0x130>
 8006300:	9105      	str	r1, [sp, #20]
 8006302:	e7c3      	b.n	800628c <_svfiprintf_r+0x130>
 8006304:	fb0c 2101 	mla	r1, ip, r1, r2
 8006308:	4604      	mov	r4, r0
 800630a:	2301      	movs	r3, #1
 800630c:	e7f0      	b.n	80062f0 <_svfiprintf_r+0x194>
 800630e:	ab03      	add	r3, sp, #12
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	462a      	mov	r2, r5
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <_svfiprintf_r+0x1f8>)
 8006316:	a904      	add	r1, sp, #16
 8006318:	4638      	mov	r0, r7
 800631a:	f3af 8000 	nop.w
 800631e:	1c42      	adds	r2, r0, #1
 8006320:	4606      	mov	r6, r0
 8006322:	d1d6      	bne.n	80062d2 <_svfiprintf_r+0x176>
 8006324:	89ab      	ldrh	r3, [r5, #12]
 8006326:	065b      	lsls	r3, r3, #25
 8006328:	f53f af2c 	bmi.w	8006184 <_svfiprintf_r+0x28>
 800632c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800632e:	b01d      	add	sp, #116	; 0x74
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	ab03      	add	r3, sp, #12
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	462a      	mov	r2, r5
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <_svfiprintf_r+0x1f8>)
 800633c:	a904      	add	r1, sp, #16
 800633e:	4638      	mov	r0, r7
 8006340:	f000 f87a 	bl	8006438 <_printf_i>
 8006344:	e7eb      	b.n	800631e <_svfiprintf_r+0x1c2>
 8006346:	bf00      	nop
 8006348:	08006b30 	.word	0x08006b30
 800634c:	08006b3a 	.word	0x08006b3a
 8006350:	00000000 	.word	0x00000000
 8006354:	080060a5 	.word	0x080060a5
 8006358:	08006b36 	.word	0x08006b36

0800635c <_printf_common>:
 800635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006360:	4616      	mov	r6, r2
 8006362:	4699      	mov	r9, r3
 8006364:	688a      	ldr	r2, [r1, #8]
 8006366:	690b      	ldr	r3, [r1, #16]
 8006368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800636c:	4293      	cmp	r3, r2
 800636e:	bfb8      	it	lt
 8006370:	4613      	movlt	r3, r2
 8006372:	6033      	str	r3, [r6, #0]
 8006374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006378:	4607      	mov	r7, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b10a      	cbz	r2, 8006382 <_printf_common+0x26>
 800637e:	3301      	adds	r3, #1
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	0699      	lsls	r1, r3, #26
 8006386:	bf42      	ittt	mi
 8006388:	6833      	ldrmi	r3, [r6, #0]
 800638a:	3302      	addmi	r3, #2
 800638c:	6033      	strmi	r3, [r6, #0]
 800638e:	6825      	ldr	r5, [r4, #0]
 8006390:	f015 0506 	ands.w	r5, r5, #6
 8006394:	d106      	bne.n	80063a4 <_printf_common+0x48>
 8006396:	f104 0a19 	add.w	sl, r4, #25
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	6832      	ldr	r2, [r6, #0]
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dc26      	bgt.n	80063f2 <_printf_common+0x96>
 80063a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063a8:	1e13      	subs	r3, r2, #0
 80063aa:	6822      	ldr	r2, [r4, #0]
 80063ac:	bf18      	it	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	0692      	lsls	r2, r2, #26
 80063b2:	d42b      	bmi.n	800640c <_printf_common+0xb0>
 80063b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b8:	4649      	mov	r1, r9
 80063ba:	4638      	mov	r0, r7
 80063bc:	47c0      	blx	r8
 80063be:	3001      	adds	r0, #1
 80063c0:	d01e      	beq.n	8006400 <_printf_common+0xa4>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	68e5      	ldr	r5, [r4, #12]
 80063c6:	6832      	ldr	r2, [r6, #0]
 80063c8:	f003 0306 	and.w	r3, r3, #6
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	bf08      	it	eq
 80063d0:	1aad      	subeq	r5, r5, r2
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	6922      	ldr	r2, [r4, #16]
 80063d6:	bf0c      	ite	eq
 80063d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063dc:	2500      	movne	r5, #0
 80063de:	4293      	cmp	r3, r2
 80063e0:	bfc4      	itt	gt
 80063e2:	1a9b      	subgt	r3, r3, r2
 80063e4:	18ed      	addgt	r5, r5, r3
 80063e6:	2600      	movs	r6, #0
 80063e8:	341a      	adds	r4, #26
 80063ea:	42b5      	cmp	r5, r6
 80063ec:	d11a      	bne.n	8006424 <_printf_common+0xc8>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e008      	b.n	8006404 <_printf_common+0xa8>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4652      	mov	r2, sl
 80063f6:	4649      	mov	r1, r9
 80063f8:	4638      	mov	r0, r7
 80063fa:	47c0      	blx	r8
 80063fc:	3001      	adds	r0, #1
 80063fe:	d103      	bne.n	8006408 <_printf_common+0xac>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	3501      	adds	r5, #1
 800640a:	e7c6      	b.n	800639a <_printf_common+0x3e>
 800640c:	18e1      	adds	r1, r4, r3
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	2030      	movs	r0, #48	; 0x30
 8006412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006416:	4422      	add	r2, r4
 8006418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800641c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006420:	3302      	adds	r3, #2
 8006422:	e7c7      	b.n	80063b4 <_printf_common+0x58>
 8006424:	2301      	movs	r3, #1
 8006426:	4622      	mov	r2, r4
 8006428:	4649      	mov	r1, r9
 800642a:	4638      	mov	r0, r7
 800642c:	47c0      	blx	r8
 800642e:	3001      	adds	r0, #1
 8006430:	d0e6      	beq.n	8006400 <_printf_common+0xa4>
 8006432:	3601      	adds	r6, #1
 8006434:	e7d9      	b.n	80063ea <_printf_common+0x8e>
	...

08006438 <_printf_i>:
 8006438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	460c      	mov	r4, r1
 800643e:	4691      	mov	r9, r2
 8006440:	7e27      	ldrb	r7, [r4, #24]
 8006442:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006444:	2f78      	cmp	r7, #120	; 0x78
 8006446:	4680      	mov	r8, r0
 8006448:	469a      	mov	sl, r3
 800644a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800644e:	d807      	bhi.n	8006460 <_printf_i+0x28>
 8006450:	2f62      	cmp	r7, #98	; 0x62
 8006452:	d80a      	bhi.n	800646a <_printf_i+0x32>
 8006454:	2f00      	cmp	r7, #0
 8006456:	f000 80d8 	beq.w	800660a <_printf_i+0x1d2>
 800645a:	2f58      	cmp	r7, #88	; 0x58
 800645c:	f000 80a3 	beq.w	80065a6 <_printf_i+0x16e>
 8006460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006468:	e03a      	b.n	80064e0 <_printf_i+0xa8>
 800646a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800646e:	2b15      	cmp	r3, #21
 8006470:	d8f6      	bhi.n	8006460 <_printf_i+0x28>
 8006472:	a001      	add	r0, pc, #4	; (adr r0, 8006478 <_printf_i+0x40>)
 8006474:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006478:	080064d1 	.word	0x080064d1
 800647c:	080064e5 	.word	0x080064e5
 8006480:	08006461 	.word	0x08006461
 8006484:	08006461 	.word	0x08006461
 8006488:	08006461 	.word	0x08006461
 800648c:	08006461 	.word	0x08006461
 8006490:	080064e5 	.word	0x080064e5
 8006494:	08006461 	.word	0x08006461
 8006498:	08006461 	.word	0x08006461
 800649c:	08006461 	.word	0x08006461
 80064a0:	08006461 	.word	0x08006461
 80064a4:	080065f1 	.word	0x080065f1
 80064a8:	08006515 	.word	0x08006515
 80064ac:	080065d3 	.word	0x080065d3
 80064b0:	08006461 	.word	0x08006461
 80064b4:	08006461 	.word	0x08006461
 80064b8:	08006613 	.word	0x08006613
 80064bc:	08006461 	.word	0x08006461
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006461 	.word	0x08006461
 80064c8:	08006461 	.word	0x08006461
 80064cc:	080065db 	.word	0x080065db
 80064d0:	680b      	ldr	r3, [r1, #0]
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	600a      	str	r2, [r1, #0]
 80064d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0a3      	b.n	800662c <_printf_i+0x1f4>
 80064e4:	6825      	ldr	r5, [r4, #0]
 80064e6:	6808      	ldr	r0, [r1, #0]
 80064e8:	062e      	lsls	r6, r5, #24
 80064ea:	f100 0304 	add.w	r3, r0, #4
 80064ee:	d50a      	bpl.n	8006506 <_printf_i+0xce>
 80064f0:	6805      	ldr	r5, [r0, #0]
 80064f2:	600b      	str	r3, [r1, #0]
 80064f4:	2d00      	cmp	r5, #0
 80064f6:	da03      	bge.n	8006500 <_printf_i+0xc8>
 80064f8:	232d      	movs	r3, #45	; 0x2d
 80064fa:	426d      	negs	r5, r5
 80064fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006500:	485e      	ldr	r0, [pc, #376]	; (800667c <_printf_i+0x244>)
 8006502:	230a      	movs	r3, #10
 8006504:	e019      	b.n	800653a <_printf_i+0x102>
 8006506:	f015 0f40 	tst.w	r5, #64	; 0x40
 800650a:	6805      	ldr	r5, [r0, #0]
 800650c:	600b      	str	r3, [r1, #0]
 800650e:	bf18      	it	ne
 8006510:	b22d      	sxthne	r5, r5
 8006512:	e7ef      	b.n	80064f4 <_printf_i+0xbc>
 8006514:	680b      	ldr	r3, [r1, #0]
 8006516:	6825      	ldr	r5, [r4, #0]
 8006518:	1d18      	adds	r0, r3, #4
 800651a:	6008      	str	r0, [r1, #0]
 800651c:	0628      	lsls	r0, r5, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0xec>
 8006520:	681d      	ldr	r5, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0xf2>
 8006524:	0669      	lsls	r1, r5, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0xe8>
 8006528:	881d      	ldrh	r5, [r3, #0]
 800652a:	4854      	ldr	r0, [pc, #336]	; (800667c <_printf_i+0x244>)
 800652c:	2f6f      	cmp	r7, #111	; 0x6f
 800652e:	bf0c      	ite	eq
 8006530:	2308      	moveq	r3, #8
 8006532:	230a      	movne	r3, #10
 8006534:	2100      	movs	r1, #0
 8006536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800653a:	6866      	ldr	r6, [r4, #4]
 800653c:	60a6      	str	r6, [r4, #8]
 800653e:	2e00      	cmp	r6, #0
 8006540:	bfa2      	ittt	ge
 8006542:	6821      	ldrge	r1, [r4, #0]
 8006544:	f021 0104 	bicge.w	r1, r1, #4
 8006548:	6021      	strge	r1, [r4, #0]
 800654a:	b90d      	cbnz	r5, 8006550 <_printf_i+0x118>
 800654c:	2e00      	cmp	r6, #0
 800654e:	d04d      	beq.n	80065ec <_printf_i+0x1b4>
 8006550:	4616      	mov	r6, r2
 8006552:	fbb5 f1f3 	udiv	r1, r5, r3
 8006556:	fb03 5711 	mls	r7, r3, r1, r5
 800655a:	5dc7      	ldrb	r7, [r0, r7]
 800655c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006560:	462f      	mov	r7, r5
 8006562:	42bb      	cmp	r3, r7
 8006564:	460d      	mov	r5, r1
 8006566:	d9f4      	bls.n	8006552 <_printf_i+0x11a>
 8006568:	2b08      	cmp	r3, #8
 800656a:	d10b      	bne.n	8006584 <_printf_i+0x14c>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	07df      	lsls	r7, r3, #31
 8006570:	d508      	bpl.n	8006584 <_printf_i+0x14c>
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	6861      	ldr	r1, [r4, #4]
 8006576:	4299      	cmp	r1, r3
 8006578:	bfde      	ittt	le
 800657a:	2330      	movle	r3, #48	; 0x30
 800657c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006580:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006584:	1b92      	subs	r2, r2, r6
 8006586:	6122      	str	r2, [r4, #16]
 8006588:	f8cd a000 	str.w	sl, [sp]
 800658c:	464b      	mov	r3, r9
 800658e:	aa03      	add	r2, sp, #12
 8006590:	4621      	mov	r1, r4
 8006592:	4640      	mov	r0, r8
 8006594:	f7ff fee2 	bl	800635c <_printf_common>
 8006598:	3001      	adds	r0, #1
 800659a:	d14c      	bne.n	8006636 <_printf_i+0x1fe>
 800659c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a0:	b004      	add	sp, #16
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	4835      	ldr	r0, [pc, #212]	; (800667c <_printf_i+0x244>)
 80065a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	680e      	ldr	r6, [r1, #0]
 80065b0:	061f      	lsls	r7, r3, #24
 80065b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80065b6:	600e      	str	r6, [r1, #0]
 80065b8:	d514      	bpl.n	80065e4 <_printf_i+0x1ac>
 80065ba:	07d9      	lsls	r1, r3, #31
 80065bc:	bf44      	itt	mi
 80065be:	f043 0320 	orrmi.w	r3, r3, #32
 80065c2:	6023      	strmi	r3, [r4, #0]
 80065c4:	b91d      	cbnz	r5, 80065ce <_printf_i+0x196>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f023 0320 	bic.w	r3, r3, #32
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	2310      	movs	r3, #16
 80065d0:	e7b0      	b.n	8006534 <_printf_i+0xfc>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f043 0320 	orr.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	2378      	movs	r3, #120	; 0x78
 80065dc:	4828      	ldr	r0, [pc, #160]	; (8006680 <_printf_i+0x248>)
 80065de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065e2:	e7e3      	b.n	80065ac <_printf_i+0x174>
 80065e4:	065e      	lsls	r6, r3, #25
 80065e6:	bf48      	it	mi
 80065e8:	b2ad      	uxthmi	r5, r5
 80065ea:	e7e6      	b.n	80065ba <_printf_i+0x182>
 80065ec:	4616      	mov	r6, r2
 80065ee:	e7bb      	b.n	8006568 <_printf_i+0x130>
 80065f0:	680b      	ldr	r3, [r1, #0]
 80065f2:	6826      	ldr	r6, [r4, #0]
 80065f4:	6960      	ldr	r0, [r4, #20]
 80065f6:	1d1d      	adds	r5, r3, #4
 80065f8:	600d      	str	r5, [r1, #0]
 80065fa:	0635      	lsls	r5, r6, #24
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	d501      	bpl.n	8006604 <_printf_i+0x1cc>
 8006600:	6018      	str	r0, [r3, #0]
 8006602:	e002      	b.n	800660a <_printf_i+0x1d2>
 8006604:	0671      	lsls	r1, r6, #25
 8006606:	d5fb      	bpl.n	8006600 <_printf_i+0x1c8>
 8006608:	8018      	strh	r0, [r3, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	4616      	mov	r6, r2
 8006610:	e7ba      	b.n	8006588 <_printf_i+0x150>
 8006612:	680b      	ldr	r3, [r1, #0]
 8006614:	1d1a      	adds	r2, r3, #4
 8006616:	600a      	str	r2, [r1, #0]
 8006618:	681e      	ldr	r6, [r3, #0]
 800661a:	6862      	ldr	r2, [r4, #4]
 800661c:	2100      	movs	r1, #0
 800661e:	4630      	mov	r0, r6
 8006620:	f7f9 fdde 	bl	80001e0 <memchr>
 8006624:	b108      	cbz	r0, 800662a <_printf_i+0x1f2>
 8006626:	1b80      	subs	r0, r0, r6
 8006628:	6060      	str	r0, [r4, #4]
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	2300      	movs	r3, #0
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006634:	e7a8      	b.n	8006588 <_printf_i+0x150>
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	4632      	mov	r2, r6
 800663a:	4649      	mov	r1, r9
 800663c:	4640      	mov	r0, r8
 800663e:	47d0      	blx	sl
 8006640:	3001      	adds	r0, #1
 8006642:	d0ab      	beq.n	800659c <_printf_i+0x164>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	079b      	lsls	r3, r3, #30
 8006648:	d413      	bmi.n	8006672 <_printf_i+0x23a>
 800664a:	68e0      	ldr	r0, [r4, #12]
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	4298      	cmp	r0, r3
 8006650:	bfb8      	it	lt
 8006652:	4618      	movlt	r0, r3
 8006654:	e7a4      	b.n	80065a0 <_printf_i+0x168>
 8006656:	2301      	movs	r3, #1
 8006658:	4632      	mov	r2, r6
 800665a:	4649      	mov	r1, r9
 800665c:	4640      	mov	r0, r8
 800665e:	47d0      	blx	sl
 8006660:	3001      	adds	r0, #1
 8006662:	d09b      	beq.n	800659c <_printf_i+0x164>
 8006664:	3501      	adds	r5, #1
 8006666:	68e3      	ldr	r3, [r4, #12]
 8006668:	9903      	ldr	r1, [sp, #12]
 800666a:	1a5b      	subs	r3, r3, r1
 800666c:	42ab      	cmp	r3, r5
 800666e:	dcf2      	bgt.n	8006656 <_printf_i+0x21e>
 8006670:	e7eb      	b.n	800664a <_printf_i+0x212>
 8006672:	2500      	movs	r5, #0
 8006674:	f104 0619 	add.w	r6, r4, #25
 8006678:	e7f5      	b.n	8006666 <_printf_i+0x22e>
 800667a:	bf00      	nop
 800667c:	08006b41 	.word	0x08006b41
 8006680:	08006b52 	.word	0x08006b52

08006684 <memcpy>:
 8006684:	440a      	add	r2, r1
 8006686:	4291      	cmp	r1, r2
 8006688:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800668c:	d100      	bne.n	8006690 <memcpy+0xc>
 800668e:	4770      	bx	lr
 8006690:	b510      	push	{r4, lr}
 8006692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800669a:	4291      	cmp	r1, r2
 800669c:	d1f9      	bne.n	8006692 <memcpy+0xe>
 800669e:	bd10      	pop	{r4, pc}

080066a0 <memmove>:
 80066a0:	4288      	cmp	r0, r1
 80066a2:	b510      	push	{r4, lr}
 80066a4:	eb01 0402 	add.w	r4, r1, r2
 80066a8:	d902      	bls.n	80066b0 <memmove+0x10>
 80066aa:	4284      	cmp	r4, r0
 80066ac:	4623      	mov	r3, r4
 80066ae:	d807      	bhi.n	80066c0 <memmove+0x20>
 80066b0:	1e43      	subs	r3, r0, #1
 80066b2:	42a1      	cmp	r1, r4
 80066b4:	d008      	beq.n	80066c8 <memmove+0x28>
 80066b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066be:	e7f8      	b.n	80066b2 <memmove+0x12>
 80066c0:	4402      	add	r2, r0
 80066c2:	4601      	mov	r1, r0
 80066c4:	428a      	cmp	r2, r1
 80066c6:	d100      	bne.n	80066ca <memmove+0x2a>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066d2:	e7f7      	b.n	80066c4 <memmove+0x24>

080066d4 <_free_r>:
 80066d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066d6:	2900      	cmp	r1, #0
 80066d8:	d048      	beq.n	800676c <_free_r+0x98>
 80066da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066de:	9001      	str	r0, [sp, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f1a1 0404 	sub.w	r4, r1, #4
 80066e6:	bfb8      	it	lt
 80066e8:	18e4      	addlt	r4, r4, r3
 80066ea:	f000 f8d3 	bl	8006894 <__malloc_lock>
 80066ee:	4a20      	ldr	r2, [pc, #128]	; (8006770 <_free_r+0x9c>)
 80066f0:	9801      	ldr	r0, [sp, #4]
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	4615      	mov	r5, r2
 80066f6:	b933      	cbnz	r3, 8006706 <_free_r+0x32>
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	6014      	str	r4, [r2, #0]
 80066fc:	b003      	add	sp, #12
 80066fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006702:	f000 b8cd 	b.w	80068a0 <__malloc_unlock>
 8006706:	42a3      	cmp	r3, r4
 8006708:	d90b      	bls.n	8006722 <_free_r+0x4e>
 800670a:	6821      	ldr	r1, [r4, #0]
 800670c:	1862      	adds	r2, r4, r1
 800670e:	4293      	cmp	r3, r2
 8006710:	bf04      	itt	eq
 8006712:	681a      	ldreq	r2, [r3, #0]
 8006714:	685b      	ldreq	r3, [r3, #4]
 8006716:	6063      	str	r3, [r4, #4]
 8006718:	bf04      	itt	eq
 800671a:	1852      	addeq	r2, r2, r1
 800671c:	6022      	streq	r2, [r4, #0]
 800671e:	602c      	str	r4, [r5, #0]
 8006720:	e7ec      	b.n	80066fc <_free_r+0x28>
 8006722:	461a      	mov	r2, r3
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	b10b      	cbz	r3, 800672c <_free_r+0x58>
 8006728:	42a3      	cmp	r3, r4
 800672a:	d9fa      	bls.n	8006722 <_free_r+0x4e>
 800672c:	6811      	ldr	r1, [r2, #0]
 800672e:	1855      	adds	r5, r2, r1
 8006730:	42a5      	cmp	r5, r4
 8006732:	d10b      	bne.n	800674c <_free_r+0x78>
 8006734:	6824      	ldr	r4, [r4, #0]
 8006736:	4421      	add	r1, r4
 8006738:	1854      	adds	r4, r2, r1
 800673a:	42a3      	cmp	r3, r4
 800673c:	6011      	str	r1, [r2, #0]
 800673e:	d1dd      	bne.n	80066fc <_free_r+0x28>
 8006740:	681c      	ldr	r4, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	6053      	str	r3, [r2, #4]
 8006746:	4421      	add	r1, r4
 8006748:	6011      	str	r1, [r2, #0]
 800674a:	e7d7      	b.n	80066fc <_free_r+0x28>
 800674c:	d902      	bls.n	8006754 <_free_r+0x80>
 800674e:	230c      	movs	r3, #12
 8006750:	6003      	str	r3, [r0, #0]
 8006752:	e7d3      	b.n	80066fc <_free_r+0x28>
 8006754:	6825      	ldr	r5, [r4, #0]
 8006756:	1961      	adds	r1, r4, r5
 8006758:	428b      	cmp	r3, r1
 800675a:	bf04      	itt	eq
 800675c:	6819      	ldreq	r1, [r3, #0]
 800675e:	685b      	ldreq	r3, [r3, #4]
 8006760:	6063      	str	r3, [r4, #4]
 8006762:	bf04      	itt	eq
 8006764:	1949      	addeq	r1, r1, r5
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	6054      	str	r4, [r2, #4]
 800676a:	e7c7      	b.n	80066fc <_free_r+0x28>
 800676c:	b003      	add	sp, #12
 800676e:	bd30      	pop	{r4, r5, pc}
 8006770:	20000130 	.word	0x20000130

08006774 <_malloc_r>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	1ccd      	adds	r5, r1, #3
 8006778:	f025 0503 	bic.w	r5, r5, #3
 800677c:	3508      	adds	r5, #8
 800677e:	2d0c      	cmp	r5, #12
 8006780:	bf38      	it	cc
 8006782:	250c      	movcc	r5, #12
 8006784:	2d00      	cmp	r5, #0
 8006786:	4606      	mov	r6, r0
 8006788:	db01      	blt.n	800678e <_malloc_r+0x1a>
 800678a:	42a9      	cmp	r1, r5
 800678c:	d903      	bls.n	8006796 <_malloc_r+0x22>
 800678e:	230c      	movs	r3, #12
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	2000      	movs	r0, #0
 8006794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006796:	f000 f87d 	bl	8006894 <__malloc_lock>
 800679a:	4921      	ldr	r1, [pc, #132]	; (8006820 <_malloc_r+0xac>)
 800679c:	680a      	ldr	r2, [r1, #0]
 800679e:	4614      	mov	r4, r2
 80067a0:	b99c      	cbnz	r4, 80067ca <_malloc_r+0x56>
 80067a2:	4f20      	ldr	r7, [pc, #128]	; (8006824 <_malloc_r+0xb0>)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	b923      	cbnz	r3, 80067b2 <_malloc_r+0x3e>
 80067a8:	4621      	mov	r1, r4
 80067aa:	4630      	mov	r0, r6
 80067ac:	f000 f862 	bl	8006874 <_sbrk_r>
 80067b0:	6038      	str	r0, [r7, #0]
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	f000 f85d 	bl	8006874 <_sbrk_r>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d123      	bne.n	8006806 <_malloc_r+0x92>
 80067be:	230c      	movs	r3, #12
 80067c0:	6033      	str	r3, [r6, #0]
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 f86c 	bl	80068a0 <__malloc_unlock>
 80067c8:	e7e3      	b.n	8006792 <_malloc_r+0x1e>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	1b5b      	subs	r3, r3, r5
 80067ce:	d417      	bmi.n	8006800 <_malloc_r+0x8c>
 80067d0:	2b0b      	cmp	r3, #11
 80067d2:	d903      	bls.n	80067dc <_malloc_r+0x68>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	441c      	add	r4, r3
 80067d8:	6025      	str	r5, [r4, #0]
 80067da:	e004      	b.n	80067e6 <_malloc_r+0x72>
 80067dc:	6863      	ldr	r3, [r4, #4]
 80067de:	42a2      	cmp	r2, r4
 80067e0:	bf0c      	ite	eq
 80067e2:	600b      	streq	r3, [r1, #0]
 80067e4:	6053      	strne	r3, [r2, #4]
 80067e6:	4630      	mov	r0, r6
 80067e8:	f000 f85a 	bl	80068a0 <__malloc_unlock>
 80067ec:	f104 000b 	add.w	r0, r4, #11
 80067f0:	1d23      	adds	r3, r4, #4
 80067f2:	f020 0007 	bic.w	r0, r0, #7
 80067f6:	1ac2      	subs	r2, r0, r3
 80067f8:	d0cc      	beq.n	8006794 <_malloc_r+0x20>
 80067fa:	1a1b      	subs	r3, r3, r0
 80067fc:	50a3      	str	r3, [r4, r2]
 80067fe:	e7c9      	b.n	8006794 <_malloc_r+0x20>
 8006800:	4622      	mov	r2, r4
 8006802:	6864      	ldr	r4, [r4, #4]
 8006804:	e7cc      	b.n	80067a0 <_malloc_r+0x2c>
 8006806:	1cc4      	adds	r4, r0, #3
 8006808:	f024 0403 	bic.w	r4, r4, #3
 800680c:	42a0      	cmp	r0, r4
 800680e:	d0e3      	beq.n	80067d8 <_malloc_r+0x64>
 8006810:	1a21      	subs	r1, r4, r0
 8006812:	4630      	mov	r0, r6
 8006814:	f000 f82e 	bl	8006874 <_sbrk_r>
 8006818:	3001      	adds	r0, #1
 800681a:	d1dd      	bne.n	80067d8 <_malloc_r+0x64>
 800681c:	e7cf      	b.n	80067be <_malloc_r+0x4a>
 800681e:	bf00      	nop
 8006820:	20000130 	.word	0x20000130
 8006824:	20000134 	.word	0x20000134

08006828 <_realloc_r>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	4607      	mov	r7, r0
 800682c:	4614      	mov	r4, r2
 800682e:	460e      	mov	r6, r1
 8006830:	b921      	cbnz	r1, 800683c <_realloc_r+0x14>
 8006832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006836:	4611      	mov	r1, r2
 8006838:	f7ff bf9c 	b.w	8006774 <_malloc_r>
 800683c:	b922      	cbnz	r2, 8006848 <_realloc_r+0x20>
 800683e:	f7ff ff49 	bl	80066d4 <_free_r>
 8006842:	4625      	mov	r5, r4
 8006844:	4628      	mov	r0, r5
 8006846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006848:	f000 f830 	bl	80068ac <_malloc_usable_size_r>
 800684c:	42a0      	cmp	r0, r4
 800684e:	d20f      	bcs.n	8006870 <_realloc_r+0x48>
 8006850:	4621      	mov	r1, r4
 8006852:	4638      	mov	r0, r7
 8006854:	f7ff ff8e 	bl	8006774 <_malloc_r>
 8006858:	4605      	mov	r5, r0
 800685a:	2800      	cmp	r0, #0
 800685c:	d0f2      	beq.n	8006844 <_realloc_r+0x1c>
 800685e:	4631      	mov	r1, r6
 8006860:	4622      	mov	r2, r4
 8006862:	f7ff ff0f 	bl	8006684 <memcpy>
 8006866:	4631      	mov	r1, r6
 8006868:	4638      	mov	r0, r7
 800686a:	f7ff ff33 	bl	80066d4 <_free_r>
 800686e:	e7e9      	b.n	8006844 <_realloc_r+0x1c>
 8006870:	4635      	mov	r5, r6
 8006872:	e7e7      	b.n	8006844 <_realloc_r+0x1c>

08006874 <_sbrk_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d06      	ldr	r5, [pc, #24]	; (8006890 <_sbrk_r+0x1c>)
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	f7fa ffe0 	bl	8001844 <_sbrk>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_sbrk_r+0x1a>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_sbrk_r+0x1a>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	200003cc 	.word	0x200003cc

08006894 <__malloc_lock>:
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <__malloc_lock+0x8>)
 8006896:	f000 b811 	b.w	80068bc <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	200003d4 	.word	0x200003d4

080068a0 <__malloc_unlock>:
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <__malloc_unlock+0x8>)
 80068a2:	f000 b80c 	b.w	80068be <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	200003d4 	.word	0x200003d4

080068ac <_malloc_usable_size_r>:
 80068ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068b0:	1f18      	subs	r0, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bfbc      	itt	lt
 80068b6:	580b      	ldrlt	r3, [r1, r0]
 80068b8:	18c0      	addlt	r0, r0, r3
 80068ba:	4770      	bx	lr

080068bc <__retarget_lock_acquire_recursive>:
 80068bc:	4770      	bx	lr

080068be <__retarget_lock_release_recursive>:
 80068be:	4770      	bx	lr

080068c0 <_init>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	bf00      	nop
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr

080068cc <_fini>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr
