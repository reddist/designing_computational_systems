
lab4_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001648  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a8  080074a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b0  080074b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080074b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000560  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005e0  200005e0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108f7  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002671  00000000  00000000  000309a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  00033018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021673  00000000  00000000  00033b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010301  00000000  00000000  000551eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c528a  00000000  00000000  000654ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a776  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000a68  00000000  00000000  0012a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000030c0  00000000  00000000  0012b238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e48 	.word	0x08005e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005e48 	.word	0x08005e48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b2e      	ldr	r3, [pc, #184]	; (800064c <MX_GPIO_Init+0xd4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <MX_GPIO_Init+0xd4>)
 8000598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <MX_GPIO_Init+0xd4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_GPIO_Init+0xd4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a26      	ldr	r2, [pc, #152]	; (800064c <MX_GPIO_Init+0xd4>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_GPIO_Init+0xd4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_GPIO_Init+0xd4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a1f      	ldr	r2, [pc, #124]	; (800064c <MX_GPIO_Init+0xd4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_GPIO_Init+0xd4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_GPIO_Init+0xd4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_GPIO_Init+0xd4>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_GPIO_Init+0xd4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_GPIO_Init+0xd4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a11      	ldr	r2, [pc, #68]	; (800064c <MX_GPIO_Init+0xd4>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_GPIO_Init+0xd4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <MX_GPIO_Init+0xd8>)
 8000622:	f001 fb95 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000626:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_GPIO_Init+0xd8>)
 8000640:	f001 f9ea 	bl	8001a18 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020c00 	.word	0x40020c00

08000654 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f001 fb77 	bl	8001d84 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 fc36 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200004b4 	.word	0x200004b4
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <HAL_I2C_MspInit+0xa4>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d13c      	bne.n	800074c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <HAL_I2C_MspInit+0xa8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <HAL_I2C_MspInit+0xa8>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <HAL_I2C_MspInit+0xa8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <HAL_I2C_MspInit+0xac>)
 800070c:	f001 f984 	bl	8001a18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_I2C_MspInit+0xa8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <HAL_I2C_MspInit+0xa8>)
 800071a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_I2C_MspInit+0xa8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	201f      	movs	r0, #31
 8000732:	f001 f90a 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000736:	201f      	movs	r0, #31
 8000738:	f001 f923 	bl	8001982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2020      	movs	r0, #32
 8000742:	f001 f902 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000746:	2020      	movs	r0, #32
 8000748:	f001 f91b 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40005400 	.word	0x40005400
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400

08000760 <Check_Row>:

#define KBRD_RD_ADDR 0xE3
#define KBRD_WR_ADDR 0xE2


uint8_t Check_Row(uint8_t Nrow) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
 uint8_t Nkey = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
 HAL_StatusTypeDef ret = HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	73bb      	strb	r3, [r7, #14]
 uint8_t buf[4] = { 0, 0, 0, 0 };
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 uint8_t kbd_in;

 buf[0] = Nrow;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	723b      	strb	r3, [r7, #8]
 ret = PCA9538_Write_Register(KBRD_WR_ADDR, CONFIG, &buf);
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	461a      	mov	r2, r3
 8000780:	2103      	movs	r1, #3
 8000782:	20e2      	movs	r0, #226	; 0xe2
 8000784:	f000 fdde 	bl	8001344 <PCA9538_Write_Register>
 8000788:	4603      	mov	r3, r0
 800078a:	73bb      	strb	r3, [r7, #14]
 if (ret != HAL_OK) {
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <Check_Row+0x38>
  UART_Transmit((uint8_t*) "Error write output\r\n");
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <Check_Row+0x94>)
 8000794:	f000 fe08 	bl	80013a8 <UART_Transmit>
 }

 ret = PCA9538_Write_Register(KBRD_WR_ADDR, OUTPUT_PORT, buf);
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	461a      	mov	r2, r3
 800079e:	2101      	movs	r1, #1
 80007a0:	20e2      	movs	r0, #226	; 0xe2
 80007a2:	f000 fdcf 	bl	8001344 <PCA9538_Write_Register>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73bb      	strb	r3, [r7, #14]
 if (ret != HAL_OK) {
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <Check_Row+0x56>
  UART_Transmit((uint8_t*) "Error write output\r\n");
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <Check_Row+0x94>)
 80007b2:	f000 fdf9 	bl	80013a8 <UART_Transmit>
 }

 buf[0] = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	723b      	strb	r3, [r7, #8]
 ret = PCA9538_Read_Inputs(KBRD_RD_ADDR, buf);
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	20e3      	movs	r0, #227	; 0xe3
 80007c2:	f000 fddf 	bl	8001384 <PCA9538_Read_Inputs>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73bb      	strb	r3, [r7, #14]
 if (ret != HAL_OK) {
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <Check_Row+0x76>
  UART_Transmit((uint8_t*) "Read error\r\n");
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <Check_Row+0x98>)
 80007d2:	f000 fde9 	bl	80013a8 <UART_Transmit>
 }
 kbd_in = buf[0] & 0x70;
 80007d6:	7a3b      	ldrb	r3, [r7, #8]
 80007d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007dc:	737b      	strb	r3, [r7, #13]
 Nkey = 0x0F ^ (kbd_in >> 4);
 80007de:	7b7b      	ldrb	r3, [r7, #13]
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f083 030f 	eor.w	r3, r3, #15
 80007e8:	73fb      	strb	r3, [r7, #15]
 return Nkey;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08005e60 	.word	0x08005e60
 80007f8:	08005e78 	.word	0x08005e78

080007fc <display_str>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// --DRIVERS--

void display_str(char* str, char* str2, FontDef font, OLED_COLOR color) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	4639      	mov	r1, r7
 8000808:	e881 000c 	stmia.w	r1, {r2, r3}
	oled_Fill(Black);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fc07 	bl	8001020 <oled_Fill>
	oled_SetCursor(0,0);
 8000812:	2100      	movs	r1, #0
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fd5d 	bl	80012d4 <oled_SetCursor>
	oled_WriteString(str,font,color);
 800081a:	7e3b      	ldrb	r3, [r7, #24]
 800081c:	463a      	mov	r2, r7
 800081e:	ca06      	ldmia	r2, {r1, r2}
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f000 fd31 	bl	8001288 <oled_WriteString>
	oled_SetCursor(0,20);
 8000826:	2114      	movs	r1, #20
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fd53 	bl	80012d4 <oled_SetCursor>
	oled_WriteString(str2,font,color);
 800082e:	7e3b      	ldrb	r3, [r7, #24]
 8000830:	463a      	mov	r2, r7
 8000832:	ca06      	ldmia	r2, {r1, r2}
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f000 fd27 	bl	8001288 <oled_WriteString>
	oled_UpdateScreen();
 800083a:	f000 fc15 	bl	8001068 <oled_UpdateScreen>
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <get_time>:

void transmit_msg(const char *msg){
	UART_Transmit(msg);
}

uint32_t get_time(){
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800084a:	f000 ff73 	bl	8001734 <HAL_GetTick>
 800084e:	4603      	mov	r3, r0
}
 8000850:	4618      	mov	r0, r3
 8000852:	bd80      	pop	{r7, pc}

08000854 <apply_edited_pass>:
	uint8_t edit_mode;
};

char print_buf[128];

void apply_edited_pass(struct State* state) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < state->edit_security->pos; i++) {
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	e00f      	b.n	8000882 <apply_edited_pass+0x2e>
		state->current_security->password[i] = state->edit_security->password[i];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6859      	ldr	r1, [r3, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	440b      	add	r3, r1
 800086e:	3306      	adds	r3, #6
 8000870:	7819      	ldrb	r1, [r3, #0]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	3301      	adds	r3, #1
 8000878:	460a      	mov	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < state->edit_security->pos; i++) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	7c9b      	ldrb	r3, [r3, #18]
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4293      	cmp	r3, r2
 800088e:	dbe8      	blt.n	8000862 <apply_edited_pass+0xe>
	}
	state->edit_security->time_activated = get_time();
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685c      	ldr	r4, [r3, #4]
 8000894:	f7ff ffd7 	bl	8000846 <get_time>
 8000898:	4603      	mov	r3, r0
 800089a:	6023      	str	r3, [r4, #0]
	state->current_security->pass_length = state->edit_security->pos;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	7c92      	ldrb	r2, [r2, #18]
 80008a6:	701a      	strb	r2, [r3, #0]
	state->current_security->pos = 0;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2200      	movs	r2, #0
 80008ae:	735a      	strb	r2, [r3, #13]
	state->edit_security->pos = 0;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	749a      	strb	r2, [r3, #18]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}

080008c0 <reset_pass>:

void reset_pass(struct State* state) {
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	state->current_security->pos = 0;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	735a      	strb	r2, [r3, #13]
	state->edit_security->time_activated = get_time();
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685c      	ldr	r4, [r3, #4]
 80008d4:	f7ff ffb7 	bl	8000846 <get_time>
 80008d8:	4603      	mov	r3, r0
 80008da:	6023      	str	r3, [r4, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}

080008e4 <cancel_edit>:

void cancel_edit(struct State* state) {
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
	state->edit_mode = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	721a      	strb	r2, [r3, #8]
	state->edit_security->time_activated = get_time();
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685c      	ldr	r4, [r3, #4]
 80008f6:	f7ff ffa6 	bl	8000846 <get_time>
 80008fa:	4603      	mov	r3, r0
 80008fc:	6023      	str	r3, [r4, #0]
	state->edit_security->pos = 0;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	749a      	strb	r2, [r3, #18]
	snprintf(print_buf, sizeof(print_buf), "Password edit canceled\r\n");
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <cancel_edit+0x4c>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <cancel_edit+0x50>)
 800090c:	f004 fe5a 	bl	80055c4 <sniprintf>
	UART_Transmit((uint8_t*) print_buf);
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <cancel_edit+0x50>)
 8000912:	f000 fd49 	bl	80013a8 <UART_Transmit>
	display_str("Password edit", "canceled",Font_7x10,White);
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <cancel_edit+0x54>)
 8000918:	2201      	movs	r2, #1
 800091a:	9200      	str	r2, [sp, #0]
 800091c:	cb0c      	ldmia	r3, {r2, r3}
 800091e:	4907      	ldr	r1, [pc, #28]	; (800093c <cancel_edit+0x58>)
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <cancel_edit+0x5c>)
 8000922:	f7ff ff6b 	bl	80007fc <display_str>
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	bf00      	nop
 8000930:	08005e88 	.word	0x08005e88
 8000934:	20000508 	.word	0x20000508
 8000938:	20000000 	.word	0x20000000
 800093c:	08005ea4 	.word	0x08005ea4
 8000940:	08005eb0 	.word	0x08005eb0

08000944 <try_commit_edit>:

void try_commit_edit(struct State* state) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	6078      	str	r0, [r7, #4]
	uint8_t pos = state->edit_security->pos;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	7c9b      	ldrb	r3, [r3, #18]
 8000952:	73fb      	strb	r3, [r7, #15]
	if (pos < state->edit_security->min_length) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	7bfa      	ldrb	r2, [r7, #15]
 800095c:	429a      	cmp	r2, r3
 800095e:	d208      	bcs.n	8000972 <try_commit_edit+0x2e>
		display_str("Min password", "length - 8",Font_7x10,White);
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <try_commit_edit+0x54>)
 8000962:	2201      	movs	r2, #1
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	cb0c      	ldmia	r3, {r2, r3}
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <try_commit_edit+0x58>)
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <try_commit_edit+0x5c>)
 800096c:	f7ff ff46 	bl	80007fc <display_str>
	} else {
		apply_edited_pass(state);
		state->edit_mode = 0;
		display_str("Password is", "updated",Font_7x10,White);
	}
}
 8000970:	e00d      	b.n	800098e <try_commit_edit+0x4a>
		apply_edited_pass(state);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <apply_edited_pass>
		state->edit_mode = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	721a      	strb	r2, [r3, #8]
		display_str("Password is", "updated",Font_7x10,White);
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <try_commit_edit+0x54>)
 8000980:	2201      	movs	r2, #1
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	cb0c      	ldmia	r3, {r2, r3}
 8000986:	4907      	ldr	r1, [pc, #28]	; (80009a4 <try_commit_edit+0x60>)
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <try_commit_edit+0x64>)
 800098a:	f7ff ff37 	bl	80007fc <display_str>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000000 	.word	0x20000000
 800099c:	08005ec0 	.word	0x08005ec0
 80009a0:	08005ecc 	.word	0x08005ecc
 80009a4:	08005edc 	.word	0x08005edc
 80009a8:	08005ee4 	.word	0x08005ee4

080009ac <handle_input_edit>:

void handle_input_edit(struct State* state, uint8_t key) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
	uint8_t pos = state->edit_security->pos;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	7c9b      	ldrb	r3, [r3, #18]
 80009be:	72fb      	strb	r3, [r7, #11]
	if (pos < state->edit_security->max_length) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	7afa      	ldrb	r2, [r7, #11]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d227      	bcs.n	8000a1c <handle_input_edit+0x70>
		state->edit_security->password[pos++] = key;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	1c59      	adds	r1, r3, #1
 80009d4:	72f9      	strb	r1, [r7, #11]
 80009d6:	4413      	add	r3, r2
 80009d8:	78fa      	ldrb	r2, [r7, #3]
 80009da:	719a      	strb	r2, [r3, #6]
		state->edit_security->pos++;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	7c9a      	ldrb	r2, [r3, #18]
 80009e2:	3201      	adds	r2, #1
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	749a      	strb	r2, [r3, #18]
		oled_Fill(Black);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fb19 	bl	8001020 <oled_Fill>
		oled_SetCursor(0,0);
 80009ee:	2100      	movs	r1, #0
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fc6f 	bl	80012d4 <oled_SetCursor>
		for (int i = 0; i < pos; i++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e008      	b.n	8000a0e <handle_input_edit+0x62>
			oled_WriteChar('*', Font_11x18, White);
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <handle_input_edit+0x88>)
 80009fe:	2301      	movs	r3, #1
 8000a00:	ca06      	ldmia	r2, {r1, r2}
 8000a02:	202a      	movs	r0, #42	; 0x2a
 8000a04:	f000 fbc0 	bl	8001188 <oled_WriteChar>
		for (int i = 0; i < pos; i++) {
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	dbf2      	blt.n	80009fc <handle_input_edit+0x50>
		}
		oled_UpdateScreen();
 8000a16:	f000 fb27 	bl	8001068 <oled_UpdateScreen>
	} else {
		display_str("Pass max length", "is exceeded", Font_7x10,White);
	}
}
 8000a1a:	e007      	b.n	8000a2c <handle_input_edit+0x80>
		display_str("Pass max length", "is exceeded", Font_7x10,White);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <handle_input_edit+0x8c>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	cb0c      	ldmia	r3, {r2, r3}
 8000a24:	4905      	ldr	r1, [pc, #20]	; (8000a3c <handle_input_edit+0x90>)
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <handle_input_edit+0x94>)
 8000a28:	f7ff fee8 	bl	80007fc <display_str>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	08005ef0 	.word	0x08005ef0
 8000a40:	08005efc 	.word	0x08005efc

08000a44 <handle_edit_key>:

void handle_edit_key(struct State* state, uint8_t key) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
	switch (key) {
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	d002      	beq.n	8000a5c <handle_edit_key+0x18>
 8000a56:	2b0c      	cmp	r3, #12
 8000a58:	d004      	beq.n	8000a64 <handle_edit_key+0x20>
 8000a5a:	e007      	b.n	8000a6c <handle_edit_key+0x28>
		case 10:
			cancel_edit(state);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff41 	bl	80008e4 <cancel_edit>
			break;
 8000a62:	e009      	b.n	8000a78 <handle_edit_key+0x34>
		case 12:
			try_commit_edit(state);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff6d 	bl	8000944 <try_commit_edit>
			break;
 8000a6a:	e005      	b.n	8000a78 <handle_edit_key+0x34>
		default:
			handle_input_edit(state, key);
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff9b 	bl	80009ac <handle_input_edit>
			break;
 8000a76:	bf00      	nop
	}
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <switch_to_edit>:

void switch_to_edit(struct State* state) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	state->edit_mode = 1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]
	snprintf(print_buf, sizeof(print_buf), "Password edit started\r\n");
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <switch_to_edit+0x38>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	480a      	ldr	r0, [pc, #40]	; (8000abc <switch_to_edit+0x3c>)
 8000a94:	f004 fd96 	bl	80055c4 <sniprintf>
	UART_Transmit((uint8_t*) print_buf);
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <switch_to_edit+0x3c>)
 8000a9a:	f000 fc85 	bl	80013a8 <UART_Transmit>
	display_str("Enter a new", "password",Font_7x10,White);
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <switch_to_edit+0x40>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	9200      	str	r2, [sp, #0]
 8000aa4:	cb0c      	ldmia	r3, {r2, r3}
 8000aa6:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <switch_to_edit+0x44>)
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <switch_to_edit+0x48>)
 8000aaa:	f7ff fea7 	bl	80007fc <display_str>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08005f0c 	.word	0x08005f0c
 8000abc:	20000508 	.word	0x20000508
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	08005f24 	.word	0x08005f24
 8000ac8:	08005f30 	.word	0x08005f30

08000acc <check_password>:

void check_password(struct State* state) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
	if (state->current_security->pos != state->current_security->pass_length) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	7b5a      	ldrb	r2, [r3, #13]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d00c      	beq.n	8000afe <check_password+0x32>
		display_str("Password is", "incorrect",Font_7x10,White);
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <check_password+0x9c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	9200      	str	r2, [sp, #0]
 8000aea:	cb0c      	ldmia	r3, {r2, r3}
 8000aec:	491f      	ldr	r1, [pc, #124]	; (8000b6c <check_password+0xa0>)
 8000aee:	4820      	ldr	r0, [pc, #128]	; (8000b70 <check_password+0xa4>)
 8000af0:	f7ff fe84 	bl	80007fc <display_str>
		state->current_security->pos = 0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2200      	movs	r2, #0
 8000afa:	735a      	strb	r2, [r3, #13]
		return;
 8000afc:	e031      	b.n	8000b62 <check_password+0x96>
	}
	for (int i = 0; i < state->current_security->pass_length; i++) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e01c      	b.n	8000b3e <check_password+0x72>
		if (state->current_security->password[i] != state->edit_security->password[i]) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6859      	ldr	r1, [r3, #4]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	440b      	add	r3, r1
 8000b18:	3306      	adds	r3, #6
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d00b      	beq.n	8000b38 <check_password+0x6c>
			display_str("Password is", "incorrect",Font_7x10,White);
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <check_password+0x9c>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	9200      	str	r2, [sp, #0]
 8000b26:	cb0c      	ldmia	r3, {r2, r3}
 8000b28:	4910      	ldr	r1, [pc, #64]	; (8000b6c <check_password+0xa0>)
 8000b2a:	4811      	ldr	r0, [pc, #68]	; (8000b70 <check_password+0xa4>)
 8000b2c:	f7ff fe66 	bl	80007fc <display_str>
			// reset input state
			reset_pass(state);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fec5 	bl	80008c0 <reset_pass>
			return;
 8000b36:	e014      	b.n	8000b62 <check_password+0x96>
	for (int i = 0; i < state->current_security->pass_length; i++) {
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	dbdb      	blt.n	8000b04 <check_password+0x38>
		}
	}
	display_str("Security is", "unlocked",Font_7x10,White);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <check_password+0x9c>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	9200      	str	r2, [sp, #0]
 8000b52:	cb0c      	ldmia	r3, {r2, r3}
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <check_password+0xa8>)
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <check_password+0xac>)
 8000b58:	f7ff fe50 	bl	80007fc <display_str>
	reset_pass(state);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff feaf 	bl	80008c0 <reset_pass>
}
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	08005f3c 	.word	0x08005f3c
 8000b70:	08005ee4 	.word	0x08005ee4
 8000b74:	08005f48 	.word	0x08005f48
 8000b78:	08005f54 	.word	0x08005f54

08000b7c <handle_input_unlock>:

void handle_input_unlock(struct State* state, uint8_t key) {
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
	uint8_t pos = state->current_security->pos;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	7b5b      	ldrb	r3, [r3, #13]
 8000b8e:	72fb      	strb	r3, [r7, #11]
	if (pos == 0) {
 8000b90:	7afb      	ldrb	r3, [r7, #11]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d105      	bne.n	8000ba2 <handle_input_unlock+0x26>
		state->edit_security->time_activated = get_time();
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685c      	ldr	r4, [r3, #4]
 8000b9a:	f7ff fe54 	bl	8000846 <get_time>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6023      	str	r3, [r4, #0]
	}
	if (pos < state->edit_security->max_length) {
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	791b      	ldrb	r3, [r3, #4]
 8000ba8:	7afa      	ldrb	r2, [r7, #11]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d227      	bcs.n	8000bfe <handle_input_unlock+0x82>
		state->current_security->password[pos++] = key;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	7afb      	ldrb	r3, [r7, #11]
 8000bb4:	1c59      	adds	r1, r3, #1
 8000bb6:	72f9      	strb	r1, [r7, #11]
 8000bb8:	4413      	add	r3, r2
 8000bba:	78fa      	ldrb	r2, [r7, #3]
 8000bbc:	705a      	strb	r2, [r3, #1]
		state->current_security->pos++;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	7b5a      	ldrb	r2, [r3, #13]
 8000bc4:	3201      	adds	r2, #1
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	735a      	strb	r2, [r3, #13]
		oled_Fill(Black);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 fa28 	bl	8001020 <oled_Fill>
		oled_SetCursor(0,0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 fb7e 	bl	80012d4 <oled_SetCursor>
		for (int i = 0; i < pos; i++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e008      	b.n	8000bf0 <handle_input_unlock+0x74>
			oled_WriteChar('*', Font_11x18, White);
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <handle_input_unlock+0x9c>)
 8000be0:	2301      	movs	r3, #1
 8000be2:	ca06      	ldmia	r2, {r1, r2}
 8000be4:	202a      	movs	r0, #42	; 0x2a
 8000be6:	f000 facf 	bl	8001188 <oled_WriteChar>
		for (int i = 0; i < pos; i++) {
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	7afb      	ldrb	r3, [r7, #11]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf2      	blt.n	8000bde <handle_input_unlock+0x62>
		}
		oled_UpdateScreen();
 8000bf8:	f000 fa36 	bl	8001068 <oled_UpdateScreen>
	} else {
		display_str("Pass max length", "is exceeded",Font_7x10,White);
	}
}
 8000bfc:	e007      	b.n	8000c0e <handle_input_unlock+0x92>
		display_str("Pass max length", "is exceeded",Font_7x10,White);
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <handle_input_unlock+0xa0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	9200      	str	r2, [sp, #0]
 8000c04:	cb0c      	ldmia	r3, {r2, r3}
 8000c06:	4906      	ldr	r1, [pc, #24]	; (8000c20 <handle_input_unlock+0xa4>)
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <handle_input_unlock+0xa8>)
 8000c0a:	f7ff fdf7 	bl	80007fc <display_str>
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	08005ef0 	.word	0x08005ef0
 8000c24:	08005efc 	.word	0x08005efc

08000c28 <handle_unlock_key>:

void handle_unlock_key(struct State* state, uint8_t key) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	switch (key) {
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	d002      	beq.n	8000c40 <handle_unlock_key+0x18>
 8000c3a:	2b0c      	cmp	r3, #12
 8000c3c:	d004      	beq.n	8000c48 <handle_unlock_key+0x20>
 8000c3e:	e007      	b.n	8000c50 <handle_unlock_key+0x28>
		case 10:
			switch_to_edit(state);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff1d 	bl	8000a80 <switch_to_edit>
			break;
 8000c46:	e009      	b.n	8000c5c <handle_unlock_key+0x34>
		case 12:
			check_password(state);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff3f 	bl	8000acc <check_password>
			break;
 8000c4e:	e005      	b.n	8000c5c <handle_unlock_key+0x34>
		default:
			handle_input_unlock(state, key);
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	4619      	mov	r1, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff91 	bl	8000b7c <handle_input_unlock>
			break;
 8000c5a:	bf00      	nop
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <handle_command>:

void handle_command(struct State* state, uint8_t key) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
	// map key 11 as '0'
	key = key == 11 ? 0 : key;
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b0b      	cmp	r3, #11
 8000c74:	d001      	beq.n	8000c7a <handle_command+0x16>
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	e000      	b.n	8000c7c <handle_command+0x18>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	70fb      	strb	r3, [r7, #3]
	if (state->edit_mode) {
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7a1b      	ldrb	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d005      	beq.n	8000c92 <handle_command+0x2e>
		handle_edit_key(state, key);
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff feda 	bl	8000a44 <handle_edit_key>
	} else {
		handle_unlock_key(state, key);
	}
}
 8000c90:	e004      	b.n	8000c9c <handle_command+0x38>
		handle_unlock_key(state, key);
 8000c92:	78fb      	ldrb	r3, [r7, #3]
 8000c94:	4619      	mov	r1, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffc6 	bl	8000c28 <handle_unlock_key>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <KB_Test>:


void KB_Test(struct State* state) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 static const uint8_t rows[] = { 0xFE, 0xFD, 0xFB, 0xF7 };
 static uint8_t old_keys[] = { 0, 0, 0, 0 };
 static const uint8_t key_chars[] = {1,2,3,4,5,6,7,8,9,10,11,12};

 for(int current_row=0; current_row<4; current_row++){
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	e048      	b.n	8000d44 <KB_Test+0xa0>
	 uint8_t current_key = Check_Row(rows[current_row]);
 8000cb2:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <KB_Test+0xb0>)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd50 	bl	8000760 <Check_Row>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	75fb      	strb	r3, [r7, #23]
	  uint8_t *old_key = &old_keys[current_row];
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <KB_Test+0xb4>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

	  for (int i = 0; i < 3; ++i) {
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	e02f      	b.n	8000d32 <KB_Test+0x8e>
	   int mask = 1 << i;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	60fb      	str	r3, [r7, #12]
	   if ((current_key & mask) && !(*old_key & mask)) {
 8000cdc:	7dfa      	ldrb	r2, [r7, #23]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d022      	beq.n	8000d2c <KB_Test+0x88>
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d11b      	bne.n	8000d2c <KB_Test+0x88>
	 	  snprintf(print_buf, sizeof(print_buf), "Pressed key = %d\r\n", key_chars[i + 3 * current_row]);
 8000cf4:	69fa      	ldr	r2, [r7, #28]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	441a      	add	r2, r3
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <KB_Test+0xb8>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <KB_Test+0xbc>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4816      	ldr	r0, [pc, #88]	; (8000d64 <KB_Test+0xc0>)
 8000d0a:	f004 fc5b 	bl	80055c4 <sniprintf>
	 	  			UART_Transmit((uint8_t*) print_buf);
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <KB_Test+0xc0>)
 8000d10:	f000 fb4a 	bl	80013a8 <UART_Transmit>
	    handle_command(state, key_chars[i + 3 * current_row]);
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	441a      	add	r2, r3
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <KB_Test+0xb8>)
 8000d22:	5cd3      	ldrb	r3, [r2, r3]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff9c 	bl	8000c64 <handle_command>
	  for (int i = 0; i < 3; ++i) {
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	ddcc      	ble.n	8000cd2 <KB_Test+0x2e>
	   }
	  }

	  *old_key = current_key;
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	701a      	strb	r2, [r3, #0]
 for(int current_row=0; current_row<4; current_row++){
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3301      	adds	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	ddb3      	ble.n	8000cb2 <KB_Test+0xe>
 }

}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	0800744c 	.word	0x0800744c
 8000d58:	2000009c 	.word	0x2000009c
 8000d5c:	08007450 	.word	0x08007450
 8000d60:	08005f60 	.word	0x08005f60
 8000d64:	20000508 	.word	0x20000508

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6e:	f000 fc7b 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d72:	f000 f861 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d76:	f7ff fbff 	bl	8000578 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000d7a:	f000 fbd9 	bl	8001530 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000d7e:	f7ff fc69 	bl	8000654 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  oled_Init();
 8000d82:	f000 f8e1 	bl	8000f48 <oled_Init>
  print_buf[0] = "\0";
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <main+0xbc>)
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <main+0xc0>)
 8000d8c:	701a      	strb	r2, [r3, #0]

  struct Security security = {};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	819a      	strh	r2, [r3, #12]
  struct Security_Pattern pattern = {};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  pattern.max_length = 12;
 8000dac:	230c      	movs	r3, #12
 8000dae:	753b      	strb	r3, [r7, #20]
  pattern.min_length = 8;
 8000db0:	2308      	movs	r3, #8
 8000db2:	757b      	strb	r3, [r7, #21]
  pattern.pos = 8;
 8000db4:	2308      	movs	r3, #8
 8000db6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  for(int i = 0; i<8; i++){
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dbe:	e00c      	b.n	8000dda <main+0x72>
	  pattern.password[i] = i + 1;
 8000dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2d9      	uxtb	r1, r3
 8000dc8:	f107 0216 	add.w	r2, r7, #22
 8000dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dce:	4413      	add	r3, r2
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<8; i++){
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	ddef      	ble.n	8000dc0 <main+0x58>
  }
  struct State state = {};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
  state.current_security = &security;
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	607b      	str	r3, [r7, #4]
  state.edit_security = &pattern;
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	60bb      	str	r3, [r7, #8]
  state.edit_mode = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	733b      	strb	r3, [r7, #12]
  apply_edited_pass(&state);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fd29 	bl	8000854 <apply_edited_pass>
  display_str("Enter the", "password",Font_7x10,White);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <main+0xc4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	cb0c      	ldmia	r3, {r2, r3}
 8000e0a:	4909      	ldr	r1, [pc, #36]	; (8000e30 <main+0xc8>)
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <main+0xcc>)
 8000e0e:	f7ff fcf5 	bl	80007fc <display_str>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
		KB_Test(&state);
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff45 	bl	8000ca4 <KB_Test>
		HAL_Delay(15);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 fc96 	bl	800174c <HAL_Delay>
		KB_Test(&state);
 8000e20:	e7f7      	b.n	8000e12 <main+0xaa>
 8000e22:	bf00      	nop
 8000e24:	08005f74 	.word	0x08005f74
 8000e28:	20000508 	.word	0x20000508
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	08005f24 	.word	0x08005f24
 8000e34:	08005f78 	.word	0x08005f78

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	2230      	movs	r2, #48	; 0x30
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fbb4 	bl	80055b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <SystemClock_Config+0xcc>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <SystemClock_Config+0xcc>)
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <SystemClock_Config+0xcc>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <SystemClock_Config+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <SystemClock_Config+0xd0>)
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <SystemClock_Config+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e94:	2301      	movs	r3, #1
 8000e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ea8:	2319      	movs	r3, #25
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000eac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fbf0 	bl	80046a4 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eca:	f000 f81f 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ede:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	2105      	movs	r1, #5
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fe51 	bl	8004b94 <HAL_RCC_ClockConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ef8:	f000 f808 	bl	8000f0c <Error_Handler>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3750      	adds	r7, #80	; 0x50
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40007000 	.word	0x40007000

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8000f22:	230a      	movs	r3, #10
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	2200      	movs	r2, #0
 8000f32:	2178      	movs	r1, #120	; 0x78
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <oled_WriteCommand+0x2c>)
 8000f36:	f001 f869 	bl	800200c <HAL_I2C_Mem_Write>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200004b4 	.word	0x200004b4

08000f48 <oled_Init>:


uint8_t oled_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000f4c:	2064      	movs	r0, #100	; 0x64
 8000f4e:	f000 fbfd 	bl	800174c <HAL_Delay>

	oled_WriteCommand(0xAE);
 8000f52:	20ae      	movs	r0, #174	; 0xae
 8000f54:	f7ff ffe0 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8000f58:	2020      	movs	r0, #32
 8000f5a:	f7ff ffdd 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8000f5e:	2010      	movs	r0, #16
 8000f60:	f7ff ffda 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 8000f64:	20b0      	movs	r0, #176	; 0xb0
 8000f66:	f7ff ffd7 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 8000f6a:	20c8      	movs	r0, #200	; 0xc8
 8000f6c:	f7ff ffd4 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff ffd1 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8000f76:	2010      	movs	r0, #16
 8000f78:	f7ff ffce 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 8000f7c:	2040      	movs	r0, #64	; 0x40
 8000f7e:	f7ff ffcb 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 8000f82:	2081      	movs	r0, #129	; 0x81
 8000f84:	f7ff ffc8 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 8000f88:	20ff      	movs	r0, #255	; 0xff
 8000f8a:	f7ff ffc5 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 8000f8e:	20a1      	movs	r0, #161	; 0xa1
 8000f90:	f7ff ffc2 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 8000f94:	20a6      	movs	r0, #166	; 0xa6
 8000f96:	f7ff ffbf 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8000f9a:	20a8      	movs	r0, #168	; 0xa8
 8000f9c:	f7ff ffbc 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8000fa0:	203f      	movs	r0, #63	; 0x3f
 8000fa2:	f7ff ffb9 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 8000fa6:	20a4      	movs	r0, #164	; 0xa4
 8000fa8:	f7ff ffb6 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8000fac:	20d3      	movs	r0, #211	; 0xd3
 8000fae:	f7ff ffb3 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff ffb0 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 8000fb8:	20d5      	movs	r0, #213	; 0xd5
 8000fba:	f7ff ffad 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 8000fbe:	20f0      	movs	r0, #240	; 0xf0
 8000fc0:	f7ff ffaa 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 8000fc4:	20d9      	movs	r0, #217	; 0xd9
 8000fc6:	f7ff ffa7 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8000fca:	2022      	movs	r0, #34	; 0x22
 8000fcc:	f7ff ffa4 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8000fd0:	20da      	movs	r0, #218	; 0xda
 8000fd2:	f7ff ffa1 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 8000fd6:	2012      	movs	r0, #18
 8000fd8:	f7ff ff9e 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 8000fdc:	20db      	movs	r0, #219	; 0xdb
 8000fde:	f7ff ff9b 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8000fe2:	2020      	movs	r0, #32
 8000fe4:	f7ff ff98 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 8000fe8:	208d      	movs	r0, #141	; 0x8d
 8000fea:	f7ff ff95 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f7ff ff92 	bl	8000f18 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 8000ff4:	20af      	movs	r0, #175	; 0xaf
 8000ff6:	f7ff ff8f 	bl	8000f18 <oled_WriteCommand>

	oled_Fill(Black);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f810 	bl	8001020 <oled_Fill>

	oled_UpdateScreen();
 8001000:	f000 f832 	bl	8001068 <oled_UpdateScreen>

	OLED.CurrentX = 0;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <oled_Init+0xd4>)
 8001006:	2200      	movs	r2, #0
 8001008:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <oled_Init+0xd4>)
 800100c:	2200      	movs	r2, #0
 800100e:	805a      	strh	r2, [r3, #2]

	OLED.Initialized = 1;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <oled_Init+0xd4>)
 8001012:	2201      	movs	r2, #1
 8001014:	715a      	strb	r2, [r3, #5]

	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200004a0 	.word	0x200004a0

08001020 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e00d      	b.n	800104c <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <oled_Fill+0x1a>
 8001036:	2100      	movs	r1, #0
 8001038:	e000      	b.n	800103c <oled_Fill+0x1c>
 800103a:	21ff      	movs	r1, #255	; 0xff
 800103c:	4a09      	ldr	r2, [pc, #36]	; (8001064 <oled_Fill+0x44>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	460a      	mov	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d3ed      	bcc.n	8001030 <oled_Fill+0x10>
	}
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200000a0 	.word	0x200000a0

08001068 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e01d      	b.n	80010b0 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	3b50      	subs	r3, #80	; 0x50
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff4c 	bl	8000f18 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff49 	bl	8000f18 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 8001086:	2010      	movs	r0, #16
 8001088:	f7ff ff46 	bl	8000f18 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,25);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	01db      	lsls	r3, r3, #7
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <oled_UpdateScreen+0x58>)
 8001092:	4413      	add	r3, r2
 8001094:	2219      	movs	r2, #25
 8001096:	9202      	str	r2, [sp, #8]
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	9201      	str	r2, [sp, #4]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	2178      	movs	r1, #120	; 0x78
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <oled_UpdateScreen+0x5c>)
 80010a6:	f000 ffb1 	bl	800200c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	3301      	adds	r3, #1
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	d9de      	bls.n	8001074 <oled_UpdateScreen+0xc>
	}
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200000a0 	.word	0x200000a0
 80010c4:	200004b4 	.word	0x200004b4

080010c8 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	460b      	mov	r3, r1
 80010d4:	71bb      	strb	r3, [r7, #6]
 80010d6:	4613      	mov	r3, r2
 80010d8:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db48      	blt.n	8001174 <oled_DrawPixel+0xac>
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2b3f      	cmp	r3, #63	; 0x3f
 80010e6:	d845      	bhi.n	8001174 <oled_DrawPixel+0xac>
		return;
	}

	if (OLED.Inverted) {
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <oled_DrawPixel+0xb8>)
 80010ea:	791b      	ldrb	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <oled_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	717b      	strb	r3, [r7, #5]
	}

	if (color == White) {
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d11a      	bne.n	800113a <oled_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	b2d8      	uxtb	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	01db      	lsls	r3, r3, #7
 8001110:	4413      	add	r3, r2
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <oled_DrawPixel+0xbc>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	b25a      	sxtb	r2, r3
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	b25b      	sxtb	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b259      	sxtb	r1, r3
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	4603      	mov	r3, r0
 800112e:	01db      	lsls	r3, r3, #7
 8001130:	4413      	add	r3, r2
 8001132:	b2c9      	uxtb	r1, r1
 8001134:	4a13      	ldr	r2, [pc, #76]	; (8001184 <oled_DrawPixel+0xbc>)
 8001136:	54d1      	strb	r1, [r2, r3]
 8001138:	e01d      	b.n	8001176 <oled_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 800113a:	79fa      	ldrb	r2, [r7, #7]
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	b2d8      	uxtb	r0, r3
 8001142:	4603      	mov	r3, r0
 8001144:	01db      	lsls	r3, r3, #7
 8001146:	4413      	add	r3, r2
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <oled_DrawPixel+0xbc>)
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	b25a      	sxtb	r2, r3
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	b25b      	sxtb	r3, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	b25b      	sxtb	r3, r3
 8001160:	4013      	ands	r3, r2
 8001162:	b259      	sxtb	r1, r3
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	4603      	mov	r3, r0
 8001168:	01db      	lsls	r3, r3, #7
 800116a:	4413      	add	r3, r2
 800116c:	b2c9      	uxtb	r1, r1
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <oled_DrawPixel+0xbc>)
 8001170:	54d1      	strb	r1, [r2, r3]
 8001172:	e000      	b.n	8001176 <oled_DrawPixel+0xae>
		return;
 8001174:	bf00      	nop
	}
}
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	200004a0 	.word	0x200004a0
 8001184:	200000a0 	.word	0x200000a0

08001188 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4604      	mov	r4, r0
 8001190:	1d38      	adds	r0, r7, #4
 8001192:	e880 0006 	stmia.w	r0, {r1, r2}
 8001196:	461a      	mov	r2, r3
 8001198:	4623      	mov	r3, r4
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	4613      	mov	r3, r2
 800119e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <oled_WriteChar+0xfc>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	793b      	ldrb	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	dc06      	bgt.n	80011bc <oled_WriteChar+0x34>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 80011ae:	4b35      	ldr	r3, [pc, #212]	; (8001284 <oled_WriteChar+0xfc>)
 80011b0:	885b      	ldrh	r3, [r3, #2]
 80011b2:	461a      	mov	r2, r3
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80011b8:	2b3f      	cmp	r3, #63	; 0x3f
 80011ba:	dd01      	ble.n	80011c0 <oled_WriteChar+0x38>
		return 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	e05d      	b.n	800127c <oled_WriteChar+0xf4>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	e04c      	b.n	8001260 <oled_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3b20      	subs	r3, #32
 80011cc:	7979      	ldrb	r1, [r7, #5]
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	440b      	add	r3, r1
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	e034      	b.n	8001250 <oled_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d012      	beq.n	800121c <oled_WriteChar+0x94>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <oled_WriteChar+0xfc>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	b2d8      	uxtb	r0, r3
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <oled_WriteChar+0xfc>)
 8001206:	885b      	ldrh	r3, [r3, #2]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff ff57 	bl	80010c8 <oled_DrawPixel>
 800121a:	e016      	b.n	800124a <oled_WriteChar+0xc2>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <oled_WriteChar+0xfc>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4413      	add	r3, r2
 8001228:	b2d8      	uxtb	r0, r3
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <oled_WriteChar+0xfc>)
 800122c:	885b      	ldrh	r3, [r3, #2]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b2d9      	uxtb	r1, r3
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf0c      	ite	eq
 800123e:	2301      	moveq	r3, #1
 8001240:	2300      	movne	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	f7ff ff3f 	bl	80010c8 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	3301      	adds	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	461a      	mov	r2, r3
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	4293      	cmp	r3, r2
 8001258:	d3c5      	bcc.n	80011e6 <oled_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	797b      	ldrb	r3, [r7, #5]
 8001262:	461a      	mov	r2, r3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	4293      	cmp	r3, r2
 8001268:	d3ad      	bcc.n	80011c6 <oled_WriteChar+0x3e>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <oled_WriteChar+0xfc>)
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4413      	add	r3, r2
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b03      	ldr	r3, [pc, #12]	; (8001284 <oled_WriteChar+0xfc>)
 8001278:	801a      	strh	r2, [r3, #0]

	return ch;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3724      	adds	r7, #36	; 0x24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	200004a0 	.word	0x200004a0

08001288 <oled_WriteString>:

char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	1d38      	adds	r0, r7, #4
 8001292:	e880 0006 	stmia.w	r0, {r1, r2}
 8001296:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 8001298:	e012      	b.n	80012c0 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	7818      	ldrb	r0, [r3, #0]
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	1d3a      	adds	r2, r7, #4
 80012a2:	ca06      	ldmia	r2, {r1, r2}
 80012a4:	f7ff ff70 	bl	8001188 <oled_WriteChar>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d002      	beq.n	80012ba <oled_WriteString+0x32>
			return *str;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	e008      	b.n	80012cc <oled_WriteString+0x44>
		}
		str++;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e8      	bne.n	800129a <oled_WriteString+0x12>
	}
	return *str;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	781b      	ldrb	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	4613      	mov	r3, r2
 80012e2:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <oled_SetCursor+0x2c>)
 80012ea:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <oled_SetCursor+0x2c>)
 80012f2:	805a      	strh	r2, [r3, #2]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	200004a0 	.word	0x200004a0

08001304 <PCA9538_Read_Register>:
#include "i2c.h"
#include "sdk_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg,
  uint8_t *buf) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af04      	add	r7, sp, #16
 800130a:	4603      	mov	r3, r0
 800130c:	603a      	str	r2, [r7, #0]
 800130e:	80fb      	strh	r3, [r7, #6]
 8001310:	460b      	mov	r3, r1
 8001312:	717b      	strb	r3, [r7, #5]
 return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	b299      	uxth	r1, r3
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	b29a      	uxth	r2, r3
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2301      	movs	r3, #1
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <PCA9538_Read_Register+0x3c>)
 8001330:	f000 ff66 	bl	8002200 <HAL_I2C_Mem_Read>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200004b4 	.word	0x200004b4

08001344 <PCA9538_Write_Register>:

HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg,
  uint8_t *buf) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af04      	add	r7, sp, #16
 800134a:	4603      	mov	r3, r0
 800134c:	603a      	str	r2, [r7, #0]
 800134e:	80fb      	strh	r3, [r7, #6]
 8001350:	460b      	mov	r3, r1
 8001352:	717b      	strb	r3, [r7, #5]
 return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	b299      	uxth	r1, r3
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	b29a      	uxth	r2, r3
 8001360:	2364      	movs	r3, #100	; 0x64
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2301      	movs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <PCA9538_Write_Register+0x3c>)
 8001370:	f000 fe4c 	bl	800200c <HAL_I2C_Mem_Write>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200004b4 	.word	0x200004b4

08001384 <PCA9538_Read_Inputs>:
 }

 return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t *buf) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	80fb      	strh	r3, [r7, #6]
 return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ffb4 	bl	8001304 <PCA9538_Read_Register>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7fe ff0d 	bl	80001d0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <UART_Transmit+0x28>)
 80013c2:	f003 fe04 	bl	8004fce <HAL_UART_Transmit>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000588 	.word	0x20000588

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f94c 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <I2C1_EV_IRQHandler+0x10>)
 800147e:	f001 f8e5 	bl	800264c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200004b4 	.word	0x200004b4

0800148c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <I2C1_ER_IRQHandler+0x10>)
 8001492:	f001 fa4c 	bl	800292e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200004b4 	.word	0x200004b4

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f004 f846 	bl	8005560 <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20020000 	.word	0x20020000
 8001500:	00000400 	.word	0x00000400
 8001504:	200004a8 	.word	0x200004a8
 8001508:	200005e0 	.word	0x200005e0

0800150c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <SystemInit+0x20>)
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <SystemInit+0x20>)
 8001518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800151c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_USART6_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_USART6_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART6_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART6_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001568:	f003 fce4 	bl	8004f34 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001572:	f7ff fccb 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000588 	.word	0x20000588
 8001580:	40011400 	.word	0x40011400

08001584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12b      	bne.n	80015fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_MspInit+0x88>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_UART_MspInit+0x88>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015de:	23c0      	movs	r3, #192	; 0xc0
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015ee:	2308      	movs	r3, #8
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0x8c>)
 80015fa:	f000 fa0d 	bl	8001a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40011400 	.word	0x40011400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020800 	.word	0x40020800

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163e:	f7ff ff65 	bl	800150c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f003 ff93 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fb8f 	bl	8000d68 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001658:	080074b8 	.word	0x080074b8
  ldr r2, =_sbss
 800165c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001660:	200005e0 	.word	0x200005e0

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f94f 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fe9a 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f967 	bl	800199e <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e8:	f000 f92f 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010
 8001704:	20000018 	.word	0x20000018
 8001708:	20000014 	.word	0x20000014

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000018 	.word	0x20000018
 8001730:	200005cc 	.word	0x200005cc

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200005cc 	.word	0x200005cc

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000018 	.word	0x20000018

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00c      	b.n	80019ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a08:	b2db      	uxtb	r3, r3
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e16b      	b.n	8001d0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 815a 	bne.w	8001d06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d130      	bne.n	8001acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d017      	beq.n	8001b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d123      	bne.n	8001b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80b4 	beq.w	8001d06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <HAL_GPIO_Init+0x30c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a5f      	ldr	r2, [pc, #380]	; (8001d24 <HAL_GPIO_Init+0x30c>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_GPIO_Init+0x30c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bba:	4a5b      	ldr	r2, [pc, #364]	; (8001d28 <HAL_GPIO_Init+0x310>)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_GPIO_Init+0x314>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02b      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <HAL_GPIO_Init+0x318>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d025      	beq.n	8001c3a <HAL_GPIO_Init+0x222>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a50      	ldr	r2, [pc, #320]	; (8001d34 <HAL_GPIO_Init+0x31c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01f      	beq.n	8001c36 <HAL_GPIO_Init+0x21e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x21a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x216>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_GPIO_Init+0x328>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x212>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_GPIO_Init+0x32c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x20e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_GPIO_Init+0x330>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x20a>
 8001c1e:	2307      	movs	r3, #7
 8001c20:	e00e      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c22:	2308      	movs	r3, #8
 8001c24:	e00c      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e00a      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	e008      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c2e:	2304      	movs	r3, #4
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c32:	2303      	movs	r3, #3
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x228>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c50:	4935      	ldr	r1, [pc, #212]	; (8001d28 <HAL_GPIO_Init+0x310>)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c82:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_GPIO_Init+0x334>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	f67f ae90 	bls.w	8001a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40021c00 	.word	0x40021c00
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e12b      	b.n	8001fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fc80 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	; 0x24
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de8:	f003 f87c 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a81      	ldr	r2, [pc, #516]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d807      	bhi.n	8001e08 <HAL_I2C_Init+0x84>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a80      	ldr	r2, [pc, #512]	; (8001ffc <HAL_I2C_Init+0x278>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e006      	b.n	8001e16 <HAL_I2C_Init+0x92>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a7d      	ldr	r2, [pc, #500]	; (8002000 <HAL_I2C_Init+0x27c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0e7      	b.n	8001fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a78      	ldr	r2, [pc, #480]	; (8002004 <HAL_I2C_Init+0x280>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0c9b      	lsrs	r3, r3, #18
 8001e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d802      	bhi.n	8001e58 <HAL_I2C_Init+0xd4>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3301      	adds	r3, #1
 8001e56:	e009      	b.n	8001e6c <HAL_I2C_Init+0xe8>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	4a69      	ldr	r2, [pc, #420]	; (8002008 <HAL_I2C_Init+0x284>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	495c      	ldr	r1, [pc, #368]	; (8001ff8 <HAL_I2C_Init+0x274>)
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d819      	bhi.n	8001ec0 <HAL_I2C_Init+0x13c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e59      	subs	r1, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9a:	1c59      	adds	r1, r3, #1
 8001e9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_I2C_Init+0x138>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1e59      	subs	r1, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eba:	e051      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e04f      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d111      	bne.n	8001eec <HAL_I2C_Init+0x168>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e012      	b.n	8001f12 <HAL_I2C_Init+0x18e>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1e58      	subs	r0, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	0099      	lsls	r1, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Init+0x196>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e022      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10e      	bne.n	8001f40 <HAL_I2C_Init+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e58      	subs	r0, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	440b      	add	r3, r1
 8001f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3e:	e00f      	b.n	8001f60 <HAL_I2C_Init+0x1dc>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	0099      	lsls	r1, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	6809      	ldr	r1, [r1, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6911      	ldr	r1, [r2, #16]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68d2      	ldr	r2, [r2, #12]
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	000186a0 	.word	0x000186a0
 8001ffc:	001e847f 	.word	0x001e847f
 8002000:	003d08ff 	.word	0x003d08ff
 8002004:	431bde83 	.word	0x431bde83
 8002008:	10624dd3 	.word	0x10624dd3

0800200c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4603      	mov	r3, r0
 800201c:	817b      	strh	r3, [r7, #10]
 800201e:	460b      	mov	r3, r1
 8002020:	813b      	strh	r3, [r7, #8]
 8002022:	4613      	mov	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002026:	f7ff fb85 	bl	8001734 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b20      	cmp	r3, #32
 8002036:	f040 80d9 	bne.w	80021ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2319      	movs	r3, #25
 8002040:	2201      	movs	r2, #1
 8002042:	496d      	ldr	r1, [pc, #436]	; (80021f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f002 f903 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
 8002052:	e0cc      	b.n	80021ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_I2C_Mem_Write+0x56>
 800205e:	2302      	movs	r3, #2
 8002060:	e0c5      	b.n	80021ee <HAL_I2C_Mem_Write+0x1e2>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d007      	beq.n	8002088 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2221      	movs	r2, #33	; 0x21
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2240      	movs	r2, #64	; 0x40
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a3a      	ldr	r2, [r7, #32]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_I2C_Mem_Write+0x1f0>)
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ca:	88f8      	ldrh	r0, [r7, #6]
 80020cc:	893a      	ldrh	r2, [r7, #8]
 80020ce:	8979      	ldrh	r1, [r7, #10]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4603      	mov	r3, r0
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f001 fe92 	bl	8003e04 <I2C_RequestMemoryWrite>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d052      	beq.n	800218c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e081      	b.n	80021ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f002 f984 	bl	80043fc <I2C_WaitOnTXEFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d107      	bne.n	8002112 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06b      	b.n	80021ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <HAL_I2C_Mem_Write+0x180>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d017      	beq.n	800218c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1aa      	bne.n	80020ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f002 f970 	bl	800447e <I2C_WaitOnBTFFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d107      	bne.n	80021bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e016      	b.n	80021ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	00100002 	.word	0x00100002
 80021fc:	ffff0000 	.word	0xffff0000

08002200 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4603      	mov	r3, r0
 8002210:	817b      	strh	r3, [r7, #10]
 8002212:	460b      	mov	r3, r1
 8002214:	813b      	strh	r3, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800221a:	f7ff fa8b 	bl	8001734 <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b20      	cmp	r3, #32
 800222a:	f040 8208 	bne.w	800263e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2319      	movs	r3, #25
 8002234:	2201      	movs	r2, #1
 8002236:	497b      	ldr	r1, [pc, #492]	; (8002424 <HAL_I2C_Mem_Read+0x224>)
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f002 f809 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002244:	2302      	movs	r3, #2
 8002246:	e1fb      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Mem_Read+0x56>
 8002252:	2302      	movs	r3, #2
 8002254:	e1f4      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d007      	beq.n	800227c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2222      	movs	r2, #34	; 0x22
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_I2C_Mem_Read+0x228>)
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022be:	88f8      	ldrh	r0, [r7, #6]
 80022c0:	893a      	ldrh	r2, [r7, #8]
 80022c2:	8979      	ldrh	r1, [r7, #10]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4603      	mov	r3, r0
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f001 fe2e 	bl	8003f30 <I2C_RequestMemoryRead>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1b0      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d113      	bne.n	800230e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	623b      	str	r3, [r7, #32]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e184      	b.n	8002618 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b01      	cmp	r3, #1
 8002314:	d11b      	bne.n	800234e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e164      	b.n	8002618 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b02      	cmp	r3, #2
 8002354:	d11b      	bne.n	800238e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002364:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	e144      	b.n	8002618 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023a4:	e138      	b.n	8002618 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	f200 80f1 	bhi.w	8002592 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d123      	bne.n	8002400 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f002 f8d1 	bl	8004564 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e139      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023fe:	e10b      	b.n	8002618 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	2b02      	cmp	r3, #2
 8002406:	d14e      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	2200      	movs	r2, #0
 8002410:	4906      	ldr	r1, [pc, #24]	; (800242c <HAL_I2C_Mem_Read+0x22c>)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f001 ff1c 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e10e      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
 8002422:	bf00      	nop
 8002424:	00100002 	.word	0x00100002
 8002428:	ffff0000 	.word	0xffff0000
 800242c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a4:	e0b8      	b.n	8002618 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	2200      	movs	r2, #0
 80024ae:	4966      	ldr	r1, [pc, #408]	; (8002648 <HAL_I2C_Mem_Read+0x448>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f001 fecd 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0bf      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	2200      	movs	r2, #0
 800250a:	494f      	ldr	r1, [pc, #316]	; (8002648 <HAL_I2C_Mem_Read+0x448>)
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f001 fe9f 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e091      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002590:	e042      	b.n	8002618 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f001 ffe4 	bl	8004564 <I2C_WaitOnRXNEFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e04c      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d118      	bne.n	8002618 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	f47f aec2 	bne.w	80023a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	00010004 	.word	0x00010004

0800264c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b10      	cmp	r3, #16
 800267a:	d003      	beq.n	8002684 <HAL_I2C_EV_IRQHandler+0x38>
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	f040 80c1 	bne.w	8002806 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <HAL_I2C_EV_IRQHandler+0x6e>
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80026a4:	d003      	beq.n	80026ae <HAL_I2C_EV_IRQHandler+0x62>
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80026ac:	d101      	bne.n	80026b2 <HAL_I2C_EV_IRQHandler+0x66>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_I2C_EV_IRQHandler+0x68>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f000 8132 	beq.w	800291e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00c      	beq.n	80026de <HAL_I2C_EV_IRQHandler+0x92>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	0a5b      	lsrs	r3, r3, #9
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 ffcc 	bl	800466e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fd79 	bl	80031ce <I2C_Master_SB>
 80026dc:	e092      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_I2C_EV_IRQHandler+0xb2>
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	0a5b      	lsrs	r3, r3, #9
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fdef 	bl	80032da <I2C_Master_ADD10>
 80026fc:	e082      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_I2C_EV_IRQHandler+0xd2>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	0a5b      	lsrs	r3, r3, #9
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fe09 	bl	800332e <I2C_Master_ADDR>
 800271c:	e072      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03b      	beq.n	80027a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002738:	f000 80f3 	beq.w	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	09db      	lsrs	r3, r3, #7
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <HAL_I2C_EV_IRQHandler+0x11c>
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	0a9b      	lsrs	r3, r3, #10
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_I2C_EV_IRQHandler+0x11c>
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f9f3 	bl	8002b4c <I2C_MasterTransmit_TXE>
 8002766:	e04d      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80d6 	beq.w	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	0a5b      	lsrs	r3, r3, #9
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80cf 	beq.w	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	2b21      	cmp	r3, #33	; 0x21
 8002788:	d103      	bne.n	8002792 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa7a 	bl	8002c84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002790:	e0c7      	b.n	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	f040 80c4 	bne.w	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fae8 	bl	8002d70 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027a0:	e0bf      	b.n	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b0:	f000 80b7 	beq.w	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	099b      	lsrs	r3, r3, #6
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00f      	beq.n	80027e0 <HAL_I2C_EV_IRQHandler+0x194>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_I2C_EV_IRQHandler+0x194>
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fb5d 	bl	8002e98 <I2C_MasterReceive_RXNE>
 80027de:	e011      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 809a 	beq.w	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	0a5b      	lsrs	r3, r3, #9
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8093 	beq.w	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fbfc 	bl	8002ffa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002802:	e08e      	b.n	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002804:	e08d      	b.n	8002922 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	e007      	b.n	8002828 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d012      	beq.n	800285a <HAL_I2C_EV_IRQHandler+0x20e>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	0a5b      	lsrs	r3, r3, #9
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002850:	69b9      	ldr	r1, [r7, #24]
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 ffba 	bl	80037cc <I2C_Slave_ADDR>
 8002858:	e066      	b.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x22e>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	0a5b      	lsrs	r3, r3, #9
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fff4 	bl	8003860 <I2C_Slave_STOPF>
 8002878:	e056      	b.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	2b21      	cmp	r3, #33	; 0x21
 800287e:	d002      	beq.n	8002886 <HAL_I2C_EV_IRQHandler+0x23a>
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b29      	cmp	r3, #41	; 0x29
 8002884:	d125      	bne.n	80028d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	09db      	lsrs	r3, r3, #7
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00f      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x266>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	0a9b      	lsrs	r3, r3, #10
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x266>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fed0 	bl	8003650 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028b0:	e039      	b.n	8002926 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d033      	beq.n	8002926 <HAL_I2C_EV_IRQHandler+0x2da>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	0a5b      	lsrs	r3, r3, #9
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d02d      	beq.n	8002926 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fefd 	bl	80036ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028d0:	e029      	b.n	8002926 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00f      	beq.n	80028fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	0a9b      	lsrs	r3, r3, #10
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 ff08 	bl	800370c <I2C_SlaveReceive_RXNE>
 80028fc:	e014      	b.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00e      	beq.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	0a5b      	lsrs	r3, r3, #9
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 ff36 	bl	8003788 <I2C_SlaveReceive_BTF>
 800291c:	e004      	b.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800291e:	bf00      	nop
 8002920:	e002      	b.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002926:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08a      	sub	sp, #40	; 0x28
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002950:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00e      	beq.n	800297c <HAL_I2C_ER_IRQHandler+0x4e>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800297a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	0a5b      	lsrs	r3, r3, #9
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <HAL_I2C_ER_IRQHandler+0x78>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80029a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	0a9b      	lsrs	r3, r3, #10
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d03f      	beq.n	8002a32 <HAL_I2C_ER_IRQHandler+0x104>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d039      	beq.n	8002a32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80029be:	7efb      	ldrb	r3, [r7, #27]
 80029c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80029d8:	7ebb      	ldrb	r3, [r7, #26]
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d112      	bne.n	8002a04 <HAL_I2C_ER_IRQHandler+0xd6>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <HAL_I2C_ER_IRQHandler+0xd6>
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b21      	cmp	r3, #33	; 0x21
 80029e8:	d008      	beq.n	80029fc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b29      	cmp	r3, #41	; 0x29
 80029ee:	d005      	beq.n	80029fc <HAL_I2C_ER_IRQHandler+0xce>
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b28      	cmp	r3, #40	; 0x28
 80029f4:	d106      	bne.n	8002a04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b21      	cmp	r3, #33	; 0x21
 80029fa:	d103      	bne.n	8002a04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f001 f85f 	bl	8003ac0 <I2C_Slave_AF>
 8002a02:	e016      	b.n	8002a32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a16:	7efb      	ldrb	r3, [r7, #27]
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d002      	beq.n	8002a22 <HAL_I2C_ER_IRQHandler+0xf4>
 8002a1c:	7efb      	ldrb	r3, [r7, #27]
 8002a1e:	2b40      	cmp	r3, #64	; 0x40
 8002a20:	d107      	bne.n	8002a32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	0adb      	lsrs	r3, r3, #11
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00e      	beq.n	8002a5c <HAL_I2C_ER_IRQHandler+0x12e>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f043 0308 	orr.w	r3, r3, #8
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002a5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f001 f896 	bl	8003ba0 <I2C_ITError>
  }
}
 8002a74:	bf00      	nop
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d150      	bne.n	8002c14 <I2C_MasterTransmit_TXE+0xc8>
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b21      	cmp	r3, #33	; 0x21
 8002b76:	d14d      	bne.n	8002c14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d01d      	beq.n	8002bba <I2C_MasterTransmit_TXE+0x6e>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d01a      	beq.n	8002bba <I2C_MasterTransmit_TXE+0x6e>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b8a:	d016      	beq.n	8002bba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2211      	movs	r2, #17
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ff62 	bl	8002a7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bb8:	e060      	b.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bc8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d107      	bne.n	8002c04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff7d 	bl	8002afc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c02:	e03b      	b.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff35 	bl	8002a7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c12:	e033      	b.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b21      	cmp	r3, #33	; 0x21
 8002c18:	d005      	beq.n	8002c26 <I2C_MasterTransmit_TXE+0xda>
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d12d      	bne.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b22      	cmp	r3, #34	; 0x22
 8002c24:	d12a      	bne.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002c40:	e01c      	b.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d103      	bne.n	8002c56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f88e 	bl	8002d70 <I2C_MemoryTransmit_TXE_BTF>
}
 8002c54:	e012      	b.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c7a:	e7ff      	b.n	8002c7c <I2C_MasterTransmit_TXE+0x130>
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b21      	cmp	r3, #33	; 0x21
 8002c9c:	d164      	bne.n	8002d68 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d012      	beq.n	8002cce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ccc:	e04c      	b.n	8002d68 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d01d      	beq.n	8002d10 <I2C_MasterTransmit_BTF+0x8c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d01a      	beq.n	8002d10 <I2C_MasterTransmit_BTF+0x8c>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ce0:	d016      	beq.n	8002d10 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cf0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2211      	movs	r2, #17
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff feb7 	bl	8002a7c <HAL_I2C_MasterTxCpltCallback>
}
 8002d0e:	e02b      	b.n	8002d68 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d107      	bne.n	8002d5a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fed2 	bl	8002afc <HAL_I2C_MemTxCpltCallback>
}
 8002d58:	e006      	b.n	8002d68 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe8a 	bl	8002a7c <HAL_I2C_MasterTxCpltCallback>
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11d      	bne.n	8002dc4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10b      	bne.n	8002da8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002da6:	e073      	b.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	121b      	asrs	r3, r3, #8
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002dc2:	e065      	b.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10b      	bne.n	8002de4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002de2:	e055      	b.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d151      	bne.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b22      	cmp	r3, #34	; 0x22
 8002df0:	d10d      	bne.n	8002e0e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e00:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e0c:	e040      	b.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b21      	cmp	r3, #33	; 0x21
 8002e1c:	d112      	bne.n	8002e44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e42:	e025      	b.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d120      	bne.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b21      	cmp	r3, #33	; 0x21
 8002e52:	d11d      	bne.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e62:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fe36 	bl	8002afc <HAL_I2C_MemTxCpltCallback>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b22      	cmp	r3, #34	; 0x22
 8002eaa:	f040 80a2 	bne.w	8002ff2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d921      	bls.n	8002f00 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	f040 8082 	bne.w	8002ff2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002efe:	e078      	b.n	8002ff2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d074      	beq.n	8002ff2 <I2C_MasterReceive_RXNE+0x15a>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d002      	beq.n	8002f14 <I2C_MasterReceive_RXNE+0x7c>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d16e      	bne.n	8002ff2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f001 faf3 	bl	8004500 <I2C_WaitOnSTOPRequestThroughIT>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d142      	bne.n	8002fa6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d10a      	bne.n	8002f90 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fdc1 	bl	8002b10 <HAL_I2C_MemRxCpltCallback>
}
 8002f8e:	e030      	b.n	8002ff2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2212      	movs	r2, #18
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fd76 	bl	8002a90 <HAL_I2C_MasterRxCpltCallback>
}
 8002fa4:	e025      	b.n	8002ff2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fb4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fd99 	bl	8002b24 <HAL_I2C_ErrorCallback>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b04      	cmp	r3, #4
 8003010:	d11b      	bne.n	800304a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003020:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003048:	e0bd      	b.n	80031c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b03      	cmp	r3, #3
 8003052:	d129      	bne.n	80030a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00a      	beq.n	8003080 <I2C_MasterReceive_BTF+0x86>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d007      	beq.n	8003080 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030a6:	e08e      	b.n	80031c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d176      	bne.n	80031a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d002      	beq.n	80030be <I2C_MasterReceive_BTF+0xc4>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d108      	bne.n	80030d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e019      	b.n	8003104 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d002      	beq.n	80030dc <I2C_MasterReceive_BTF+0xe2>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d108      	bne.n	80030ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e00a      	b.n	8003104 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d007      	beq.n	8003104 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800315e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d10a      	bne.n	800318a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fcc4 	bl	8002b10 <HAL_I2C_MemRxCpltCallback>
}
 8003188:	e01d      	b.n	80031c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2212      	movs	r2, #18
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fc79 	bl	8002a90 <HAL_I2C_MasterRxCpltCallback>
}
 800319e:	e012      	b.n	80031c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d117      	bne.n	8003212 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80031fc:	e067      	b.n	80032ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	b2da      	uxtb	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]
}
 8003210:	e05d      	b.n	80032ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800321a:	d133      	bne.n	8003284 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b21      	cmp	r3, #33	; 0x21
 8003226:	d109      	bne.n	800323c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e008      	b.n	800324e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <I2C_Master_SB+0x92>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d108      	bne.n	8003272 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d032      	beq.n	80032ce <I2C_Master_SB+0x100>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02d      	beq.n	80032ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003280:	605a      	str	r2, [r3, #4]
}
 8003282:	e024      	b.n	80032ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10e      	bne.n	80032aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	b29b      	uxth	r3, r3
 8003292:	11db      	asrs	r3, r3, #7
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f003 0306 	and.w	r3, r3, #6
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f063 030f 	orn	r3, r3, #15
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
}
 80032a8:	e011      	b.n	80032ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10d      	bne.n	80032ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	11db      	asrs	r3, r3, #7
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 0306 	and.w	r3, r3, #6
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f063 030e 	orn	r3, r3, #14
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <I2C_Master_ADD10+0x26>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <I2C_Master_ADD10+0x48>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003320:	605a      	str	r2, [r3, #4]
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b091      	sub	sp, #68	; 0x44
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800333c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b22      	cmp	r3, #34	; 0x22
 8003356:	f040 8169 	bne.w	800362c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <I2C_Master_ADDR+0x54>
 8003362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d10b      	bne.n	8003382 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336a:	2300      	movs	r3, #0
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	e160      	b.n	8003644 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11d      	bne.n	80033c6 <I2C_Master_ADDR+0x98>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003392:	d118      	bne.n	80033c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003394:	2300      	movs	r3, #0
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	651a      	str	r2, [r3, #80]	; 0x50
 80033c4:	e13e      	b.n	8003644 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d113      	bne.n	80033f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e115      	b.n	8003624 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	f040 808a 	bne.w	8003518 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800340a:	d137      	bne.n	800347c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342a:	d113      	bne.n	8003454 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	e0e7      	b.n	8003624 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	623b      	str	r3, [r7, #32]
 8003468:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e0d3      	b.n	8003624 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	2b08      	cmp	r3, #8
 8003480:	d02e      	beq.n	80034e0 <I2C_Master_ADDR+0x1b2>
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2b20      	cmp	r3, #32
 8003486:	d02b      	beq.n	80034e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	2b12      	cmp	r3, #18
 800348c:	d102      	bne.n	8003494 <I2C_Master_ADDR+0x166>
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	2b01      	cmp	r3, #1
 8003492:	d125      	bne.n	80034e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00e      	beq.n	80034b8 <I2C_Master_ADDR+0x18a>
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	2b02      	cmp	r3, #2
 800349e:	d00b      	beq.n	80034b8 <I2C_Master_ADDR+0x18a>
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d008      	beq.n	80034b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e007      	b.n	80034c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	e0a1      	b.n	8003624 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e085      	b.n	8003624 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d14d      	bne.n	80035be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b04      	cmp	r3, #4
 8003526:	d016      	beq.n	8003556 <I2C_Master_ADDR+0x228>
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	2b02      	cmp	r3, #2
 800352c:	d013      	beq.n	8003556 <I2C_Master_ADDR+0x228>
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	2b10      	cmp	r3, #16
 8003532:	d010      	beq.n	8003556 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e007      	b.n	8003566 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003564:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003574:	d117      	bne.n	80035a6 <I2C_Master_ADDR+0x278>
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800357c:	d00b      	beq.n	8003596 <I2C_Master_ADDR+0x268>
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2b01      	cmp	r3, #1
 8003582:	d008      	beq.n	8003596 <I2C_Master_ADDR+0x268>
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	2b08      	cmp	r3, #8
 8003588:	d005      	beq.n	8003596 <I2C_Master_ADDR+0x268>
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b10      	cmp	r3, #16
 800358e:	d002      	beq.n	8003596 <I2C_Master_ADDR+0x268>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	2b20      	cmp	r3, #32
 8003594:	d107      	bne.n	80035a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	e032      	b.n	8003624 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035dc:	d117      	bne.n	800360e <I2C_Master_ADDR+0x2e0>
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e4:	d00b      	beq.n	80035fe <I2C_Master_ADDR+0x2d0>
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d008      	beq.n	80035fe <I2C_Master_ADDR+0x2d0>
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d005      	beq.n	80035fe <I2C_Master_ADDR+0x2d0>
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d002      	beq.n	80035fe <I2C_Master_ADDR+0x2d0>
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d107      	bne.n	800360e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800360c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800362a:	e00b      	b.n	8003644 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
}
 8003642:	e7ff      	b.n	8003644 <I2C_Master_ADDR+0x316>
 8003644:	bf00      	nop
 8003646:	3744      	adds	r7, #68	; 0x44
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02b      	beq.n	80036c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <I2C_SlaveTransmit_TXE+0x72>
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b29      	cmp	r3, #41	; 0x29
 800369c:	d111      	bne.n	80036c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2221      	movs	r2, #33	; 0x21
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2228      	movs	r2, #40	; 0x28
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff f9f1 	bl	8002aa4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d02c      	beq.n	8003780 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d114      	bne.n	8003780 <I2C_SlaveReceive_RXNE+0x74>
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b2a      	cmp	r3, #42	; 0x2a
 800375a:	d111      	bne.n	8003780 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2222      	movs	r2, #34	; 0x22
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2228      	movs	r2, #40	; 0x28
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff f99c 	bl	8002ab8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037e6:	2b28      	cmp	r3, #40	; 0x28
 80037e8:	d127      	bne.n	800383a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	09db      	lsrs	r3, r3, #7
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	81bb      	strh	r3, [r7, #12]
 800381c:	e002      	b.n	8003824 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800382c:	89ba      	ldrh	r2, [r7, #12]
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff f94a 	bl	8002acc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003838:	e00e      	b.n	8003858 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800387e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038bc:	d172      	bne.n	80039a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b22      	cmp	r3, #34	; 0x22
 80038c2:	d002      	beq.n	80038ca <I2C_Slave_STOPF+0x6a>
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b2a      	cmp	r3, #42	; 0x2a
 80038c8:	d135      	bne.n	8003936 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f043 0204 	orr.w	r2, r3, #4
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe f879 	bl	80019fa <HAL_DMA_GetState>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d049      	beq.n	80039a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	4a69      	ldr	r2, [pc, #420]	; (8003ab8 <I2C_Slave_STOPF+0x258>)
 8003914:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe f84b 	bl	80019b6 <HAL_DMA_Abort_IT>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d03d      	beq.n	80039a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003930:	4610      	mov	r0, r2
 8003932:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003934:	e035      	b.n	80039a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f043 0204 	orr.w	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe f843 	bl	80019fa <HAL_DMA_GetState>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d014      	beq.n	80039a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397e:	4a4e      	ldr	r2, [pc, #312]	; (8003ab8 <I2C_Slave_STOPF+0x258>)
 8003980:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe f815 	bl	80019b6 <HAL_DMA_Abort_IT>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800399c:	4610      	mov	r0, r2
 800399e:	4798      	blx	r3
 80039a0:	e000      	b.n	80039a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d03e      	beq.n	8003a2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d112      	bne.n	80039e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d112      	bne.n	8003a16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f8b3 	bl	8003ba0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003a3a:	e039      	b.n	8003ab0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a40:	d109      	bne.n	8003a56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2228      	movs	r2, #40	; 0x28
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff f831 	bl	8002ab8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b28      	cmp	r3, #40	; 0x28
 8003a60:	d111      	bne.n	8003a86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a15      	ldr	r2, [pc, #84]	; (8003abc <I2C_Slave_STOPF+0x25c>)
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff f832 	bl	8002ae8 <HAL_I2C_ListenCpltCallback>
}
 8003a84:	e014      	b.n	8003ab0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	2b22      	cmp	r3, #34	; 0x22
 8003a8c:	d002      	beq.n	8003a94 <I2C_Slave_STOPF+0x234>
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b22      	cmp	r3, #34	; 0x22
 8003a92:	d10d      	bne.n	8003ab0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff f804 	bl	8002ab8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	08004101 	.word	0x08004101
 8003abc:	ffff0000 	.word	0xffff0000

08003ac0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ace:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d002      	beq.n	8003ae2 <I2C_Slave_AF+0x22>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d129      	bne.n	8003b36 <I2C_Slave_AF+0x76>
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b28      	cmp	r3, #40	; 0x28
 8003ae6:	d126      	bne.n	8003b36 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <I2C_Slave_AF+0xdc>)
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003afc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b06:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe ffda 	bl	8002ae8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003b34:	e02e      	b.n	8003b94 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b21      	cmp	r3, #33	; 0x21
 8003b3a:	d126      	bne.n	8003b8a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <I2C_Slave_AF+0xdc>)
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2221      	movs	r2, #33	; 0x21
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b66:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b70:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b80:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fe ff8e 	bl	8002aa4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003b88:	e004      	b.n	8003b94 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b92:	615a      	str	r2, [r3, #20]
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	ffff0000 	.word	0xffff0000

08003ba0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d002      	beq.n	8003bc4 <I2C_ITError+0x24>
 8003bbe:	7bbb      	ldrb	r3, [r7, #14]
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d10a      	bne.n	8003bda <I2C_ITError+0x3a>
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b22      	cmp	r3, #34	; 0x22
 8003bc8:	d107      	bne.n	8003bda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003be0:	2b28      	cmp	r3, #40	; 0x28
 8003be2:	d107      	bne.n	8003bf4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2228      	movs	r2, #40	; 0x28
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bf2:	e015      	b.n	8003c20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c02:	d00a      	beq.n	8003c1a <I2C_ITError+0x7a>
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b60      	cmp	r3, #96	; 0x60
 8003c08:	d007      	beq.n	8003c1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d162      	bne.n	8003cf6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d020      	beq.n	8003c90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	4a6a      	ldr	r2, [pc, #424]	; (8003dfc <I2C_ITError+0x25c>)
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fd feab 	bl	80019b6 <HAL_DMA_Abort_IT>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8089 	beq.w	8003d7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4798      	blx	r3
 8003c8e:	e074      	b.n	8003d7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	4a59      	ldr	r2, [pc, #356]	; (8003dfc <I2C_ITError+0x25c>)
 8003c96:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fd fe8a 	bl	80019b6 <HAL_DMA_Abort_IT>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d068      	beq.n	8003d7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b40      	cmp	r3, #64	; 0x40
 8003cb4:	d10b      	bne.n	8003cce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
 8003cf4:	e041      	b.n	8003d7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b60      	cmp	r3, #96	; 0x60
 8003d00:	d125      	bne.n	8003d4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d10b      	bne.n	8003d36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fe fef6 	bl	8002b38 <HAL_I2C_AbortCpltCallback>
 8003d4c:	e015      	b.n	8003d7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d10b      	bne.n	8003d74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe fed5 	bl	8002b24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10e      	bne.n	8003da8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d109      	bne.n	8003da8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d113      	bne.n	8003df4 <I2C_ITError+0x254>
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b28      	cmp	r3, #40	; 0x28
 8003dd0:	d110      	bne.n	8003df4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <I2C_ITError+0x260>)
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fe fe7a 	bl	8002ae8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	08004101 	.word	0x08004101
 8003e00:	ffff0000 	.word	0xffff0000

08003e04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	817b      	strh	r3, [r7, #10]
 8003e16:	460b      	mov	r3, r1
 8003e18:	813b      	strh	r3, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fa08 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e54:	d103      	bne.n	8003e5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e05f      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	492d      	ldr	r1, [pc, #180]	; (8003f2c <I2C_RequestMemoryWrite+0x128>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fa40 	bl	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e04c      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	6a39      	ldr	r1, [r7, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 faaa 	bl	80043fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d107      	bne.n	8003ec6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e02b      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed0:	893b      	ldrh	r3, [r7, #8]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	e021      	b.n	8003f20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	6a39      	ldr	r1, [r7, #32]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa84 	bl	80043fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d107      	bne.n	8003f12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e005      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f16:	893b      	ldrh	r3, [r7, #8]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	00010002 	.word	0x00010002

08003f30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	817b      	strh	r3, [r7, #10]
 8003f42:	460b      	mov	r3, r1
 8003f44:	813b      	strh	r3, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f96a 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f90:	d103      	bne.n	8003f9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0aa      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	4952      	ldr	r1, [pc, #328]	; (80040fc <I2C_RequestMemoryRead+0x1cc>)
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f9a2 	bl	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e097      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fa0c 	bl	80043fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e076      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]
 8004016:	e021      	b.n	800405c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004018:	893b      	ldrh	r3, [r7, #8]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	b29b      	uxth	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004028:	6a39      	ldr	r1, [r7, #32]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f9e6 	bl	80043fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b04      	cmp	r3, #4
 800403c:	d107      	bne.n	800404e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e050      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004052:	893b      	ldrh	r3, [r7, #8]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	6a39      	ldr	r1, [r7, #32]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f9cb 	bl	80043fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	2b04      	cmp	r3, #4
 8004072:	d107      	bne.n	8004084 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004082:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e035      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004096:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2200      	movs	r2, #0
 80040a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f8d3 	bl	8004250 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040be:	d103      	bne.n	80040c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e013      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	6a3a      	ldr	r2, [r7, #32]
 80040e0:	4906      	ldr	r1, [pc, #24]	; (80040fc <I2C_RequestMemoryRead+0x1cc>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f90b 	bl	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	00010002 	.word	0x00010002

08004100 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004118:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800411a:	4b4b      	ldr	r3, [pc, #300]	; (8004248 <I2C_DMAAbort+0x148>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	4a4a      	ldr	r2, [pc, #296]	; (800424c <I2C_DMAAbort+0x14c>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0a1a      	lsrs	r2, r3, #8
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	00da      	lsls	r2, r3, #3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004146:	e00a      	b.n	800415e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415c:	d0ea      	beq.n	8004134 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416a:	2200      	movs	r2, #0
 800416c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a0:	2200      	movs	r2, #0
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	2200      	movs	r2, #0
 80041b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d10e      	bne.n	80041ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2200      	movs	r2, #0
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7fe fca6 	bl	8002b38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041ec:	e027      	b.n	800423e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041f4:	2b28      	cmp	r3, #40	; 0x28
 80041f6:	d117      	bne.n	8004228 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004216:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2228      	movs	r2, #40	; 0x28
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004226:	e007      	b.n	8004238 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f7fe fc73 	bl	8002b24 <HAL_I2C_ErrorCallback>
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000010 	.word	0x20000010
 800424c:	14f8b589 	.word	0x14f8b589

08004250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004260:	e025      	b.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004268:	d021      	beq.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fd fa63 	bl	8001734 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d116      	bne.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e023      	b.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d10d      	bne.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	43da      	mvns	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	e00c      	b.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	43da      	mvns	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d0b6      	beq.n	8004262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430c:	e051      	b.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d123      	bne.n	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004336:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0204 	orr.w	r2, r3, #4
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e046      	b.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800436c:	d021      	beq.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fd f9e1 	bl	8001734 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d116      	bne.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e020      	b.n	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d10c      	bne.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	43da      	mvns	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	e00b      	b.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d18d      	bne.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004408:	e02d      	b.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f900 	bl	8004610 <I2C_IsAcknowledgeFailed>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e02d      	b.n	8004476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004420:	d021      	beq.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fd f987 	bl	8001734 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d116      	bne.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e007      	b.n	8004476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004470:	2b80      	cmp	r3, #128	; 0x80
 8004472:	d1ca      	bne.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448a:	e02d      	b.n	80044e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f8bf 	bl	8004610 <I2C_IsAcknowledgeFailed>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e02d      	b.n	80044f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a2:	d021      	beq.n	80044e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7fd f946 	bl	8001734 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d116      	bne.n	80044e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e007      	b.n	80044f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d1ca      	bne.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800450c:	4b13      	ldr	r3, [pc, #76]	; (800455c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	4a13      	ldr	r2, [pc, #76]	; (8004560 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	0a1a      	lsrs	r2, r3, #8
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3b01      	subs	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e008      	b.n	8004550 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800454c:	d0e9      	beq.n	8004522 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	20000010 	.word	0x20000010
 8004560:	14f8b589 	.word	0x14f8b589

08004564 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004570:	e042      	b.n	80045f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d119      	bne.n	80045b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e029      	b.n	8004608 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b4:	f7fd f8be 	bl	8001734 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e007      	b.n	8004608 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d1b5      	bne.n	8004572 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004626:	d11b      	bne.n	8004660 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004630:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f043 0204 	orr.w	r2, r3, #4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800467e:	d103      	bne.n	8004688 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004686:	e007      	b.n	8004698 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004690:	d102      	bne.n	8004698 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e264      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d075      	beq.n	80047ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c2:	4ba3      	ldr	r3, [pc, #652]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d112      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046da:	4b9d      	ldr	r3, [pc, #628]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d10b      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	4b99      	ldr	r3, [pc, #612]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d05b      	beq.n	80047ac <HAL_RCC_OscConfig+0x108>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d157      	bne.n	80047ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e23f      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x74>
 800470a:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a90      	ldr	r2, [pc, #576]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x98>
 8004722:	4b8b      	ldr	r3, [pc, #556]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a8a      	ldr	r2, [pc, #552]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a87      	ldr	r2, [pc, #540]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 800473c:	4b84      	ldr	r3, [pc, #528]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a83      	ldr	r2, [pc, #524]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a80      	ldr	r2, [pc, #512]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fc ffea 	bl	8001734 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004764:	f7fc ffe6 	bl	8001734 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e204      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b76      	ldr	r3, [pc, #472]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fc ffd6 	bl	8001734 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800478c:	f7fc ffd2 	bl	8001734 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1f0      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0xe8>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d063      	beq.n	8004882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b62      	ldr	r3, [pc, #392]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d2:	4b5f      	ldr	r3, [pc, #380]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	4b5c      	ldr	r3, [pc, #368]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1c4      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b56      	ldr	r3, [pc, #344]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4952      	ldr	r1, [pc, #328]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	e03a      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <HAL_RCC_OscConfig+0x2b0>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fc ff8b 	bl	8001734 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004822:	f7fc ff87 	bl	8001734 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1a5      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	4b46      	ldr	r3, [pc, #280]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4940      	ldr	r1, [pc, #256]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_OscConfig+0x2b0>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fc ff6a 	bl	8001734 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004864:	f7fc ff66 	bl	8001734 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e184      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d030      	beq.n	80048f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_RCC_OscConfig+0x2b4>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fc ff4a 	bl	8001734 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fc ff46 	bl	8001734 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e164      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	4b26      	ldr	r3, [pc, #152]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x200>
 80048c2:	e015      	b.n	80048f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x2b4>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7fc ff33 	bl	8001734 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d2:	f7fc ff2f 	bl	8001734 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e14d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 80048e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80a0 	beq.w	8004a3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fe:	2300      	movs	r3, #0
 8004900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491c:	6413      	str	r3, [r2, #64]	; 0x40
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_OscConfig+0x2b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d121      	bne.n	800497e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_RCC_OscConfig+0x2b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a07      	ldr	r2, [pc, #28]	; (800495c <HAL_RCC_OscConfig+0x2b8>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004946:	f7fc fef5 	bl	8001734 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	e011      	b.n	8004972 <HAL_RCC_OscConfig+0x2ce>
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	42470000 	.word	0x42470000
 8004958:	42470e80 	.word	0x42470e80
 800495c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004960:	f7fc fee8 	bl	8001734 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e106      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCC_OscConfig+0x4e4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d106      	bne.n	8004994 <HAL_RCC_OscConfig+0x2f0>
 8004986:	4b81      	ldr	r3, [pc, #516]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a80      	ldr	r2, [pc, #512]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6713      	str	r3, [r2, #112]	; 0x70
 8004992:	e01c      	b.n	80049ce <HAL_RCC_OscConfig+0x32a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b05      	cmp	r3, #5
 800499a:	d10c      	bne.n	80049b6 <HAL_RCC_OscConfig+0x312>
 800499c:	4b7b      	ldr	r3, [pc, #492]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a7a      	ldr	r2, [pc, #488]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049a2:	f043 0304 	orr.w	r3, r3, #4
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	4b78      	ldr	r3, [pc, #480]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	4a77      	ldr	r2, [pc, #476]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70
 80049b4:	e00b      	b.n	80049ce <HAL_RCC_OscConfig+0x32a>
 80049b6:	4b75      	ldr	r3, [pc, #468]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a74      	ldr	r2, [pc, #464]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	4b72      	ldr	r3, [pc, #456]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	4a71      	ldr	r2, [pc, #452]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d015      	beq.n	8004a02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fc fead 	bl	8001734 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049dc:	e00a      	b.n	80049f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fc fea9 	bl	8001734 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e0c5      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f4:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ee      	beq.n	80049de <HAL_RCC_OscConfig+0x33a>
 8004a00:	e014      	b.n	8004a2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a02:	f7fc fe97 	bl	8001734 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fc fe93 	bl	8001734 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0af      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a20:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ee      	bne.n	8004a0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a32:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a55      	ldr	r2, [pc, #340]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 809b 	beq.w	8004b7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d05c      	beq.n	8004b0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d141      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5c:	4b4c      	ldr	r3, [pc, #304]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fc fe67 	bl	8001734 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fc fe63 	bl	8001734 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e081      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7c:	4b43      	ldr	r3, [pc, #268]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	019b      	lsls	r3, r3, #6
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	4937      	ldr	r1, [pc, #220]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fc fe3c 	bl	8001734 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fc fe38 	bl	8001734 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e056      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x41c>
 8004ade:	e04e      	b.n	8004b7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae0:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae6:	f7fc fe25 	bl	8001734 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fc fe21 	bl	8001734 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e03f      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b00:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x44a>
 8004b0c:	e037      	b.n	8004b7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e032      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <HAL_RCC_OscConfig+0x4e8>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d028      	beq.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d121      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d11a      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d001      	beq.n	8004b7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	42470060 	.word	0x42470060

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0cc      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b68      	ldr	r3, [pc, #416]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d90c      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c00:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a52      	ldr	r2, [pc, #328]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b50      	ldr	r3, [pc, #320]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	494d      	ldr	r1, [pc, #308]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d044      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b3f      	ldr	r3, [pc, #252]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e067      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4934      	ldr	r1, [pc, #208]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fc fd56 	bl	8001734 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8c:	f7fc fd52 	bl	8001734 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e04f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 020c 	and.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1eb      	bne.n	8004c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20c      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e032      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4916      	ldr	r1, [pc, #88]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	490e      	ldr	r1, [pc, #56]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d1a:	f000 f821 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	490a      	ldr	r1, [pc, #40]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	5ccb      	ldrb	r3, [r1, r3]
 8004d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d32:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fc fcb6 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00
 8004d50:	40023800 	.word	0x40023800
 8004d54:	0800745c 	.word	0x0800745c
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	20000014 	.word	0x20000014

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d66:	2100      	movs	r1, #0
 8004d68:	6079      	str	r1, [r7, #4]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	60f9      	str	r1, [r7, #12]
 8004d6e:	2100      	movs	r1, #0
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d72:	2100      	movs	r1, #0
 8004d74:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d76:	4952      	ldr	r1, [pc, #328]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d78:	6889      	ldr	r1, [r1, #8]
 8004d7a:	f001 010c 	and.w	r1, r1, #12
 8004d7e:	2908      	cmp	r1, #8
 8004d80:	d00d      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0x3e>
 8004d82:	2908      	cmp	r1, #8
 8004d84:	f200 8094 	bhi.w	8004eb0 <HAL_RCC_GetSysClockFreq+0x150>
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0x32>
 8004d8c:	2904      	cmp	r1, #4
 8004d8e:	d003      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x38>
 8004d90:	e08e      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d92:	4b4c      	ldr	r3, [pc, #304]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004d94:	60bb      	str	r3, [r7, #8]
       break;
 8004d96:	e08e      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d98:	4b4b      	ldr	r3, [pc, #300]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d9a:	60bb      	str	r3, [r7, #8]
      break;
 8004d9c:	e08b      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d9e:	4948      	ldr	r1, [pc, #288]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da0:	6849      	ldr	r1, [r1, #4]
 8004da2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004da6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da8:	4945      	ldr	r1, [pc, #276]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004daa:	6849      	ldr	r1, [r1, #4]
 8004dac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d024      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db4:	4942      	ldr	r1, [pc, #264]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004db6:	6849      	ldr	r1, [r1, #4]
 8004db8:	0989      	lsrs	r1, r1, #6
 8004dba:	4608      	mov	r0, r1
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004dc4:	f04f 0500 	mov.w	r5, #0
 8004dc8:	ea00 0204 	and.w	r2, r0, r4
 8004dcc:	ea01 0305 	and.w	r3, r1, r5
 8004dd0:	493d      	ldr	r1, [pc, #244]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004dd2:	fb01 f003 	mul.w	r0, r1, r3
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	fb01 f102 	mul.w	r1, r1, r2
 8004ddc:	1844      	adds	r4, r0, r1
 8004dde:	493a      	ldr	r1, [pc, #232]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004de0:	fba2 0101 	umull	r0, r1, r2, r1
 8004de4:	1863      	adds	r3, r4, r1
 8004de6:	4619      	mov	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	f7fb fa46 	bl	8000280 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e04a      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfe:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	461a      	mov	r2, r3
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	ea02 0400 	and.w	r4, r2, r0
 8004e16:	ea03 0501 	and.w	r5, r3, r1
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	014b      	lsls	r3, r1, #5
 8004e28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e2c:	0142      	lsls	r2, r0, #5
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	1b00      	subs	r0, r0, r4
 8004e34:	eb61 0105 	sbc.w	r1, r1, r5
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	018b      	lsls	r3, r1, #6
 8004e42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e46:	0182      	lsls	r2, r0, #6
 8004e48:	1a12      	subs	r2, r2, r0
 8004e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	00d9      	lsls	r1, r3, #3
 8004e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e5c:	00d0      	lsls	r0, r2, #3
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	1912      	adds	r2, r2, r4
 8004e64:	eb45 0303 	adc.w	r3, r5, r3
 8004e68:	f04f 0000 	mov.w	r0, #0
 8004e6c:	f04f 0100 	mov.w	r1, #0
 8004e70:	0299      	lsls	r1, r3, #10
 8004e72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e76:	0290      	lsls	r0, r2, #10
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	f7fb f9fa 	bl	8000280 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4613      	mov	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e94:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	60bb      	str	r3, [r7, #8]
      break;
 8004eae:	e002      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb0:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004eb2:	60bb      	str	r3, [r7, #8]
      break;
 8004eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	017d7840 	.word	0x017d7840

08004ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000010 	.word	0x20000010

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee8:	f7ff fff0 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0a9b      	lsrs	r3, r3, #10
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4903      	ldr	r1, [pc, #12]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	0800746c 	.word	0x0800746c

08004f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f10:	f7ff ffdc 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0b5b      	lsrs	r3, r3, #13
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4903      	ldr	r1, [pc, #12]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f22:	5ccb      	ldrb	r3, [r1, r3]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	0800746c 	.word	0x0800746c

08004f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e03f      	b.n	8004fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fc fb12 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	; 0x24
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f929 	bl	80051d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08a      	sub	sp, #40	; 0x28
 8004fd2:	af02      	add	r7, sp, #8
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d17c      	bne.n	80050e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_UART_Transmit+0x2c>
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e075      	b.n	80050ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_UART_Transmit+0x3e>
 8005008:	2302      	movs	r3, #2
 800500a:	e06e      	b.n	80050ea <HAL_UART_Transmit+0x11c>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2221      	movs	r2, #33	; 0x21
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005022:	f7fc fb87 	bl	8001734 <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d108      	bne.n	8005050 <HAL_UART_Transmit+0x82>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e003      	b.n	8005058 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005060:	e02a      	b.n	80050b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f840 	bl	80050f2 <UART_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e036      	b.n	80050ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e007      	b.n	80050aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1cf      	bne.n	8005062 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2140      	movs	r1, #64	; 0x40
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f810 	bl	80050f2 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e006      	b.n	80050ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b090      	sub	sp, #64	; 0x40
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	4613      	mov	r3, r2
 8005100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005102:	e050      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510a:	d04c      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800510c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x30>
 8005112:	f7fc fb0f 	bl	8001734 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800511e:	429a      	cmp	r2, r3
 8005120:	d241      	bcs.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005142:	637a      	str	r2, [r7, #52]	; 0x34
 8005144:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	613b      	str	r3, [r7, #16]
   return(result);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005176:	623a      	str	r2, [r7, #32]
 8005178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	69f9      	ldr	r1, [r7, #28]
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	61bb      	str	r3, [r7, #24]
   return(result);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e5      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e00f      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4013      	ands	r3, r2
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d09f      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3740      	adds	r7, #64	; 0x40
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	b09f      	sub	sp, #124	; 0x7c
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	ea40 0301 	orr.w	r3, r0, r1
 80051f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	431a      	orrs	r2, r3
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4313      	orrs	r3, r2
 8005208:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800520a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005214:	f021 010c 	bic.w	r1, r1, #12
 8005218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800521e:	430b      	orrs	r3, r1
 8005220:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	6999      	ldr	r1, [r3, #24]
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	ea40 0301 	orr.w	r3, r0, r1
 8005238:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800523a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4bc5      	ldr	r3, [pc, #788]	; (8005554 <UART_SetConfig+0x384>)
 8005240:	429a      	cmp	r2, r3
 8005242:	d004      	beq.n	800524e <UART_SetConfig+0x7e>
 8005244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4bc3      	ldr	r3, [pc, #780]	; (8005558 <UART_SetConfig+0x388>)
 800524a:	429a      	cmp	r2, r3
 800524c:	d103      	bne.n	8005256 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800524e:	f7ff fe5d 	bl	8004f0c <HAL_RCC_GetPCLK2Freq>
 8005252:	6778      	str	r0, [r7, #116]	; 0x74
 8005254:	e002      	b.n	800525c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005256:	f7ff fe45 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 800525a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005264:	f040 80b6 	bne.w	80053d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800526a:	461c      	mov	r4, r3
 800526c:	f04f 0500 	mov.w	r5, #0
 8005270:	4622      	mov	r2, r4
 8005272:	462b      	mov	r3, r5
 8005274:	1891      	adds	r1, r2, r2
 8005276:	6439      	str	r1, [r7, #64]	; 0x40
 8005278:	415b      	adcs	r3, r3
 800527a:	647b      	str	r3, [r7, #68]	; 0x44
 800527c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005280:	1912      	adds	r2, r2, r4
 8005282:	eb45 0303 	adc.w	r3, r5, r3
 8005286:	f04f 0000 	mov.w	r0, #0
 800528a:	f04f 0100 	mov.w	r1, #0
 800528e:	00d9      	lsls	r1, r3, #3
 8005290:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005294:	00d0      	lsls	r0, r2, #3
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	1911      	adds	r1, r2, r4
 800529c:	6639      	str	r1, [r7, #96]	; 0x60
 800529e:	416b      	adcs	r3, r5
 80052a0:	667b      	str	r3, [r7, #100]	; 0x64
 80052a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80052b0:	415b      	adcs	r3, r3
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052bc:	f7fa ffe0 	bl	8000280 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4ba5      	ldr	r3, [pc, #660]	; (800555c <UART_SetConfig+0x38c>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	011e      	lsls	r6, r3, #4
 80052ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d0:	461c      	mov	r4, r3
 80052d2:	f04f 0500 	mov.w	r5, #0
 80052d6:	4622      	mov	r2, r4
 80052d8:	462b      	mov	r3, r5
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	6339      	str	r1, [r7, #48]	; 0x30
 80052de:	415b      	adcs	r3, r3
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34
 80052e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052e6:	1912      	adds	r2, r2, r4
 80052e8:	eb45 0303 	adc.w	r3, r5, r3
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	00d9      	lsls	r1, r3, #3
 80052f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052fa:	00d0      	lsls	r0, r2, #3
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	1911      	adds	r1, r2, r4
 8005302:	65b9      	str	r1, [r7, #88]	; 0x58
 8005304:	416b      	adcs	r3, r5
 8005306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	461a      	mov	r2, r3
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	1891      	adds	r1, r2, r2
 8005314:	62b9      	str	r1, [r7, #40]	; 0x28
 8005316:	415b      	adcs	r3, r3
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800531e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005322:	f7fa ffad 	bl	8000280 <__aeabi_uldivmod>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4b8c      	ldr	r3, [pc, #560]	; (800555c <UART_SetConfig+0x38c>)
 800532c:	fba3 1302 	umull	r1, r3, r3, r2
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	2164      	movs	r1, #100	; 0x64
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	3332      	adds	r3, #50	; 0x32
 800533e:	4a87      	ldr	r2, [pc, #540]	; (800555c <UART_SetConfig+0x38c>)
 8005340:	fba2 2303 	umull	r2, r3, r2, r3
 8005344:	095b      	lsrs	r3, r3, #5
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800534c:	441e      	add	r6, r3
 800534e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005350:	4618      	mov	r0, r3
 8005352:	f04f 0100 	mov.w	r1, #0
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	1894      	adds	r4, r2, r2
 800535c:	623c      	str	r4, [r7, #32]
 800535e:	415b      	adcs	r3, r3
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005366:	1812      	adds	r2, r2, r0
 8005368:	eb41 0303 	adc.w	r3, r1, r3
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	f04f 0500 	mov.w	r5, #0
 8005374:	00dd      	lsls	r5, r3, #3
 8005376:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800537a:	00d4      	lsls	r4, r2, #3
 800537c:	4622      	mov	r2, r4
 800537e:	462b      	mov	r3, r5
 8005380:	1814      	adds	r4, r2, r0
 8005382:	653c      	str	r4, [r7, #80]	; 0x50
 8005384:	414b      	adcs	r3, r1
 8005386:	657b      	str	r3, [r7, #84]	; 0x54
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	461a      	mov	r2, r3
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	1891      	adds	r1, r2, r2
 8005394:	61b9      	str	r1, [r7, #24]
 8005396:	415b      	adcs	r3, r3
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800539e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053a2:	f7fa ff6d 	bl	8000280 <__aeabi_uldivmod>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4b6c      	ldr	r3, [pc, #432]	; (800555c <UART_SetConfig+0x38c>)
 80053ac:	fba3 1302 	umull	r1, r3, r3, r2
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	2164      	movs	r1, #100	; 0x64
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	3332      	adds	r3, #50	; 0x32
 80053be:	4a67      	ldr	r2, [pc, #412]	; (800555c <UART_SetConfig+0x38c>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	f003 0207 	and.w	r2, r3, #7
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4432      	add	r2, r6
 80053d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053d2:	e0b9      	b.n	8005548 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d6:	461c      	mov	r4, r3
 80053d8:	f04f 0500 	mov.w	r5, #0
 80053dc:	4622      	mov	r2, r4
 80053de:	462b      	mov	r3, r5
 80053e0:	1891      	adds	r1, r2, r2
 80053e2:	6139      	str	r1, [r7, #16]
 80053e4:	415b      	adcs	r3, r3
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053ec:	1912      	adds	r2, r2, r4
 80053ee:	eb45 0303 	adc.w	r3, r5, r3
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	00d9      	lsls	r1, r3, #3
 80053fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005400:	00d0      	lsls	r0, r2, #3
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	eb12 0804 	adds.w	r8, r2, r4
 800540a:	eb43 0905 	adc.w	r9, r3, r5
 800540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	f04f 0100 	mov.w	r1, #0
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	008b      	lsls	r3, r1, #2
 8005422:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005426:	0082      	lsls	r2, r0, #2
 8005428:	4640      	mov	r0, r8
 800542a:	4649      	mov	r1, r9
 800542c:	f7fa ff28 	bl	8000280 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4b49      	ldr	r3, [pc, #292]	; (800555c <UART_SetConfig+0x38c>)
 8005436:	fba3 2302 	umull	r2, r3, r3, r2
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	011e      	lsls	r6, r3, #4
 800543e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005440:	4618      	mov	r0, r3
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	1894      	adds	r4, r2, r2
 800544c:	60bc      	str	r4, [r7, #8]
 800544e:	415b      	adcs	r3, r3
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005456:	1812      	adds	r2, r2, r0
 8005458:	eb41 0303 	adc.w	r3, r1, r3
 800545c:	f04f 0400 	mov.w	r4, #0
 8005460:	f04f 0500 	mov.w	r5, #0
 8005464:	00dd      	lsls	r5, r3, #3
 8005466:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800546a:	00d4      	lsls	r4, r2, #3
 800546c:	4622      	mov	r2, r4
 800546e:	462b      	mov	r3, r5
 8005470:	1814      	adds	r4, r2, r0
 8005472:	64bc      	str	r4, [r7, #72]	; 0x48
 8005474:	414b      	adcs	r3, r1
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	008b      	lsls	r3, r1, #2
 800548c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005490:	0082      	lsls	r2, r0, #2
 8005492:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005496:	f7fa fef3 	bl	8000280 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4b2f      	ldr	r3, [pc, #188]	; (800555c <UART_SetConfig+0x38c>)
 80054a0:	fba3 1302 	umull	r1, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	2164      	movs	r1, #100	; 0x64
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	3332      	adds	r3, #50	; 0x32
 80054b2:	4a2a      	ldr	r2, [pc, #168]	; (800555c <UART_SetConfig+0x38c>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054be:	441e      	add	r6, r3
 80054c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c2:	4618      	mov	r0, r3
 80054c4:	f04f 0100 	mov.w	r1, #0
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	1894      	adds	r4, r2, r2
 80054ce:	603c      	str	r4, [r7, #0]
 80054d0:	415b      	adcs	r3, r3
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d8:	1812      	adds	r2, r2, r0
 80054da:	eb41 0303 	adc.w	r3, r1, r3
 80054de:	f04f 0400 	mov.w	r4, #0
 80054e2:	f04f 0500 	mov.w	r5, #0
 80054e6:	00dd      	lsls	r5, r3, #3
 80054e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054ec:	00d4      	lsls	r4, r2, #3
 80054ee:	4622      	mov	r2, r4
 80054f0:	462b      	mov	r3, r5
 80054f2:	eb12 0a00 	adds.w	sl, r2, r0
 80054f6:	eb43 0b01 	adc.w	fp, r3, r1
 80054fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4618      	mov	r0, r3
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	008b      	lsls	r3, r1, #2
 800550e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005512:	0082      	lsls	r2, r0, #2
 8005514:	4650      	mov	r0, sl
 8005516:	4659      	mov	r1, fp
 8005518:	f7fa feb2 	bl	8000280 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <UART_SetConfig+0x38c>)
 8005522:	fba3 1302 	umull	r1, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2164      	movs	r1, #100	; 0x64
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	3332      	adds	r3, #50	; 0x32
 8005534:	4a09      	ldr	r2, [pc, #36]	; (800555c <UART_SetConfig+0x38c>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4432      	add	r2, r6
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	377c      	adds	r7, #124	; 0x7c
 800554c:	46bd      	mov	sp, r7
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	bf00      	nop
 8005554:	40011000 	.word	0x40011000
 8005558:	40011400 	.word	0x40011400
 800555c:	51eb851f 	.word	0x51eb851f

08005560 <__errno>:
 8005560:	4b01      	ldr	r3, [pc, #4]	; (8005568 <__errno+0x8>)
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	2000001c 	.word	0x2000001c

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	; (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	; (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	; (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	; (80055b0 <__libc_init_array+0x44>)
 8005580:	f000 fc62 	bl	8005e48 <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	080074b0 	.word	0x080074b0
 80055a8:	080074b0 	.word	0x080074b0
 80055ac:	080074b0 	.word	0x080074b0
 80055b0:	080074b4 	.word	0x080074b4

080055b4 <memset>:
 80055b4:	4402      	add	r2, r0
 80055b6:	4603      	mov	r3, r0
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d100      	bne.n	80055be <memset+0xa>
 80055bc:	4770      	bx	lr
 80055be:	f803 1b01 	strb.w	r1, [r3], #1
 80055c2:	e7f9      	b.n	80055b8 <memset+0x4>

080055c4 <sniprintf>:
 80055c4:	b40c      	push	{r2, r3}
 80055c6:	b530      	push	{r4, r5, lr}
 80055c8:	4b17      	ldr	r3, [pc, #92]	; (8005628 <sniprintf+0x64>)
 80055ca:	1e0c      	subs	r4, r1, #0
 80055cc:	681d      	ldr	r5, [r3, #0]
 80055ce:	b09d      	sub	sp, #116	; 0x74
 80055d0:	da08      	bge.n	80055e4 <sniprintf+0x20>
 80055d2:	238b      	movs	r3, #139	; 0x8b
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055da:	b01d      	add	sp, #116	; 0x74
 80055dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e0:	b002      	add	sp, #8
 80055e2:	4770      	bx	lr
 80055e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80055e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80055ec:	bf14      	ite	ne
 80055ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80055f2:	4623      	moveq	r3, r4
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	9307      	str	r3, [sp, #28]
 80055f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005606:	ab21      	add	r3, sp, #132	; 0x84
 8005608:	a902      	add	r1, sp, #8
 800560a:	4628      	mov	r0, r5
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	f000 f869 	bl	80056e4 <_svfiprintf_r>
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	bfbc      	itt	lt
 8005616:	238b      	movlt	r3, #139	; 0x8b
 8005618:	602b      	strlt	r3, [r5, #0]
 800561a:	2c00      	cmp	r4, #0
 800561c:	d0dd      	beq.n	80055da <sniprintf+0x16>
 800561e:	9b02      	ldr	r3, [sp, #8]
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e7d9      	b.n	80055da <sniprintf+0x16>
 8005626:	bf00      	nop
 8005628:	2000001c 	.word	0x2000001c

0800562c <__ssputs_r>:
 800562c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005630:	688e      	ldr	r6, [r1, #8]
 8005632:	429e      	cmp	r6, r3
 8005634:	4682      	mov	sl, r0
 8005636:	460c      	mov	r4, r1
 8005638:	4690      	mov	r8, r2
 800563a:	461f      	mov	r7, r3
 800563c:	d838      	bhi.n	80056b0 <__ssputs_r+0x84>
 800563e:	898a      	ldrh	r2, [r1, #12]
 8005640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005644:	d032      	beq.n	80056ac <__ssputs_r+0x80>
 8005646:	6825      	ldr	r5, [r4, #0]
 8005648:	6909      	ldr	r1, [r1, #16]
 800564a:	eba5 0901 	sub.w	r9, r5, r1
 800564e:	6965      	ldr	r5, [r4, #20]
 8005650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005658:	3301      	adds	r3, #1
 800565a:	444b      	add	r3, r9
 800565c:	106d      	asrs	r5, r5, #1
 800565e:	429d      	cmp	r5, r3
 8005660:	bf38      	it	cc
 8005662:	461d      	movcc	r5, r3
 8005664:	0553      	lsls	r3, r2, #21
 8005666:	d531      	bpl.n	80056cc <__ssputs_r+0xa0>
 8005668:	4629      	mov	r1, r5
 800566a:	f000 fb47 	bl	8005cfc <_malloc_r>
 800566e:	4606      	mov	r6, r0
 8005670:	b950      	cbnz	r0, 8005688 <__ssputs_r+0x5c>
 8005672:	230c      	movs	r3, #12
 8005674:	f8ca 3000 	str.w	r3, [sl]
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005688:	6921      	ldr	r1, [r4, #16]
 800568a:	464a      	mov	r2, r9
 800568c:	f000 fabe 	bl	8005c0c <memcpy>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	6126      	str	r6, [r4, #16]
 800569e:	6165      	str	r5, [r4, #20]
 80056a0:	444e      	add	r6, r9
 80056a2:	eba5 0509 	sub.w	r5, r5, r9
 80056a6:	6026      	str	r6, [r4, #0]
 80056a8:	60a5      	str	r5, [r4, #8]
 80056aa:	463e      	mov	r6, r7
 80056ac:	42be      	cmp	r6, r7
 80056ae:	d900      	bls.n	80056b2 <__ssputs_r+0x86>
 80056b0:	463e      	mov	r6, r7
 80056b2:	4632      	mov	r2, r6
 80056b4:	6820      	ldr	r0, [r4, #0]
 80056b6:	4641      	mov	r1, r8
 80056b8:	f000 fab6 	bl	8005c28 <memmove>
 80056bc:	68a3      	ldr	r3, [r4, #8]
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	1b9b      	subs	r3, r3, r6
 80056c2:	4432      	add	r2, r6
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	2000      	movs	r0, #0
 80056ca:	e7db      	b.n	8005684 <__ssputs_r+0x58>
 80056cc:	462a      	mov	r2, r5
 80056ce:	f000 fb6f 	bl	8005db0 <_realloc_r>
 80056d2:	4606      	mov	r6, r0
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d1e1      	bne.n	800569c <__ssputs_r+0x70>
 80056d8:	6921      	ldr	r1, [r4, #16]
 80056da:	4650      	mov	r0, sl
 80056dc:	f000 fabe 	bl	8005c5c <_free_r>
 80056e0:	e7c7      	b.n	8005672 <__ssputs_r+0x46>
	...

080056e4 <_svfiprintf_r>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	4698      	mov	r8, r3
 80056ea:	898b      	ldrh	r3, [r1, #12]
 80056ec:	061b      	lsls	r3, r3, #24
 80056ee:	b09d      	sub	sp, #116	; 0x74
 80056f0:	4607      	mov	r7, r0
 80056f2:	460d      	mov	r5, r1
 80056f4:	4614      	mov	r4, r2
 80056f6:	d50e      	bpl.n	8005716 <_svfiprintf_r+0x32>
 80056f8:	690b      	ldr	r3, [r1, #16]
 80056fa:	b963      	cbnz	r3, 8005716 <_svfiprintf_r+0x32>
 80056fc:	2140      	movs	r1, #64	; 0x40
 80056fe:	f000 fafd 	bl	8005cfc <_malloc_r>
 8005702:	6028      	str	r0, [r5, #0]
 8005704:	6128      	str	r0, [r5, #16]
 8005706:	b920      	cbnz	r0, 8005712 <_svfiprintf_r+0x2e>
 8005708:	230c      	movs	r3, #12
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005710:	e0d1      	b.n	80058b6 <_svfiprintf_r+0x1d2>
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	616b      	str	r3, [r5, #20]
 8005716:	2300      	movs	r3, #0
 8005718:	9309      	str	r3, [sp, #36]	; 0x24
 800571a:	2320      	movs	r3, #32
 800571c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005720:	f8cd 800c 	str.w	r8, [sp, #12]
 8005724:	2330      	movs	r3, #48	; 0x30
 8005726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058d0 <_svfiprintf_r+0x1ec>
 800572a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800572e:	f04f 0901 	mov.w	r9, #1
 8005732:	4623      	mov	r3, r4
 8005734:	469a      	mov	sl, r3
 8005736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800573a:	b10a      	cbz	r2, 8005740 <_svfiprintf_r+0x5c>
 800573c:	2a25      	cmp	r2, #37	; 0x25
 800573e:	d1f9      	bne.n	8005734 <_svfiprintf_r+0x50>
 8005740:	ebba 0b04 	subs.w	fp, sl, r4
 8005744:	d00b      	beq.n	800575e <_svfiprintf_r+0x7a>
 8005746:	465b      	mov	r3, fp
 8005748:	4622      	mov	r2, r4
 800574a:	4629      	mov	r1, r5
 800574c:	4638      	mov	r0, r7
 800574e:	f7ff ff6d 	bl	800562c <__ssputs_r>
 8005752:	3001      	adds	r0, #1
 8005754:	f000 80aa 	beq.w	80058ac <_svfiprintf_r+0x1c8>
 8005758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800575a:	445a      	add	r2, fp
 800575c:	9209      	str	r2, [sp, #36]	; 0x24
 800575e:	f89a 3000 	ldrb.w	r3, [sl]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 80a2 	beq.w	80058ac <_svfiprintf_r+0x1c8>
 8005768:	2300      	movs	r3, #0
 800576a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800576e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005772:	f10a 0a01 	add.w	sl, sl, #1
 8005776:	9304      	str	r3, [sp, #16]
 8005778:	9307      	str	r3, [sp, #28]
 800577a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800577e:	931a      	str	r3, [sp, #104]	; 0x68
 8005780:	4654      	mov	r4, sl
 8005782:	2205      	movs	r2, #5
 8005784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005788:	4851      	ldr	r0, [pc, #324]	; (80058d0 <_svfiprintf_r+0x1ec>)
 800578a:	f7fa fd29 	bl	80001e0 <memchr>
 800578e:	9a04      	ldr	r2, [sp, #16]
 8005790:	b9d8      	cbnz	r0, 80057ca <_svfiprintf_r+0xe6>
 8005792:	06d0      	lsls	r0, r2, #27
 8005794:	bf44      	itt	mi
 8005796:	2320      	movmi	r3, #32
 8005798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800579c:	0711      	lsls	r1, r2, #28
 800579e:	bf44      	itt	mi
 80057a0:	232b      	movmi	r3, #43	; 0x2b
 80057a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a6:	f89a 3000 	ldrb.w	r3, [sl]
 80057aa:	2b2a      	cmp	r3, #42	; 0x2a
 80057ac:	d015      	beq.n	80057da <_svfiprintf_r+0xf6>
 80057ae:	9a07      	ldr	r2, [sp, #28]
 80057b0:	4654      	mov	r4, sl
 80057b2:	2000      	movs	r0, #0
 80057b4:	f04f 0c0a 	mov.w	ip, #10
 80057b8:	4621      	mov	r1, r4
 80057ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057be:	3b30      	subs	r3, #48	; 0x30
 80057c0:	2b09      	cmp	r3, #9
 80057c2:	d94e      	bls.n	8005862 <_svfiprintf_r+0x17e>
 80057c4:	b1b0      	cbz	r0, 80057f4 <_svfiprintf_r+0x110>
 80057c6:	9207      	str	r2, [sp, #28]
 80057c8:	e014      	b.n	80057f4 <_svfiprintf_r+0x110>
 80057ca:	eba0 0308 	sub.w	r3, r0, r8
 80057ce:	fa09 f303 	lsl.w	r3, r9, r3
 80057d2:	4313      	orrs	r3, r2
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	46a2      	mov	sl, r4
 80057d8:	e7d2      	b.n	8005780 <_svfiprintf_r+0x9c>
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	1d19      	adds	r1, r3, #4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	9103      	str	r1, [sp, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bfbb      	ittet	lt
 80057e6:	425b      	neglt	r3, r3
 80057e8:	f042 0202 	orrlt.w	r2, r2, #2
 80057ec:	9307      	strge	r3, [sp, #28]
 80057ee:	9307      	strlt	r3, [sp, #28]
 80057f0:	bfb8      	it	lt
 80057f2:	9204      	strlt	r2, [sp, #16]
 80057f4:	7823      	ldrb	r3, [r4, #0]
 80057f6:	2b2e      	cmp	r3, #46	; 0x2e
 80057f8:	d10c      	bne.n	8005814 <_svfiprintf_r+0x130>
 80057fa:	7863      	ldrb	r3, [r4, #1]
 80057fc:	2b2a      	cmp	r3, #42	; 0x2a
 80057fe:	d135      	bne.n	800586c <_svfiprintf_r+0x188>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	1d1a      	adds	r2, r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	9203      	str	r2, [sp, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfb8      	it	lt
 800580c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005810:	3402      	adds	r4, #2
 8005812:	9305      	str	r3, [sp, #20]
 8005814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058e0 <_svfiprintf_r+0x1fc>
 8005818:	7821      	ldrb	r1, [r4, #0]
 800581a:	2203      	movs	r2, #3
 800581c:	4650      	mov	r0, sl
 800581e:	f7fa fcdf 	bl	80001e0 <memchr>
 8005822:	b140      	cbz	r0, 8005836 <_svfiprintf_r+0x152>
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	eba0 000a 	sub.w	r0, r0, sl
 800582a:	fa03 f000 	lsl.w	r0, r3, r0
 800582e:	9b04      	ldr	r3, [sp, #16]
 8005830:	4303      	orrs	r3, r0
 8005832:	3401      	adds	r4, #1
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800583a:	4826      	ldr	r0, [pc, #152]	; (80058d4 <_svfiprintf_r+0x1f0>)
 800583c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005840:	2206      	movs	r2, #6
 8005842:	f7fa fccd 	bl	80001e0 <memchr>
 8005846:	2800      	cmp	r0, #0
 8005848:	d038      	beq.n	80058bc <_svfiprintf_r+0x1d8>
 800584a:	4b23      	ldr	r3, [pc, #140]	; (80058d8 <_svfiprintf_r+0x1f4>)
 800584c:	bb1b      	cbnz	r3, 8005896 <_svfiprintf_r+0x1b2>
 800584e:	9b03      	ldr	r3, [sp, #12]
 8005850:	3307      	adds	r3, #7
 8005852:	f023 0307 	bic.w	r3, r3, #7
 8005856:	3308      	adds	r3, #8
 8005858:	9303      	str	r3, [sp, #12]
 800585a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585c:	4433      	add	r3, r6
 800585e:	9309      	str	r3, [sp, #36]	; 0x24
 8005860:	e767      	b.n	8005732 <_svfiprintf_r+0x4e>
 8005862:	fb0c 3202 	mla	r2, ip, r2, r3
 8005866:	460c      	mov	r4, r1
 8005868:	2001      	movs	r0, #1
 800586a:	e7a5      	b.n	80057b8 <_svfiprintf_r+0xd4>
 800586c:	2300      	movs	r3, #0
 800586e:	3401      	adds	r4, #1
 8005870:	9305      	str	r3, [sp, #20]
 8005872:	4619      	mov	r1, r3
 8005874:	f04f 0c0a 	mov.w	ip, #10
 8005878:	4620      	mov	r0, r4
 800587a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800587e:	3a30      	subs	r2, #48	; 0x30
 8005880:	2a09      	cmp	r2, #9
 8005882:	d903      	bls.n	800588c <_svfiprintf_r+0x1a8>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0c5      	beq.n	8005814 <_svfiprintf_r+0x130>
 8005888:	9105      	str	r1, [sp, #20]
 800588a:	e7c3      	b.n	8005814 <_svfiprintf_r+0x130>
 800588c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005890:	4604      	mov	r4, r0
 8005892:	2301      	movs	r3, #1
 8005894:	e7f0      	b.n	8005878 <_svfiprintf_r+0x194>
 8005896:	ab03      	add	r3, sp, #12
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	462a      	mov	r2, r5
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <_svfiprintf_r+0x1f8>)
 800589e:	a904      	add	r1, sp, #16
 80058a0:	4638      	mov	r0, r7
 80058a2:	f3af 8000 	nop.w
 80058a6:	1c42      	adds	r2, r0, #1
 80058a8:	4606      	mov	r6, r0
 80058aa:	d1d6      	bne.n	800585a <_svfiprintf_r+0x176>
 80058ac:	89ab      	ldrh	r3, [r5, #12]
 80058ae:	065b      	lsls	r3, r3, #25
 80058b0:	f53f af2c 	bmi.w	800570c <_svfiprintf_r+0x28>
 80058b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058b6:	b01d      	add	sp, #116	; 0x74
 80058b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058bc:	ab03      	add	r3, sp, #12
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <_svfiprintf_r+0x1f8>)
 80058c4:	a904      	add	r1, sp, #16
 80058c6:	4638      	mov	r0, r7
 80058c8:	f000 f87a 	bl	80059c0 <_printf_i>
 80058cc:	e7eb      	b.n	80058a6 <_svfiprintf_r+0x1c2>
 80058ce:	bf00      	nop
 80058d0:	08007474 	.word	0x08007474
 80058d4:	0800747e 	.word	0x0800747e
 80058d8:	00000000 	.word	0x00000000
 80058dc:	0800562d 	.word	0x0800562d
 80058e0:	0800747a 	.word	0x0800747a

080058e4 <_printf_common>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	4616      	mov	r6, r2
 80058ea:	4699      	mov	r9, r3
 80058ec:	688a      	ldr	r2, [r1, #8]
 80058ee:	690b      	ldr	r3, [r1, #16]
 80058f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	bfb8      	it	lt
 80058f8:	4613      	movlt	r3, r2
 80058fa:	6033      	str	r3, [r6, #0]
 80058fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005900:	4607      	mov	r7, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b10a      	cbz	r2, 800590a <_printf_common+0x26>
 8005906:	3301      	adds	r3, #1
 8005908:	6033      	str	r3, [r6, #0]
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	0699      	lsls	r1, r3, #26
 800590e:	bf42      	ittt	mi
 8005910:	6833      	ldrmi	r3, [r6, #0]
 8005912:	3302      	addmi	r3, #2
 8005914:	6033      	strmi	r3, [r6, #0]
 8005916:	6825      	ldr	r5, [r4, #0]
 8005918:	f015 0506 	ands.w	r5, r5, #6
 800591c:	d106      	bne.n	800592c <_printf_common+0x48>
 800591e:	f104 0a19 	add.w	sl, r4, #25
 8005922:	68e3      	ldr	r3, [r4, #12]
 8005924:	6832      	ldr	r2, [r6, #0]
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	42ab      	cmp	r3, r5
 800592a:	dc26      	bgt.n	800597a <_printf_common+0x96>
 800592c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005930:	1e13      	subs	r3, r2, #0
 8005932:	6822      	ldr	r2, [r4, #0]
 8005934:	bf18      	it	ne
 8005936:	2301      	movne	r3, #1
 8005938:	0692      	lsls	r2, r2, #26
 800593a:	d42b      	bmi.n	8005994 <_printf_common+0xb0>
 800593c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005940:	4649      	mov	r1, r9
 8005942:	4638      	mov	r0, r7
 8005944:	47c0      	blx	r8
 8005946:	3001      	adds	r0, #1
 8005948:	d01e      	beq.n	8005988 <_printf_common+0xa4>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	68e5      	ldr	r5, [r4, #12]
 800594e:	6832      	ldr	r2, [r6, #0]
 8005950:	f003 0306 	and.w	r3, r3, #6
 8005954:	2b04      	cmp	r3, #4
 8005956:	bf08      	it	eq
 8005958:	1aad      	subeq	r5, r5, r2
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	bf0c      	ite	eq
 8005960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005964:	2500      	movne	r5, #0
 8005966:	4293      	cmp	r3, r2
 8005968:	bfc4      	itt	gt
 800596a:	1a9b      	subgt	r3, r3, r2
 800596c:	18ed      	addgt	r5, r5, r3
 800596e:	2600      	movs	r6, #0
 8005970:	341a      	adds	r4, #26
 8005972:	42b5      	cmp	r5, r6
 8005974:	d11a      	bne.n	80059ac <_printf_common+0xc8>
 8005976:	2000      	movs	r0, #0
 8005978:	e008      	b.n	800598c <_printf_common+0xa8>
 800597a:	2301      	movs	r3, #1
 800597c:	4652      	mov	r2, sl
 800597e:	4649      	mov	r1, r9
 8005980:	4638      	mov	r0, r7
 8005982:	47c0      	blx	r8
 8005984:	3001      	adds	r0, #1
 8005986:	d103      	bne.n	8005990 <_printf_common+0xac>
 8005988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800598c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005990:	3501      	adds	r5, #1
 8005992:	e7c6      	b.n	8005922 <_printf_common+0x3e>
 8005994:	18e1      	adds	r1, r4, r3
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	2030      	movs	r0, #48	; 0x30
 800599a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800599e:	4422      	add	r2, r4
 80059a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059a8:	3302      	adds	r3, #2
 80059aa:	e7c7      	b.n	800593c <_printf_common+0x58>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4622      	mov	r2, r4
 80059b0:	4649      	mov	r1, r9
 80059b2:	4638      	mov	r0, r7
 80059b4:	47c0      	blx	r8
 80059b6:	3001      	adds	r0, #1
 80059b8:	d0e6      	beq.n	8005988 <_printf_common+0xa4>
 80059ba:	3601      	adds	r6, #1
 80059bc:	e7d9      	b.n	8005972 <_printf_common+0x8e>
	...

080059c0 <_printf_i>:
 80059c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	460c      	mov	r4, r1
 80059c6:	4691      	mov	r9, r2
 80059c8:	7e27      	ldrb	r7, [r4, #24]
 80059ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059cc:	2f78      	cmp	r7, #120	; 0x78
 80059ce:	4680      	mov	r8, r0
 80059d0:	469a      	mov	sl, r3
 80059d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059d6:	d807      	bhi.n	80059e8 <_printf_i+0x28>
 80059d8:	2f62      	cmp	r7, #98	; 0x62
 80059da:	d80a      	bhi.n	80059f2 <_printf_i+0x32>
 80059dc:	2f00      	cmp	r7, #0
 80059de:	f000 80d8 	beq.w	8005b92 <_printf_i+0x1d2>
 80059e2:	2f58      	cmp	r7, #88	; 0x58
 80059e4:	f000 80a3 	beq.w	8005b2e <_printf_i+0x16e>
 80059e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059f0:	e03a      	b.n	8005a68 <_printf_i+0xa8>
 80059f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059f6:	2b15      	cmp	r3, #21
 80059f8:	d8f6      	bhi.n	80059e8 <_printf_i+0x28>
 80059fa:	a001      	add	r0, pc, #4	; (adr r0, 8005a00 <_printf_i+0x40>)
 80059fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a00:	08005a59 	.word	0x08005a59
 8005a04:	08005a6d 	.word	0x08005a6d
 8005a08:	080059e9 	.word	0x080059e9
 8005a0c:	080059e9 	.word	0x080059e9
 8005a10:	080059e9 	.word	0x080059e9
 8005a14:	080059e9 	.word	0x080059e9
 8005a18:	08005a6d 	.word	0x08005a6d
 8005a1c:	080059e9 	.word	0x080059e9
 8005a20:	080059e9 	.word	0x080059e9
 8005a24:	080059e9 	.word	0x080059e9
 8005a28:	080059e9 	.word	0x080059e9
 8005a2c:	08005b79 	.word	0x08005b79
 8005a30:	08005a9d 	.word	0x08005a9d
 8005a34:	08005b5b 	.word	0x08005b5b
 8005a38:	080059e9 	.word	0x080059e9
 8005a3c:	080059e9 	.word	0x080059e9
 8005a40:	08005b9b 	.word	0x08005b9b
 8005a44:	080059e9 	.word	0x080059e9
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	080059e9 	.word	0x080059e9
 8005a50:	080059e9 	.word	0x080059e9
 8005a54:	08005b63 	.word	0x08005b63
 8005a58:	680b      	ldr	r3, [r1, #0]
 8005a5a:	1d1a      	adds	r2, r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	600a      	str	r2, [r1, #0]
 8005a60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0a3      	b.n	8005bb4 <_printf_i+0x1f4>
 8005a6c:	6825      	ldr	r5, [r4, #0]
 8005a6e:	6808      	ldr	r0, [r1, #0]
 8005a70:	062e      	lsls	r6, r5, #24
 8005a72:	f100 0304 	add.w	r3, r0, #4
 8005a76:	d50a      	bpl.n	8005a8e <_printf_i+0xce>
 8005a78:	6805      	ldr	r5, [r0, #0]
 8005a7a:	600b      	str	r3, [r1, #0]
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	da03      	bge.n	8005a88 <_printf_i+0xc8>
 8005a80:	232d      	movs	r3, #45	; 0x2d
 8005a82:	426d      	negs	r5, r5
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a88:	485e      	ldr	r0, [pc, #376]	; (8005c04 <_printf_i+0x244>)
 8005a8a:	230a      	movs	r3, #10
 8005a8c:	e019      	b.n	8005ac2 <_printf_i+0x102>
 8005a8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a92:	6805      	ldr	r5, [r0, #0]
 8005a94:	600b      	str	r3, [r1, #0]
 8005a96:	bf18      	it	ne
 8005a98:	b22d      	sxthne	r5, r5
 8005a9a:	e7ef      	b.n	8005a7c <_printf_i+0xbc>
 8005a9c:	680b      	ldr	r3, [r1, #0]
 8005a9e:	6825      	ldr	r5, [r4, #0]
 8005aa0:	1d18      	adds	r0, r3, #4
 8005aa2:	6008      	str	r0, [r1, #0]
 8005aa4:	0628      	lsls	r0, r5, #24
 8005aa6:	d501      	bpl.n	8005aac <_printf_i+0xec>
 8005aa8:	681d      	ldr	r5, [r3, #0]
 8005aaa:	e002      	b.n	8005ab2 <_printf_i+0xf2>
 8005aac:	0669      	lsls	r1, r5, #25
 8005aae:	d5fb      	bpl.n	8005aa8 <_printf_i+0xe8>
 8005ab0:	881d      	ldrh	r5, [r3, #0]
 8005ab2:	4854      	ldr	r0, [pc, #336]	; (8005c04 <_printf_i+0x244>)
 8005ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2308      	moveq	r3, #8
 8005aba:	230a      	movne	r3, #10
 8005abc:	2100      	movs	r1, #0
 8005abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ac2:	6866      	ldr	r6, [r4, #4]
 8005ac4:	60a6      	str	r6, [r4, #8]
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	bfa2      	ittt	ge
 8005aca:	6821      	ldrge	r1, [r4, #0]
 8005acc:	f021 0104 	bicge.w	r1, r1, #4
 8005ad0:	6021      	strge	r1, [r4, #0]
 8005ad2:	b90d      	cbnz	r5, 8005ad8 <_printf_i+0x118>
 8005ad4:	2e00      	cmp	r6, #0
 8005ad6:	d04d      	beq.n	8005b74 <_printf_i+0x1b4>
 8005ad8:	4616      	mov	r6, r2
 8005ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ade:	fb03 5711 	mls	r7, r3, r1, r5
 8005ae2:	5dc7      	ldrb	r7, [r0, r7]
 8005ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ae8:	462f      	mov	r7, r5
 8005aea:	42bb      	cmp	r3, r7
 8005aec:	460d      	mov	r5, r1
 8005aee:	d9f4      	bls.n	8005ada <_printf_i+0x11a>
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d10b      	bne.n	8005b0c <_printf_i+0x14c>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	07df      	lsls	r7, r3, #31
 8005af8:	d508      	bpl.n	8005b0c <_printf_i+0x14c>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	6861      	ldr	r1, [r4, #4]
 8005afe:	4299      	cmp	r1, r3
 8005b00:	bfde      	ittt	le
 8005b02:	2330      	movle	r3, #48	; 0x30
 8005b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b08:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005b0c:	1b92      	subs	r2, r2, r6
 8005b0e:	6122      	str	r2, [r4, #16]
 8005b10:	f8cd a000 	str.w	sl, [sp]
 8005b14:	464b      	mov	r3, r9
 8005b16:	aa03      	add	r2, sp, #12
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	f7ff fee2 	bl	80058e4 <_printf_common>
 8005b20:	3001      	adds	r0, #1
 8005b22:	d14c      	bne.n	8005bbe <_printf_i+0x1fe>
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b28:	b004      	add	sp, #16
 8005b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2e:	4835      	ldr	r0, [pc, #212]	; (8005c04 <_printf_i+0x244>)
 8005b30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	680e      	ldr	r6, [r1, #0]
 8005b38:	061f      	lsls	r7, r3, #24
 8005b3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b3e:	600e      	str	r6, [r1, #0]
 8005b40:	d514      	bpl.n	8005b6c <_printf_i+0x1ac>
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	bf44      	itt	mi
 8005b46:	f043 0320 	orrmi.w	r3, r3, #32
 8005b4a:	6023      	strmi	r3, [r4, #0]
 8005b4c:	b91d      	cbnz	r5, 8005b56 <_printf_i+0x196>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	f023 0320 	bic.w	r3, r3, #32
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	2310      	movs	r3, #16
 8005b58:	e7b0      	b.n	8005abc <_printf_i+0xfc>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	f043 0320 	orr.w	r3, r3, #32
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	2378      	movs	r3, #120	; 0x78
 8005b64:	4828      	ldr	r0, [pc, #160]	; (8005c08 <_printf_i+0x248>)
 8005b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b6a:	e7e3      	b.n	8005b34 <_printf_i+0x174>
 8005b6c:	065e      	lsls	r6, r3, #25
 8005b6e:	bf48      	it	mi
 8005b70:	b2ad      	uxthmi	r5, r5
 8005b72:	e7e6      	b.n	8005b42 <_printf_i+0x182>
 8005b74:	4616      	mov	r6, r2
 8005b76:	e7bb      	b.n	8005af0 <_printf_i+0x130>
 8005b78:	680b      	ldr	r3, [r1, #0]
 8005b7a:	6826      	ldr	r6, [r4, #0]
 8005b7c:	6960      	ldr	r0, [r4, #20]
 8005b7e:	1d1d      	adds	r5, r3, #4
 8005b80:	600d      	str	r5, [r1, #0]
 8005b82:	0635      	lsls	r5, r6, #24
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0x1cc>
 8005b88:	6018      	str	r0, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0x1d2>
 8005b8c:	0671      	lsls	r1, r6, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0x1c8>
 8005b90:	8018      	strh	r0, [r3, #0]
 8005b92:	2300      	movs	r3, #0
 8005b94:	6123      	str	r3, [r4, #16]
 8005b96:	4616      	mov	r6, r2
 8005b98:	e7ba      	b.n	8005b10 <_printf_i+0x150>
 8005b9a:	680b      	ldr	r3, [r1, #0]
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	600a      	str	r2, [r1, #0]
 8005ba0:	681e      	ldr	r6, [r3, #0]
 8005ba2:	6862      	ldr	r2, [r4, #4]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7fa fb1a 	bl	80001e0 <memchr>
 8005bac:	b108      	cbz	r0, 8005bb2 <_printf_i+0x1f2>
 8005bae:	1b80      	subs	r0, r0, r6
 8005bb0:	6060      	str	r0, [r4, #4]
 8005bb2:	6863      	ldr	r3, [r4, #4]
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bbc:	e7a8      	b.n	8005b10 <_printf_i+0x150>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	47d0      	blx	sl
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d0ab      	beq.n	8005b24 <_printf_i+0x164>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	079b      	lsls	r3, r3, #30
 8005bd0:	d413      	bmi.n	8005bfa <_printf_i+0x23a>
 8005bd2:	68e0      	ldr	r0, [r4, #12]
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	4298      	cmp	r0, r3
 8005bd8:	bfb8      	it	lt
 8005bda:	4618      	movlt	r0, r3
 8005bdc:	e7a4      	b.n	8005b28 <_printf_i+0x168>
 8005bde:	2301      	movs	r3, #1
 8005be0:	4632      	mov	r2, r6
 8005be2:	4649      	mov	r1, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	47d0      	blx	sl
 8005be8:	3001      	adds	r0, #1
 8005bea:	d09b      	beq.n	8005b24 <_printf_i+0x164>
 8005bec:	3501      	adds	r5, #1
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	1a5b      	subs	r3, r3, r1
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	dcf2      	bgt.n	8005bde <_printf_i+0x21e>
 8005bf8:	e7eb      	b.n	8005bd2 <_printf_i+0x212>
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	f104 0619 	add.w	r6, r4, #25
 8005c00:	e7f5      	b.n	8005bee <_printf_i+0x22e>
 8005c02:	bf00      	nop
 8005c04:	08007485 	.word	0x08007485
 8005c08:	08007496 	.word	0x08007496

08005c0c <memcpy>:
 8005c0c:	440a      	add	r2, r1
 8005c0e:	4291      	cmp	r1, r2
 8005c10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c14:	d100      	bne.n	8005c18 <memcpy+0xc>
 8005c16:	4770      	bx	lr
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c22:	4291      	cmp	r1, r2
 8005c24:	d1f9      	bne.n	8005c1a <memcpy+0xe>
 8005c26:	bd10      	pop	{r4, pc}

08005c28 <memmove>:
 8005c28:	4288      	cmp	r0, r1
 8005c2a:	b510      	push	{r4, lr}
 8005c2c:	eb01 0402 	add.w	r4, r1, r2
 8005c30:	d902      	bls.n	8005c38 <memmove+0x10>
 8005c32:	4284      	cmp	r4, r0
 8005c34:	4623      	mov	r3, r4
 8005c36:	d807      	bhi.n	8005c48 <memmove+0x20>
 8005c38:	1e43      	subs	r3, r0, #1
 8005c3a:	42a1      	cmp	r1, r4
 8005c3c:	d008      	beq.n	8005c50 <memmove+0x28>
 8005c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c46:	e7f8      	b.n	8005c3a <memmove+0x12>
 8005c48:	4402      	add	r2, r0
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	428a      	cmp	r2, r1
 8005c4e:	d100      	bne.n	8005c52 <memmove+0x2a>
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c5a:	e7f7      	b.n	8005c4c <memmove+0x24>

08005c5c <_free_r>:
 8005c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	d048      	beq.n	8005cf4 <_free_r+0x98>
 8005c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c66:	9001      	str	r0, [sp, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c6e:	bfb8      	it	lt
 8005c70:	18e4      	addlt	r4, r4, r3
 8005c72:	f000 f8d3 	bl	8005e1c <__malloc_lock>
 8005c76:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <_free_r+0x9c>)
 8005c78:	9801      	ldr	r0, [sp, #4]
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	4615      	mov	r5, r2
 8005c7e:	b933      	cbnz	r3, 8005c8e <_free_r+0x32>
 8005c80:	6063      	str	r3, [r4, #4]
 8005c82:	6014      	str	r4, [r2, #0]
 8005c84:	b003      	add	sp, #12
 8005c86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c8a:	f000 b8cd 	b.w	8005e28 <__malloc_unlock>
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	d90b      	bls.n	8005caa <_free_r+0x4e>
 8005c92:	6821      	ldr	r1, [r4, #0]
 8005c94:	1862      	adds	r2, r4, r1
 8005c96:	4293      	cmp	r3, r2
 8005c98:	bf04      	itt	eq
 8005c9a:	681a      	ldreq	r2, [r3, #0]
 8005c9c:	685b      	ldreq	r3, [r3, #4]
 8005c9e:	6063      	str	r3, [r4, #4]
 8005ca0:	bf04      	itt	eq
 8005ca2:	1852      	addeq	r2, r2, r1
 8005ca4:	6022      	streq	r2, [r4, #0]
 8005ca6:	602c      	str	r4, [r5, #0]
 8005ca8:	e7ec      	b.n	8005c84 <_free_r+0x28>
 8005caa:	461a      	mov	r2, r3
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b10b      	cbz	r3, 8005cb4 <_free_r+0x58>
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d9fa      	bls.n	8005caa <_free_r+0x4e>
 8005cb4:	6811      	ldr	r1, [r2, #0]
 8005cb6:	1855      	adds	r5, r2, r1
 8005cb8:	42a5      	cmp	r5, r4
 8005cba:	d10b      	bne.n	8005cd4 <_free_r+0x78>
 8005cbc:	6824      	ldr	r4, [r4, #0]
 8005cbe:	4421      	add	r1, r4
 8005cc0:	1854      	adds	r4, r2, r1
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	d1dd      	bne.n	8005c84 <_free_r+0x28>
 8005cc8:	681c      	ldr	r4, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6053      	str	r3, [r2, #4]
 8005cce:	4421      	add	r1, r4
 8005cd0:	6011      	str	r1, [r2, #0]
 8005cd2:	e7d7      	b.n	8005c84 <_free_r+0x28>
 8005cd4:	d902      	bls.n	8005cdc <_free_r+0x80>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	e7d3      	b.n	8005c84 <_free_r+0x28>
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf04      	itt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	6063      	str	r3, [r4, #4]
 8005cea:	bf04      	itt	eq
 8005cec:	1949      	addeq	r1, r1, r5
 8005cee:	6021      	streq	r1, [r4, #0]
 8005cf0:	6054      	str	r4, [r2, #4]
 8005cf2:	e7c7      	b.n	8005c84 <_free_r+0x28>
 8005cf4:	b003      	add	sp, #12
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	200004ac 	.word	0x200004ac

08005cfc <_malloc_r>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	1ccd      	adds	r5, r1, #3
 8005d00:	f025 0503 	bic.w	r5, r5, #3
 8005d04:	3508      	adds	r5, #8
 8005d06:	2d0c      	cmp	r5, #12
 8005d08:	bf38      	it	cc
 8005d0a:	250c      	movcc	r5, #12
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	4606      	mov	r6, r0
 8005d10:	db01      	blt.n	8005d16 <_malloc_r+0x1a>
 8005d12:	42a9      	cmp	r1, r5
 8005d14:	d903      	bls.n	8005d1e <_malloc_r+0x22>
 8005d16:	230c      	movs	r3, #12
 8005d18:	6033      	str	r3, [r6, #0]
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1e:	f000 f87d 	bl	8005e1c <__malloc_lock>
 8005d22:	4921      	ldr	r1, [pc, #132]	; (8005da8 <_malloc_r+0xac>)
 8005d24:	680a      	ldr	r2, [r1, #0]
 8005d26:	4614      	mov	r4, r2
 8005d28:	b99c      	cbnz	r4, 8005d52 <_malloc_r+0x56>
 8005d2a:	4f20      	ldr	r7, [pc, #128]	; (8005dac <_malloc_r+0xb0>)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	b923      	cbnz	r3, 8005d3a <_malloc_r+0x3e>
 8005d30:	4621      	mov	r1, r4
 8005d32:	4630      	mov	r0, r6
 8005d34:	f000 f862 	bl	8005dfc <_sbrk_r>
 8005d38:	6038      	str	r0, [r7, #0]
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f000 f85d 	bl	8005dfc <_sbrk_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d123      	bne.n	8005d8e <_malloc_r+0x92>
 8005d46:	230c      	movs	r3, #12
 8005d48:	6033      	str	r3, [r6, #0]
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f000 f86c 	bl	8005e28 <__malloc_unlock>
 8005d50:	e7e3      	b.n	8005d1a <_malloc_r+0x1e>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	1b5b      	subs	r3, r3, r5
 8005d56:	d417      	bmi.n	8005d88 <_malloc_r+0x8c>
 8005d58:	2b0b      	cmp	r3, #11
 8005d5a:	d903      	bls.n	8005d64 <_malloc_r+0x68>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	441c      	add	r4, r3
 8005d60:	6025      	str	r5, [r4, #0]
 8005d62:	e004      	b.n	8005d6e <_malloc_r+0x72>
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	42a2      	cmp	r2, r4
 8005d68:	bf0c      	ite	eq
 8005d6a:	600b      	streq	r3, [r1, #0]
 8005d6c:	6053      	strne	r3, [r2, #4]
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f000 f85a 	bl	8005e28 <__malloc_unlock>
 8005d74:	f104 000b 	add.w	r0, r4, #11
 8005d78:	1d23      	adds	r3, r4, #4
 8005d7a:	f020 0007 	bic.w	r0, r0, #7
 8005d7e:	1ac2      	subs	r2, r0, r3
 8005d80:	d0cc      	beq.n	8005d1c <_malloc_r+0x20>
 8005d82:	1a1b      	subs	r3, r3, r0
 8005d84:	50a3      	str	r3, [r4, r2]
 8005d86:	e7c9      	b.n	8005d1c <_malloc_r+0x20>
 8005d88:	4622      	mov	r2, r4
 8005d8a:	6864      	ldr	r4, [r4, #4]
 8005d8c:	e7cc      	b.n	8005d28 <_malloc_r+0x2c>
 8005d8e:	1cc4      	adds	r4, r0, #3
 8005d90:	f024 0403 	bic.w	r4, r4, #3
 8005d94:	42a0      	cmp	r0, r4
 8005d96:	d0e3      	beq.n	8005d60 <_malloc_r+0x64>
 8005d98:	1a21      	subs	r1, r4, r0
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f000 f82e 	bl	8005dfc <_sbrk_r>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d1dd      	bne.n	8005d60 <_malloc_r+0x64>
 8005da4:	e7cf      	b.n	8005d46 <_malloc_r+0x4a>
 8005da6:	bf00      	nop
 8005da8:	200004ac 	.word	0x200004ac
 8005dac:	200004b0 	.word	0x200004b0

08005db0 <_realloc_r>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	4607      	mov	r7, r0
 8005db4:	4614      	mov	r4, r2
 8005db6:	460e      	mov	r6, r1
 8005db8:	b921      	cbnz	r1, 8005dc4 <_realloc_r+0x14>
 8005dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	f7ff bf9c 	b.w	8005cfc <_malloc_r>
 8005dc4:	b922      	cbnz	r2, 8005dd0 <_realloc_r+0x20>
 8005dc6:	f7ff ff49 	bl	8005c5c <_free_r>
 8005dca:	4625      	mov	r5, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd0:	f000 f830 	bl	8005e34 <_malloc_usable_size_r>
 8005dd4:	42a0      	cmp	r0, r4
 8005dd6:	d20f      	bcs.n	8005df8 <_realloc_r+0x48>
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f7ff ff8e 	bl	8005cfc <_malloc_r>
 8005de0:	4605      	mov	r5, r0
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d0f2      	beq.n	8005dcc <_realloc_r+0x1c>
 8005de6:	4631      	mov	r1, r6
 8005de8:	4622      	mov	r2, r4
 8005dea:	f7ff ff0f 	bl	8005c0c <memcpy>
 8005dee:	4631      	mov	r1, r6
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7ff ff33 	bl	8005c5c <_free_r>
 8005df6:	e7e9      	b.n	8005dcc <_realloc_r+0x1c>
 8005df8:	4635      	mov	r5, r6
 8005dfa:	e7e7      	b.n	8005dcc <_realloc_r+0x1c>

08005dfc <_sbrk_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d06      	ldr	r5, [pc, #24]	; (8005e18 <_sbrk_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7fb fb4a 	bl	80014a0 <_sbrk>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_sbrk_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_sbrk_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	200005d0 	.word	0x200005d0

08005e1c <__malloc_lock>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__malloc_lock+0x8>)
 8005e1e:	f000 b811 	b.w	8005e44 <__retarget_lock_acquire_recursive>
 8005e22:	bf00      	nop
 8005e24:	200005d8 	.word	0x200005d8

08005e28 <__malloc_unlock>:
 8005e28:	4801      	ldr	r0, [pc, #4]	; (8005e30 <__malloc_unlock+0x8>)
 8005e2a:	f000 b80c 	b.w	8005e46 <__retarget_lock_release_recursive>
 8005e2e:	bf00      	nop
 8005e30:	200005d8 	.word	0x200005d8

08005e34 <_malloc_usable_size_r>:
 8005e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e38:	1f18      	subs	r0, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bfbc      	itt	lt
 8005e3e:	580b      	ldrlt	r3, [r1, r0]
 8005e40:	18c0      	addlt	r0, r0, r3
 8005e42:	4770      	bx	lr

08005e44 <__retarget_lock_acquire_recursive>:
 8005e44:	4770      	bx	lr

08005e46 <__retarget_lock_release_recursive>:
 8005e46:	4770      	bx	lr

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
